{"ast":null,"code":"import _defineProperty from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase';\n\nconst fetchPosts = (setter, setDoneFetching) => {\n  var db = firebase.firestore();\n  const listener = db.collection('submissions').onSnapshot(snapshot => {\n    const fetchedPosts = [];\n    snapshot.forEach(doc => {\n      fetchedPosts.push(_objectSpread({}, doc.data(), {\n        pid: doc.id\n      }));\n    });\n    setter(fetchedPosts);\n\n    if (setDoneFetching) {\n      setDoneFetching(true);\n    }\n  }, err => {\n    console.log(err.message);\n\n    if (setDoneFetching) {\n      setDoneFetching(true);\n    }\n  });\n  return listener;\n};\n\nconst fetchPost = (setter, pid) => {\n  var db = firebase.firestore();\n  db.collection('submissions').doc(pid).get().then(doc => {\n    setter(_objectSpread({}, doc.data(), {\n      pid: doc.id\n    }));\n  });\n};\n\nconst fetchUserSortedPosts = (setter, uid) => {\n  var db = firebase.firestore();\n  const listener = db.collection('submissions').where(\"uid\", \"==\", uid).orderBy('createdOn', 'desc').onSnapshot(querySnapshot => {\n    var posts = [];\n    querySnapshot.forEach(doc => {\n      posts.push(_objectSpread({\n        pid: doc.id\n      }, doc.data()));\n    });\n    setter(posts);\n  }, err => console.log(err));\n  return listener;\n};\n\nconst fetchVotes = setter => {\n  var db = firebase.firestore();\n  const listener = db.collection('postVotes').onSnapshot(snapshot => {\n    console.log('votes listener detected a change');\n    var fetchedVote;\n    var fetchedVotes = [];\n    snapshot.forEach(vote => {\n      fetchedVote = _objectSpread({}, vote.data(), {\n        vid: vote.id\n      });\n      fetchedVotes.push(fetchedVote);\n    });\n    setter(fetchedVotes);\n  });\n  return listener;\n};\n\nconst fetchVotesForPost = (setter, pid) => {\n  var db = firebase.firestore();\n  const listener = db.collection('postVotes').where('pid', '==', pid).onSnapshot(snapshot => {\n    console.log('votes listener detected a change');\n    var fetchedVote;\n    var fetchedVotes = [];\n    snapshot.forEach(vote => {\n      fetchedVote = _objectSpread({}, vote.data(), {\n        vid: vote.id\n      });\n      fetchedVotes.push(fetchedVote);\n    });\n    setter(fetchedVotes);\n  });\n  return listener;\n};\n\nconst fetchVotesForUID = (setter, uid) => {\n  var db = firebase.firestore();\n  const listener = db.collection('postVotes').where('receiverID', '==', uid).onSnapshot(querySnapshot => {\n    var votes = {};\n    querySnapshot.forEach(doc => {\n      var vote = doc.data();\n\n      if (vote.value === 1) {\n        votes[vote.pid] = votes[vote.pid] ? votes[vote.pid] + 1 : 1;\n      }\n    });\n    setter(votes);\n  });\n  return listener;\n};\n\nconst fetchFollows = setter => {\n  const db = firebase.firestore();\n  const listener = db.collection('follows').onSnapshot(snapshot => {\n    var fetchedFollows = [];\n    snapshot.forEach(doc => {\n      fetchedFollows.push(doc.data());\n    });\n    setter(fetchedFollows);\n  }, err => console.log(err));\n  return listener;\n};\n\nconst fetchSubmissionComments = setter => {\n  const db = firebase.firestore();\n  const listener = db.collection('postComments').onSnapshot(snapshot => {\n    var comments = [];\n\n    for (var comment of snapshot.docs) {\n      comment = _objectSpread({}, comment.data(), {\n        cid: comment.id\n      });\n      comments.push(comment);\n    }\n\n    setter(comments);\n  }, err => {\n    console.log(err);\n  });\n  return listener;\n};\n\nconst fetchSubmissionCommentsForPost = (setter, pid) => {\n  const db = firebase.firestore();\n  const listener = db.collection('postComments').where('pid', '==', pid).onSnapshot(snapshot => {\n    var comments = [];\n\n    for (var comment of snapshot.docs) {\n      comment = _objectSpread({}, comment.data(), {\n        cid: comment.id\n      });\n      comments.push(comment);\n    }\n\n    setter(comments);\n  });\n  return listener;\n};\n\nexport default {\n  allPostsListener: fetchPosts,\n  allVotesListener: fetchVotes,\n  allFollowsListener: fetchFollows,\n  allSubmissionCommentsListener: fetchSubmissionComments,\n  voteForUIDListener: fetchVotesForUID,\n  userSortedPostsListener: fetchUserSortedPosts,\n  votesForPostListener: fetchVotesForPost,\n  submissionCommentsForPostListener: fetchSubmissionCommentsForPost,\n  fetchSinglePost: fetchPost\n};","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/FireApi/FireApi.js"],"names":["firebase","fetchPosts","setter","setDoneFetching","db","firestore","listener","collection","onSnapshot","snapshot","fetchedPosts","forEach","doc","push","data","pid","id","err","console","log","message","fetchPost","get","then","fetchUserSortedPosts","uid","where","orderBy","querySnapshot","posts","fetchVotes","fetchedVote","fetchedVotes","vote","vid","fetchVotesForPost","fetchVotesForUID","votes","value","fetchFollows","fetchedFollows","fetchSubmissionComments","comments","comment","docs","cid","fetchSubmissionCommentsForPost","allPostsListener","allVotesListener","allFollowsListener","allSubmissionCommentsListener","voteForUIDListener","userSortedPostsListener","votesForPostListener","submissionCommentsForPostListener","fetchSinglePost"],"mappings":"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","sourcesContent":["import firebase from 'firebase'\n\nconst fetchPosts = (setter, setDoneFetching) => {\n    var db = firebase.firestore()\n    const listener = db.collection('submissions').onSnapshot(snapshot => {\n        const fetchedPosts = []\n        snapshot.forEach(doc => {\n            fetchedPosts.push({\n                ...doc.data(),\n                pid: doc.id\n            })\n        })\n        setter(fetchedPosts)\n        if (setDoneFetching) {setDoneFetching(true)}\n    }, err => {\n        console.log(err.message)\n        if (setDoneFetching) {setDoneFetching(true)}\n    })\n    return listener\n}\n\nconst fetchPost = (setter, pid) => {\n    var db = firebase.firestore()\n    db.collection('submissions').doc(pid).get()\n        .then(doc => {\n            setter({ ...doc.data(), pid: doc.id })\n        })\n}\n\nconst fetchUserSortedPosts = (setter, uid) => {\n    var db = firebase.firestore()\n    const listener = db.collection('submissions').where(\"uid\", \"==\", uid).orderBy('createdOn', 'desc')\n        .onSnapshot(querySnapshot => {\n            var posts = []\n            querySnapshot.forEach(doc => { posts.push({ pid: doc.id, ...doc.data() }) })\n            setter(posts)\n        }, err => console.log(err))\n    return listener\n}\n\nconst fetchVotes = (setter) => {\n    var db = firebase.firestore()\n    const listener = db.collection('postVotes').onSnapshot(snapshot => {\n        console.log('votes listener detected a change')\n        var fetchedVote;\n        var fetchedVotes = []\n        snapshot.forEach(vote => {\n            fetchedVote = {\n                ...vote.data(),\n                vid: vote.id\n            }\n            fetchedVotes.push(fetchedVote)\n        })\n        setter(fetchedVotes)\n    })\n    return listener\n}\nconst fetchVotesForPost = (setter, pid) => {\n    var db = firebase.firestore()\n    const listener = db.collection('postVotes').where('pid', '==', pid).onSnapshot(snapshot => {\n        console.log('votes listener detected a change')\n        var fetchedVote;\n        var fetchedVotes = []\n        snapshot.forEach(vote => {\n            fetchedVote = {\n                ...vote.data(),\n                vid: vote.id\n            }\n            fetchedVotes.push(fetchedVote)\n        })\n        setter(fetchedVotes)\n    })\n    return listener\n}\n\nconst fetchVotesForUID = (setter, uid) => {\n    var db = firebase.firestore()\n    const listener = db.collection('postVotes').where('receiverID', '==', uid).onSnapshot(querySnapshot => {\n        var votes = {}\n        querySnapshot.forEach(doc => {\n            var vote = doc.data()\n            if (vote.value === 1) {\n                votes[vote.pid] = votes[vote.pid] ? votes[vote.pid] + 1 : 1\n            }\n\n        })\n        setter(votes)\n\n    })\n    return listener\n}\n\nconst fetchFollows = (setter) => {\n    const db = firebase.firestore()\n    const listener = db.collection('follows').onSnapshot(snapshot => {\n        var fetchedFollows = []\n        snapshot.forEach(doc => {\n            fetchedFollows.push(doc.data())\n        })\n        setter(fetchedFollows)\n    }, err => console.log(err))\n    return listener\n}\n\nconst fetchSubmissionComments = (setter) => {\n    const db = firebase.firestore()\n    const listener = db.collection('postComments').onSnapshot((snapshot) => {\n        var comments = []\n        for (var comment of snapshot.docs) {\n            comment = {\n                ...comment.data(),\n                cid: comment.id\n            }\n            comments.push(comment)\n        }\n        setter(comments)\n    }, err => {\n        console.log(err)\n    })\n    return listener\n}\nconst fetchSubmissionCommentsForPost = (setter, pid) => {\n    const db = firebase.firestore()\n    const listener = db.collection('postComments').where('pid', '==', pid).onSnapshot((snapshot) => {\n        var comments = []\n        for (var comment of snapshot.docs) {\n            comment = {\n                ...comment.data(),\n                cid: comment.id\n            }\n            comments.push(comment)\n        }\n        setter(comments)\n    })\n    return listener\n}\n\nexport default {\n    allPostsListener: fetchPosts,\n    allVotesListener: fetchVotes,\n    allFollowsListener: fetchFollows,\n    allSubmissionCommentsListener: fetchSubmissionComments,\n    voteForUIDListener: fetchVotesForUID,\n    userSortedPostsListener: fetchUserSortedPosts,\n    votesForPostListener: fetchVotesForPost,\n    submissionCommentsForPostListener: fetchSubmissionCommentsForPost,\n    fetchSinglePost: fetchPost\n\n}"]},"metadata":{},"sourceType":"module"}