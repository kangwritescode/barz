{"ast":null,"code":"import _defineProperty from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/containers/Wordsmiths/Wordsmiths.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport 'firebase/firestore';\nimport React, { Component, useState, useEffect } from 'react';\nimport { Redirect } from 'react-router';\nimport shuffle from 'shuffle-array';\nimport joey from '../../assets/videos/joey.m4v';\nimport joeyIMG from '../../assets/images/joeyIMG.png';\nimport firebase from '../../Firebase';\nimport Rappers from './Rappers/Rappers';\nimport WordNavBar from './WordNavBar/WordNavBar';\nimport './Wordsmiths.css';\nimport timeDict from './WordSmithsTools/timeDict';\nimport FireApi from '../../Api/FireApi/FireApi';\n\nconst Wordsmiths = props => {\n  const _useState = useState({\n    rank: \"Best\",\n    time: \"All Time\",\n    state: \"All States\",\n    coast: \"All Coasts\",\n    gender: \"All Genders\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        sortFilterState = _useState2[0],\n        setSortFilterState = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        users = _useState4[0],\n        setUsers = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        submissions = _useState6[0],\n        setSubmissions = _useState6[1];\n\n  const _useState7 = useState(true),\n        _useState8 = _slicedToArray(_useState7, 2),\n        fetching = _useState8[0],\n        setFetching = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        votes = _useState10[0],\n        setVotes = _useState10[1];\n\n  const _useState11 = useState(null),\n        _useState12 = _slicedToArray(_useState11, 2),\n        keyPressed = _useState12[0],\n        setKeyPressed = _useState12[1];\n\n  useEffect(() => {\n    setFetching(true);\n    let submissionsListener = FireApi.allPostsListener(setSubmissions);\n    let votesListener = FireApi.allVotesListener(setVotes);\n    let usersListener = fetchUsers(setUsers);\n    return () => {\n      submissionsListener();\n      votesListener();\n      usersListener();\n      setFetching(false);\n    };\n  }, []);\n  useEffect(() => {\n    const assignRedirect = event => {\n      switch (event.key) {\n        case '1':\n          return setKeyPressed(1);\n\n        case '2':\n          return setKeyPressed(2);\n\n        case '3':\n          return setKeyPressed(3);\n\n        default:\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', assignRedirect);\n    return () => {\n      document.removeEventListener('keydown', assignRedirect);\n    };\n  }, []); // fetch ALl votes\n\n  const fetchUsers = async setter => {\n    let db = firebase.firestore();\n    var listener = db.collection(\"users\").get().then(querySnapshot => {\n      let users = {};\n      querySnapshot.forEach(doc => {\n        users[doc.id] = _objectSpread({}, doc.data(), {\n          uid: doc.id\n        });\n      });\n      return setter(users);\n    }).catch(err => {\n      throw err;\n    });\n    return listener;\n  };\n\n  const sortAndFilter = (type, parameter) => {\n    // set appropriate UI\n    if (type === 'state' && parameter !== 'All States') {\n      setSortFilterState(_objectSpread({}, sortFilterState, {\n        coast: 'All Coasts',\n        [type]: parameter\n      }));\n    } else if (type === 'coast' && parameter !== 'All Coasts') {\n      setSortFilterState(_objectSpread({}, sortFilterState, {\n        state: 'All States',\n        [type]: parameter\n      }));\n    } else {\n      setSortFilterState(_objectSpread({}, sortFilterState, {\n        [type]: parameter\n      }));\n    }\n  };\n\n  let displayedRappers = {};\n  submissions.forEach(submission => {\n    // find the votes for that submission\n    let filteredVotes = votes.filter(vote => vote.pid === submission.pid);\n    var user = users[submission.uid];\n\n    if (!displayedRappers[submission.uid]) {\n      displayedRappers[submission.uid] = {\n        uid: submission.uid,\n        gender: submission.gender,\n        username: submission.username,\n        address: submission.address,\n        votes: filteredVotes,\n        photoURL: user ? user.photoURL : '',\n        blurb: user ? user.blurb : '',\n        handles: user ? user.handles : ''\n      };\n    } else {\n      displayedRappers[submission.uid].votes[submission.createdOn] = filteredVotes;\n    }\n  });\n  displayedRappers = _objectSpread({}, displayedRappers);\n  let allVotes = votes ? Object.values(votes) : []; // Filters start\n\n  if (sortFilterState.state !== \"All States\") {\n    displayedRappers = Object.fromEntries(Object.entries(displayedRappers).filter(([k, rapper]) => rapper.address.state === sortFilterState.state));\n  }\n\n  if (sortFilterState.coast !== \"All Coasts\") {\n    displayedRappers = Object.fromEntries(Object.entries(displayedRappers).filter(([k, rapper]) => rapper.address.region === sortFilterState.coast));\n  }\n\n  if (sortFilterState.gender !== \"All Genders\") {\n    displayedRappers = Object.fromEntries(Object.entries(displayedRappers).filter(([k, rapper]) => rapper.gender === sortFilterState.gender));\n  } // Filters end\n  // Tally points start\n\n\n  for (let uid in displayedRappers) {\n    let rapper = displayedRappers[uid];\n    let tally = 0;\n    allVotes.forEach(vote => {\n      let now = new Date();\n      let passedMilliseconds = now - vote.postDate.toDate().getTime();\n      let passedDays = passedMilliseconds / 1000 / 60 / 60 / 24; // tally if within given time \n\n      if (!(passedDays > timeDict[sortFilterState.time]) && uid === vote.receiverID) {\n        tally += vote.value;\n      }\n    }); // if amount of votes is negative make zero\n\n    rapper['tally'] = tally < 0 ? 0 : tally; // submissionCount\n\n    let filteredSubmissions = submissions.filter(submission => {\n      let now = new Date();\n      let passedMilliseconds = now - submission.createdOn.toDate().getTime();\n      let passedDays = passedMilliseconds / 1000 / 60 / 60 / 24;\n      return !(passedDays > timeDict[sortFilterState.time]) && submission.uid === uid;\n    });\n    let noOfSubmissions = filteredSubmissions.length;\n    rapper['submissionCount'] = noOfSubmissions;\n  } // Tally points end\n\n\n  displayedRappers = displayedRappers ? Object.values(displayedRappers) : []; // Sort start\n\n  displayedRappers = sortFilterState.rank === \"Random\" ? // random sort\n  shuffle(displayedRappers) : // best sort\n  displayedRappers.sort((rapper_A, rapper_B) => {\n    return rapper_A.tally < rapper_B.tally ? 1 : -1;\n  }); // Sort end\n  // tally city and coast votes\n\n  let cityVotes = {};\n  let coastVotes = {};\n  displayedRappers.forEach(rapper => {\n    const cityState = \"\".concat(rapper.address.city, \", \").concat(rapper.address.state);\n\n    if (rapper.tally > 0) {\n      cityVotes[cityState] = cityState in cityVotes ? cityVotes[cityState] + rapper.tally : rapper.tally;\n      coastVotes[rapper.address.region] = rapper.address.region in coastVotes ? coastVotes[rapper.address.region] + rapper.tally : rapper.tally;\n    }\n  }); //  Best City and Best Coast reducers\n\n  let bestCity = Object.keys(cityVotes).length ? Object.keys(cityVotes).reduce((a, b) => cityVotes[a] > cityVotes[b] ? a : b) : 'N/A';\n  let bestCoast = Object.keys(coastVotes).length ? Object.keys(coastVotes).reduce((a, b) => coastVotes[a] > coastVotes[b] ? a : b) : 'N/A';\n  var content = React.createElement(\"div\", {\n    className: \"WordsmithsContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    id: \"backup-img\",\n    src: joeyIMG,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }), React.createElement(\"video\", {\n    id: \"badass\",\n    src: joey,\n    autoPlay: true,\n    loop: true,\n    playsInline: true,\n    muted: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"WordSmithsOverlay\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }), React.createElement(WordNavBar, {\n    rank: sortFilterState.rank,\n    time: sortFilterState.time,\n    state: sortFilterState.state,\n    coast: sortFilterState.coast,\n    gender: sortFilterState.gender,\n    sortAndFilter: sortAndFilter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }), React.createElement(Rappers, {\n    rappers: displayedRappers,\n    rank: sortFilterState.rank,\n    time: sortFilterState.time,\n    state: sortFilterState.state,\n    coast: sortFilterState.coast,\n    gender: sortFilterState.gender,\n    bestCity: bestCity,\n    bestCoast: bestCoast,\n    sort: sortFilterState.rank,\n    fetching: fetching,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  })); // switch (keyPressed) {\n  //     case 1: return content = <Redirect to='/hub'></Redirect>\n  //     case 2: return content = <Redirect to='/scribble'></Redirect>\n  //     case 3: return content = <Redirect to='/judge'></Redirect>\n  //     default: break;\n  // }\n\n  return content;\n};\n\nexport default Wordsmiths;","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/containers/Wordsmiths/Wordsmiths.js"],"names":["React","Component","useState","useEffect","Redirect","shuffle","joey","joeyIMG","firebase","Rappers","WordNavBar","timeDict","FireApi","Wordsmiths","props","rank","time","state","coast","gender","sortFilterState","setSortFilterState","users","setUsers","submissions","setSubmissions","fetching","setFetching","votes","setVotes","keyPressed","setKeyPressed","submissionsListener","allPostsListener","votesListener","allVotesListener","usersListener","fetchUsers","assignRedirect","event","key","document","addEventListener","removeEventListener","setter","db","firestore","listener","collection","get","then","querySnapshot","forEach","doc","id","data","uid","catch","err","sortAndFilter","type","parameter","displayedRappers","submission","filteredVotes","filter","vote","pid","user","username","address","photoURL","blurb","handles","createdOn","allVotes","Object","values","fromEntries","entries","k","rapper","region","tally","now","Date","passedMilliseconds","postDate","toDate","getTime","passedDays","receiverID","value","filteredSubmissions","noOfSubmissions","length","sort","rapper_A","rapper_B","cityVotes","coastVotes","cityState","city","bestCity","keys","reduce","a","b","bestCoast","content"],"mappings":"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","sourcesContent":["import 'firebase/firestore'\nimport React, { Component, useState, useEffect } from 'react'\nimport { Redirect } from 'react-router'\nimport shuffle from 'shuffle-array'\nimport joey from '../../assets/videos/joey.m4v'\nimport joeyIMG from '../../assets/images/joeyIMG.png'\nimport firebase from '../../Firebase'\nimport Rappers from './Rappers/Rappers'\nimport WordNavBar from './WordNavBar/WordNavBar'\nimport './Wordsmiths.css'\nimport timeDict from './WordSmithsTools/timeDict'\nimport FireApi from '../../Api/FireApi/FireApi'\n\n\n\nconst Wordsmiths = (props) => {\n\n    const [sortFilterState, setSortFilterState] = useState({\n        rank: \"Best\",\n        time: \"All Time\",\n        state: \"All States\",\n        coast: \"All Coasts\",\n        gender: \"All Genders\",\n    })\n    const [users, setUsers] = useState({})\n    const [submissions, setSubmissions] = useState([])\n    const [fetching, setFetching] = useState(true)\n    const [votes, setVotes] = useState([])\n\n    const [keyPressed, setKeyPressed] = useState(null)\n\n\n\n    useEffect(() => {\n        setFetching(true)\n        let submissionsListener = FireApi.allPostsListener(setSubmissions)\n        let votesListener = FireApi.allVotesListener(setVotes)\n        let usersListener = fetchUsers(setUsers)\n        return () => {\n            submissionsListener()\n            votesListener()\n            usersListener()\n            setFetching(false)\n        };\n    }, [])\n\n\n    useEffect(() => {\n        const assignRedirect = (event) => {\n            switch (event.key) {\n                case '1': return setKeyPressed(1)\n                case '2': return setKeyPressed(2)\n                case '3': return setKeyPressed(3)\n                default: break;\n            }\n        }\n        document.addEventListener('keydown', assignRedirect)\n        return () => {\n            document.removeEventListener('keydown', assignRedirect)\n        };\n    }, [])\n\n\n    // fetch ALl votes\n    const fetchUsers = async (setter) => {\n        let db = firebase.firestore()\n        var listener = db.collection(\"users\").get()\n        .then((querySnapshot) => {\n            let users = {}\n            querySnapshot.forEach((doc) => {\n                users[doc.id] = { ...doc.data(), uid: doc.id }\n            });\n            return setter(users)\n\n        })\n        .catch(err => { throw err })\n        return listener\n    }\n\n\n    const sortAndFilter = (type, parameter) => {\n        // set appropriate UI\n        if (type === 'state' && parameter !== 'All States') {\n            setSortFilterState({\n                ...sortFilterState,\n                coast: 'All Coasts',\n                [type]: parameter\n            })\n        } else if (type === 'coast' && parameter !== 'All Coasts') {\n            setSortFilterState({\n                ...sortFilterState,\n                state: 'All States',\n                [type]: parameter\n            })\n        }\n        else {\n            setSortFilterState({\n                ...sortFilterState,\n                [type]: parameter\n            })\n        }\n\n    }\n    let displayedRappers = {}\n    submissions.forEach(submission => {\n\n        // find the votes for that submission\n        let filteredVotes = votes.filter(vote => vote.pid === submission.pid)\n        var user = users[submission.uid]\n        if (!displayedRappers[submission.uid]) {\n            displayedRappers[submission.uid] = {\n                uid: submission.uid,\n                gender: submission.gender,\n                username: submission.username,\n                address: submission.address,\n                votes: filteredVotes,\n                photoURL: user ? user.photoURL : '',\n                blurb: user ? user.blurb : '',\n                handles:  user ? user.handles : ''\n            }\n        } else {\n            displayedRappers[submission.uid].votes[submission.createdOn] = filteredVotes\n        }\n    })\n\n\n    displayedRappers = { ...displayedRappers }\n    let allVotes = votes ? Object.values(votes) : []\n\n    // Filters start\n    if (sortFilterState.state !== \"All States\") { displayedRappers = Object.fromEntries(Object.entries(displayedRappers).filter(([k, rapper]) => rapper.address.state === sortFilterState.state)) }\n    if (sortFilterState.coast !== \"All Coasts\") { displayedRappers = Object.fromEntries(Object.entries(displayedRappers).filter(([k, rapper]) => rapper.address.region === sortFilterState.coast)) }\n    if (sortFilterState.gender !== \"All Genders\") { displayedRappers = Object.fromEntries(Object.entries(displayedRappers).filter(([k, rapper]) => rapper.gender === sortFilterState.gender)) }\n    // Filters end\n\n\n    // Tally points start\n    for (let uid in displayedRappers) {\n        let rapper = displayedRappers[uid]\n        let tally = 0\n        allVotes.forEach((vote) => {\n            let now = new Date()\n            let passedMilliseconds = now - vote.postDate.toDate().getTime()\n            let passedDays = (passedMilliseconds / 1000 / 60 / 60 / 24)\n            // tally if within given time \n            if (!(passedDays > timeDict[sortFilterState.time]) && uid === vote.receiverID) {\n                tally += vote.value\n            }\n        })\n        // if amount of votes is negative make zero\n        rapper['tally'] = tally < 0 ? 0 : tally\n\n        // submissionCount\n        let filteredSubmissions = submissions.filter(submission => {\n            let now = new Date()\n            let passedMilliseconds = now - submission.createdOn.toDate().getTime()\n            let passedDays = (passedMilliseconds / 1000 / 60 / 60 / 24)\n            return !(passedDays > timeDict[sortFilterState.time]) && submission.uid === uid\n        })\n        let noOfSubmissions = filteredSubmissions.length\n        rapper['submissionCount'] = noOfSubmissions\n    }\n    // Tally points end\n\n\n    displayedRappers = displayedRappers ? Object.values(displayedRappers) : []\n\n    // Sort start\n    displayedRappers = (sortFilterState.rank === \"Random\") ?\n        // random sort\n        shuffle(displayedRappers) :\n        // best sort\n        displayedRappers.sort((rapper_A, rapper_B) => {\n            return (rapper_A.tally < rapper_B.tally) ? 1 : -1\n        })\n    // Sort end\n\n    // tally city and coast votes\n    let cityVotes = {}\n    let coastVotes = {}\n    displayedRappers.forEach(rapper => {\n        const cityState = `${rapper.address.city}, ${rapper.address.state}`\n        if (rapper.tally > 0) {\n            cityVotes[cityState] = (cityState in cityVotes) ?\n                cityVotes[cityState] + rapper.tally\n                : rapper.tally\n            coastVotes[rapper.address.region] = (rapper.address.region in coastVotes) ?\n                coastVotes[rapper.address.region] + rapper.tally\n                : rapper.tally\n        }\n    })\n\n    //  Best City and Best Coast reducers\n    let bestCity = Object.keys(cityVotes).length ? Object.keys(cityVotes).reduce((a, b) => cityVotes[a] > cityVotes[b] ? a : b) : 'N/A'\n    let bestCoast = Object.keys(coastVotes).length ? Object.keys(coastVotes).reduce((a, b) => coastVotes[a] > coastVotes[b] ? a : b) : 'N/A'\n\n\n\n\n\n    var content = (\n        <div className=\"WordsmithsContainer\">\n            <img id=\"backup-img\" src={joeyIMG} alt=\"\" />\n\n            <video id=\"badass\" src={joey} autoPlay={true} loop={true} playsInline={true} muted />\n            <div id=\"WordSmithsOverlay\" />\n            <WordNavBar\n                rank={sortFilterState.rank}\n                time={sortFilterState.time}\n                state={sortFilterState.state}\n                coast={sortFilterState.coast}\n                gender={sortFilterState.gender}\n                sortAndFilter={sortAndFilter} />\n            <Rappers\n                rappers={displayedRappers}\n                rank={sortFilterState.rank}\n                time={sortFilterState.time}\n                state={sortFilterState.state}\n                coast={sortFilterState.coast}\n                gender={sortFilterState.gender}\n                bestCity={bestCity}\n                bestCoast={bestCoast}\n                sort={sortFilterState.rank}\n                fetching={fetching} />\n        </div>\n    )\n    // switch (keyPressed) {\n    //     case 1: return content = <Redirect to='/hub'></Redirect>\n    //     case 2: return content = <Redirect to='/scribble'></Redirect>\n    //     case 3: return content = <Redirect to='/judge'></Redirect>\n    //     default: break;\n\n    // }\n    return content\n}\n\nexport default Wordsmiths\n"]},"metadata":{},"sourceType":"module"}