{"ast":null,"code":"import _slicedToArray from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/components/Scribble/MyBars/MyBars.js\";\nimport React, { Component, useState, useEffect } from 'react';\nimport firebase from '../../../Firebase';\nimport { connect } from 'react-redux';\nimport 'firebase/firestore';\nimport './MyBars.css';\nimport ViewedPost from './ViewedBar/ViewedPost';\nimport GenID from '../../../shared/GenID';\nimport FireApi from '../../../FireApi/FireApi';\n\nconst MyBars = props => {\n  const monthString = {\n    '1': 'January',\n    '2': 'February',\n    '3': 'March',\n    '4': 'April',\n    '5': 'May',\n    '6': 'June',\n    '7': 'July',\n    '8': 'August',\n    '9': 'September',\n    '10': 'October',\n    '11': 'November',\n    '12': 'December'\n  };\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        posts = _useState2[0],\n        setPosts = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        votes = _useState4[0],\n        setVotes = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        comments = _useState6[0],\n        setComments = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        showPost = _useState8[0],\n        setShowPost = _useState8[1];\n\n  const _useState9 = useState(null),\n        _useState10 = _slicedToArray(_useState9, 2),\n        viewedPost = _useState10[0],\n        setViewedPost = _useState10[1];\n\n  useEffect(() => {\n    if (props.myUID) {\n      const fetchVotesForUIDListener = FireApi.voteForUIDListener(setVotes, props.myUID);\n      const userSortedPostsListener = FireApi.userSortedPostsListener(setPosts, props.myUID);\n      const fetchCommentsListener = FireApi.allSubmissionCommentsListener(setComments);\n      return () => {\n        fetchVotesForUIDListener();\n        userSortedPostsListener();\n        fetchCommentsListener();\n      };\n    }\n  }, [props.myUID]);\n\n  const insertDateHeaders = inputArr => {\n    // create a copy\n    var arr = [...inputArr];\n    var currYear = 0;\n    var currMonth = 0;\n    var i = 0;\n\n    while (i < arr.length) {\n      var postYear = arr[i].createdOn.toDate().getUTCFullYear();\n      var postMonth = arr[i].createdOn.toDate().getUTCMonth() + 1; // if a new year is introduced, update\n\n      if (postYear !== currYear) {\n        currYear = postYear;\n      } // if a new month is introduced, or the same month but different year\n\n\n      if (postMonth !== currMonth || postMonth == currMonth && currYear != postYear) {\n        arr.splice(i, 0, [postMonth, currYear]);\n        currMonth = postMonth;\n        i += 1;\n      } else {\n        i += 1;\n      }\n    } // return copy with inserted variables\n\n\n    return arr;\n  };\n\n  const toggleModal = (modal, value) => {\n    setShowPost(value);\n  };\n\n  const getCommentCount = (pid, comments) => {\n    return comments.filter(comment => comment.pid === pid).length;\n  }; // RENDER ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // UI\n\n\n  let focused = props.focused === \"MyBars\";\n  let myBarsId = focused ? 'mybars-expanded' : 'mybars-compressed';\n  let widgetHeader = focused ? 'my-bars-header-compressed' : 'my-bars-header-expanded';\n  let postsContainerId = focused ? 'posts-container-opaque' : 'posts-container-transparent'; // insert the date headers into the array\n\n  var preppedPosts = insertDateHeaders(posts);\n  return React.createElement(\"div\", {\n    className: \"my-bars\",\n    id: myBarsId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"my-bars-widget-header\",\n    id: widgetHeader,\n    onClick: !focused ? props.toggle : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Manage\"), React.createElement(\"div\", {\n    className: \"posts-container\",\n    id: postsContainerId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, preppedPosts.map(post => {\n    if (typeof post === 'array' || post instanceof Array) {\n      return React.createElement(\"div\", {\n        id: \"month-header\",\n        key: GenID(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, monthString[post[0]], \" \", post[1]);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"a-post\",\n      onClick: () => props.editPost(post.pid),\n      key: GenID(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"likes-overlay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-fire\",\n      id: \"my-bars-flame\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })), votes[post.pid] > 0 ? votes[post.pid] : 0, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-comment\",\n      id: \"my-bars-comment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), getCommentCount(post.pid, comments)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"\\\"\" + post.content.lineOne + \"...\\\"\"));\n  })), showPost ? React.createElement(ViewedPost, {\n    toggleViewedPost: toggleModal,\n    pid: viewedPost,\n    toggleModal: toggleModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }) : null);\n};\n\nconst mapStateToProps = state => {\n  return {\n    myUID: state.uid\n  };\n};\n\nexport default connect(mapStateToProps, null)(MyBars);","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/components/Scribble/MyBars/MyBars.js"],"names":["React","Component","useState","useEffect","firebase","connect","ViewedPost","GenID","FireApi","MyBars","props","monthString","posts","setPosts","votes","setVotes","comments","setComments","showPost","setShowPost","viewedPost","setViewedPost","myUID","fetchVotesForUIDListener","voteForUIDListener","userSortedPostsListener","fetchCommentsListener","allSubmissionCommentsListener","insertDateHeaders","inputArr","arr","currYear","currMonth","i","length","postYear","createdOn","toDate","getUTCFullYear","postMonth","getUTCMonth","splice","toggleModal","modal","value","getCommentCount","pid","filter","comment","focused","myBarsId","widgetHeader","postsContainerId","preppedPosts","toggle","map","post","Array","editPost","content","lineOne","mapStateToProps","state","uid"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react'\nimport firebase from '../../../Firebase'\nimport { connect } from 'react-redux'\nimport 'firebase/firestore'\nimport './MyBars.css'\nimport ViewedPost from './ViewedBar/ViewedPost'\nimport GenID from '../../../shared/GenID'\nimport FireApi from '../../../FireApi/FireApi'\n\n\nconst MyBars = (props) => {\n\n    const monthString = {\n        '1': 'January',\n        '2': 'February',\n        '3': 'March',\n        '4': 'April',\n        '5': 'May',\n        '6': 'June',\n        '7': 'July',\n        '8': 'August',\n        '9': 'September',\n        '10': 'October',\n        '11': 'November',\n        '12': 'December'\n    }\n\n    const [posts, setPosts] = useState([])\n    const [votes, setVotes] = useState({})\n    const [comments, setComments] = useState([])\n    const [showPost, setShowPost] = useState(false)\n    const [viewedPost, setViewedPost] = useState(null)\n\n    useEffect(() => {\n        if (props.myUID) {\n            const fetchVotesForUIDListener = FireApi.voteForUIDListener(setVotes, props.myUID)\n            const userSortedPostsListener = FireApi.userSortedPostsListener(setPosts, props.myUID)\n            const fetchCommentsListener = FireApi.allSubmissionCommentsListener(setComments)\n            return () => {\n                fetchVotesForUIDListener()\n                userSortedPostsListener()\n                fetchCommentsListener()\n            };\n        }\n\n    }, [props.myUID])\n\n\n    const insertDateHeaders = (inputArr) => {\n        // create a copy\n        var arr = [...inputArr]\n        var currYear = 0\n        var currMonth = 0\n        var i = 0\n        while (i < arr.length) {\n            var postYear = arr[i].createdOn.toDate().getUTCFullYear()\n            var postMonth = arr[i].createdOn.toDate().getUTCMonth() + 1\n\n            // if a new year is introduced, update\n            if (postYear !== currYear) {\n                currYear = postYear\n            }\n            // if a new month is introduced, or the same month but different year\n            if (postMonth !== currMonth || postMonth == currMonth && currYear != postYear) {\n                arr.splice(i, 0, [postMonth, currYear])\n                currMonth = postMonth\n                i += 1\n            } else {\n                i += 1\n            }\n        }\n        // return copy with inserted variables\n        return arr\n    }\n\n    const toggleModal = (modal, value) => {\n        setShowPost(value)\n    }\n    const getCommentCount = (pid, comments) => {\n        return comments.filter(comment => comment.pid === pid).length\n    }\n\n\n\n\n\n    // RENDER ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n    // UI\n    let focused = props.focused === \"MyBars\"\n    let myBarsId = focused ? 'mybars-expanded' : 'mybars-compressed'\n    let widgetHeader = focused ? 'my-bars-header-compressed' : 'my-bars-header-expanded'\n    let postsContainerId = focused ? 'posts-container-opaque' : 'posts-container-transparent'\n\n    // insert the date headers into the array\n\n    var preppedPosts = insertDateHeaders(posts)\n\n    return (\n        <div className=\"my-bars\" id={myBarsId}>\n            <div className={`my-bars-widget-header`} id={widgetHeader} onClick={!focused ? props.toggle : null}>Manage</div>\n            <div className=\"posts-container\" id={postsContainerId}>\n                {preppedPosts.map((post) => {\n                    if ((typeof post === 'array' || post instanceof Array)) {\n                        return <div id='month-header' key={GenID()}>{monthString[post[0]]} {post[1]}</div>\n                    }\n                    return (\n                        <div className=\"a-post\" onClick={() => props.editPost(post.pid)} key={GenID()}>\n                            <div id='likes-overlay'>\n                                <span><i className=\"fas fa-fire\" id=\"my-bars-flame\"></i></span>\n                                {votes[post.pid] > 0 ? votes[post.pid] : 0}\n                                <span><i className=\"fas fa-comment\" id=\"my-bars-comment\"></i></span>\n                                {getCommentCount(post.pid, comments)}\n                            </div>\n                            <p>{\"\\\"\" + post.content.lineOne + \"...\\\"\"}</p>\n                        </div>\n                    )\n                })}\n            </div>\n            {showPost ? <ViewedPost toggleViewedPost={toggleModal} pid={viewedPost} toggleModal={toggleModal} /> : null}\n        </div>\n    )\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        myUID: state.uid\n    }\n}\n\nexport default connect(mapStateToProps, null)(MyBars)\n\n"]},"metadata":{},"sourceType":"module"}