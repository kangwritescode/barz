{"ast":null,"code":"var _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/containers/Scribble/Toolkit/DictModal/DictModal.js\";\nimport React, { Component } from 'react';\nimport './DictModal.css';\nimport { GenID } from '../../../../shared/utility';\n\nclass DictModal extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.checkResponsetype = arr => {\n      try {\n        if (arr === 'Word is required.' || arr.every(datum => typeof datum === 'string')) {\n          return 'suggestions';\n        } else {\n          return 'definitions';\n        }\n      } catch {\n        return 'suggestions';\n      }\n    };\n  }\n\n  render() {\n    let content = null;\n    let response = this.props.dictJSON;\n\n    if (response) {\n      let responseType = this.checkResponsetype(response);\n\n      if (responseType === 'suggestions') {\n        content = React.createElement(\"div\", {\n          id: \"dict-sugg-modal-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"fa fa-close\",\n          id: \"close-dict-sugg-modal\",\n          onClick: () => this.props.toggleModal('showdictJSON', false),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          id: \"suggestions-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          id: \"sorry\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, \"Sorry fam, nothing for '\", React.createElement(\"span\", {\n          id: \"wrong-word\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, this.props.theWord), \"'.\"), React.createElement(\"div\", {\n          id: \"dict-sugg-\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        })));\n      } else {\n        // filter\n        response = response.filter(entry => entry.meta.id.toLowerCase() === this.props.theWord.toLowerCase() || entry.hom && entry.meta.id === this.props.theWord + ':' + entry.hom || entry.fl === 'trademark');\n        content = React.createElement(\"div\", {\n          id: \"dict-modal-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"close-dict-modal-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"fa fa-close\",\n          id: \"close-dict-modal\",\n          onClick: () => this.props.toggleModal('showdictJSON', false),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"toolkit-modal\",\n          id: \"dict-modal-body-content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          id: \"word-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, this.props.theWord), React.createElement(\"div\", {\n          id: \"dict-line-divider\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          id: \"definitions-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, response.map(type => {\n          return React.createElement(\"div\", {\n            key: GenID(),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            id: \"word-type\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }, type.fl), React.createElement(\"ol\", {\n            id: \"definitions-list\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }, type.shortdef.map(definition => {\n            return React.createElement(\"li\", {\n              id: \"short-def\",\n              key: GenID(),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 59\n              },\n              __self: this\n            }, definition);\n          })));\n        }))));\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"dict-modal-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"dict-modal-backdrop\",\n      onClick: () => this.props.toggleModal('showdictJSON', false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), content);\n  }\n\n}\n\nexport default DictModal;","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/containers/Scribble/Toolkit/DictModal/DictModal.js"],"names":["React","Component","GenID","DictModal","checkResponsetype","arr","every","datum","render","content","response","props","dictJSON","responseType","toggleModal","theWord","filter","entry","meta","id","toLowerCase","hom","fl","map","type","shortdef","definition"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './DictModal.css'\nimport {GenID} from '../../../../shared/utility'\n\nclass DictModal extends Component {\n\n\n    checkResponsetype = (arr) => {\n        try {\n            if (arr === 'Word is required.' || arr.every(datum => typeof datum === 'string')) {\n                return 'suggestions'\n            } else {\n                return 'definitions'\n            }\n        }\n        catch {\n            return 'suggestions'\n        }\n\n    }\n\n    render() {\n\n\n\n        let content = null\n        let response = this.props.dictJSON\n        if (response) {\n            let responseType = this.checkResponsetype(response)\n            if (responseType === 'suggestions') {\n                content = (\n                    <div id=\"dict-sugg-modal-body\">\n                        <i className=\"fa fa-close\" id=\"close-dict-sugg-modal\" onClick={() => this.props.toggleModal('showdictJSON', false)}></i>\n\n                        <div id=\"suggestions-wrapper\">\n                            <div id=\"sorry\">Sorry fam, nothing for '<span id='wrong-word'>{this.props.theWord}</span>'.</div>\n                            <div id='dict-sugg-'></div>\n                        </div>\n                    </div>\n                )\n            }\n            else {\n                // filter\n                response = response.filter(entry => (entry.meta.id.toLowerCase() === this.props.theWord.toLowerCase()) || (entry.hom && entry.meta.id === this.props.theWord + ':' + entry.hom) || (entry.fl === 'trademark'))\n                content = (\n                    <div id=\"dict-modal-body\">\n                        <div className=\"close-dict-modal-wrapper\"><i className=\"fa fa-close\" id=\"close-dict-modal\" onClick={() => this.props.toggleModal('showdictJSON', false)}></i></div>\n                        <div  className='toolkit-modal' id='dict-modal-body-content'>\n                            <div id=\"word-title\">{this.props.theWord}</div>\n                            <div id=\"dict-line-divider\"></div>\n                            <div id=\"definitions-container\">\n                                {response.map(type => {\n                                    return (\n                                        <div key={GenID()}>\n                                            <div id=\"word-type\">{type.fl}</div>\n                                            <ol id=\"definitions-list\">\n                                                {type.shortdef.map(definition => {\n                                                    return (\n                                                        <li id=\"short-def\" key={GenID()}>{definition}</li>\n                                                    )\n                                                })}\n                                            </ol>\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                        </div>\n\n\n                    </div>\n\n                )\n            }\n        }\n\n\n        return (\n            <div className='dict-modal-container'>\n                <div id=\"dict-modal-backdrop\" onClick={() => this.props.toggleModal('showdictJSON', false)}></div>\n                {content}\n            </div>\n        )\n    }\n}\nexport default DictModal"]},"metadata":{},"sourceType":"module"}