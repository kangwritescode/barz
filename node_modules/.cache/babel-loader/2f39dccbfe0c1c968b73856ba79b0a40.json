{"ast":null,"code":"import _defineProperty from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/components/Scribble/MyBars/ViewedBar/PostLikes/PostLikes.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nimport './PostLikes.css';\n\nclass PostLikes extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      points: 0,\n      likes: 0,\n      myVote: 0,\n      votesListener: null\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (prevProps.viewedPost !== this.props.viewedPost) {\n        if (this.state.votesListener) {\n          this.state.votesListener();\n        }\n\n        this.fetchInfo();\n      }\n    };\n\n    this.componentWillUnmount = () => {\n      if (this.state.votesListener) {\n        this.state.votesListener();\n      }\n    };\n\n    this.fetchInfo = () => {\n      const db = firebase.firestore();\n      var votesListener = db.collection('postVotes').where('pid', '==', this.props.viewedPost.pid).onSnapshot(snapshot => {\n        var points = 0;\n        const likes = new Set(); // for every vote of this post\n\n        snapshot.docs.forEach(like => {\n          var vote = like.data();\n\n          if (vote.value === 1 || vote.value === -1) {\n            points += Math.max(vote.value, 0);\n            voters.add(vote.voterID);\n          }\n        });\n        points = points <= 0 ? 0 : points;\n        var noOfVoters = voters.size;\n        this.setState(_objectSpread({}, this.state, {\n          points: points,\n          noOfVoters: noOfVoters\n        }));\n      });\n      this.setState(_objectSpread({}, this.state, {\n        votesListener: votesListener\n      }));\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"likes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"total-score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, this.state.points, \" total pt\", this.state.points === 1 ? null : 's', \".\"), React.createElement(\"div\", {\n      className: \"fans\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, this.state.noOfVoters, \" \", this.state.noOfVoters === 1 ? 'like' : 'likes'));\n  }\n\n}\n\nPostLikes.defaultProps = {\n  pid: ''\n};\n\nconst mapStatetoProps = state => {\n  return {\n    uid: state.uid\n  };\n};\n\nexport default connect(mapStatetoProps, null)(PostLikes);","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/components/Scribble/MyBars/ViewedBar/PostLikes/PostLikes.js"],"names":["React","Component","connect","firebase","PostLikes","state","points","likes","myVote","votesListener","componentDidUpdate","prevProps","prevState","viewedPost","props","fetchInfo","componentWillUnmount","db","firestore","collection","where","pid","onSnapshot","snapshot","Set","docs","forEach","like","vote","data","value","Math","max","voters","add","voterID","noOfVoters","size","setState","render","defaultProps","mapStatetoProps","uid"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport firebase from 'firebase'\nimport 'firebase/firestore'\n\n\nimport './PostLikes.css'\n\nclass PostLikes extends Component {\n    static defaultProps = {\n        pid: ''\n    }\n    state = {\n        points: 0,\n        likes: 0,\n        myVote: 0,\n        votesListener: null\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevProps.viewedPost !== this.props.viewedPost) {\n            if (this.state.votesListener) {\n                this.state.votesListener()\n            }\n            this.fetchInfo()\n        }\n    }\n    componentWillUnmount = () => {\n        if (this.state.votesListener) {\n            this.state.votesListener()\n        }\n    }\n    fetchInfo = () => {\n        const db = firebase.firestore()\n        var votesListener = db.collection('postVotes').where('pid', '==', this.props.viewedPost.pid).onSnapshot(snapshot => {\n            var points = 0\n            const likes = new Set()\n            // for every vote of this post\n            snapshot.docs.forEach(like => {\n                var vote = like.data()\n                if (vote.value === 1 || vote.value === -1) {\n                    points += Math.max(vote.value, 0)\n                    voters.add(vote.voterID)\n                }\n\n            })\n            points = points <= 0 ? 0 : points\n            var noOfVoters = voters.size\n            this.setState({\n                ...this.state,\n                points: points,\n                noOfVoters: noOfVoters\n            })\n        })\n        this.setState({\n            ...this.state,\n            votesListener: votesListener\n        })\n    }\n\n    render() {\n        return (\n            <div className='likes'>\n                <div className='total-score'>\n                    {this.state.points} total pt{this.state.points === 1 ? null : 's'}.\n                </div>\n                <div className='fans'>\n                    {this.state.noOfVoters} {this.state.noOfVoters === 1 ? 'like' : 'likes'}\n                </div>\n\n            </div>\n        )\n    }\n}\n\nconst mapStatetoProps = state => {\n    return {\n        uid: state.uid\n    }\n}\n\nexport default connect(mapStatetoProps, null)(PostLikes)\n"]},"metadata":{},"sourceType":"module"}