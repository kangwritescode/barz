{"ast":null,"code":"import _defineProperty from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/containers/Wordsmiths/Wordsmiths.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport joey from '../../assets/joey.m4v';\nimport './Wordsmiths.css';\nimport WordNavBar from './WordNavBar/WordNavBar';\nimport Rappers from './Rappers/Rappers';\nimport shuffle from 'shuffle-array';\nimport firebase from '../../Firebase';\nimport 'firebase/firestore';\nimport timeDict from './WordSmithsTools/timeDict';\nimport joeyIMG from '../../assets/joeyIMG.png';\n\nclass Wordsmiths extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rank: \"Best\",\n      time: \"All Time\",\n      state: \"All States\",\n      coast: \"All Coasts\",\n      gender: \"All Genders\",\n      rappers: {},\n      submissions: [],\n      fetching: true,\n      follows: []\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        this.toggleFetching(true);\n        var rappers = {};\n        var submissions = await this.fetchSubmissions();\n        var votes = await this.fetchVotes();\n        var users = await this.fetchUsers(); // this.fetchFollows()\n        // for every single submission\n\n        submissions.forEach(submission => {\n          // find the votes for that submission\n          var filteredVotes = votes.filter(vote => vote.pid === submission.pid);\n\n          if (!rappers[submission.uid]) {\n            rappers[submission.uid] = {\n              uid: submission.uid,\n              gender: submission.gender,\n              username: submission.username,\n              address: submission.address,\n              votes: filteredVotes,\n              photoRef: users[submission.uid].photoRef,\n              blurb: users[submission.uid].blurb,\n              handles: users[submission.uid].handles\n            };\n          } else {\n            rappers[submission.uid].votes[submission.createdOn] = filteredVotes;\n          }\n        });\n        this.setState(_objectSpread({}, this.state, {\n          rappers: rappers,\n          submissions: submissions,\n          fetching: false,\n          votes: votes\n        }));\n      } catch (err) {\n        this.toggleFetching(false);\n        console.log(err);\n      }\n    };\n\n    this.fetchSubmissions = async () => {\n      var db = firebase.firestore();\n      return db.collection(\"submissions\").get().then(querySnapshot => {\n        var submissions = [];\n        querySnapshot.forEach(doc => {\n          submissions.push(_objectSpread({}, doc.data(), {\n            pid: doc.id\n          }));\n        });\n        return submissions;\n      }).catch(err => {\n        throw err;\n      });\n    };\n\n    this.fetchVotes = async () => {\n      var db = firebase.firestore();\n      return db.collection(\"postVotes\").get().then(querySnapshot => {\n        var votes = [];\n        querySnapshot.forEach(doc => {\n          votes.push(doc.data());\n        });\n        return votes;\n      }).catch(err => {\n        throw err;\n      });\n    };\n\n    this.fetchUsers = async () => {\n      var db = firebase.firestore();\n      return db.collection(\"users\").get().then(querySnapshot => {\n        var users = {};\n        querySnapshot.forEach(doc => {\n          users[doc.id] = _objectSpread({}, doc.data(), {\n            uid: doc.id\n          });\n        });\n        return users;\n      }).catch(err => {\n        throw err;\n      });\n    };\n\n    this.toggleFetching = bool => {\n      this.setState(_objectSpread({}, this.state, {\n        fetching: bool\n      }));\n    };\n  }\n\n  sortAndFilter(type, parameter) {\n    // set appropriate UI\n    if (type === 'state' && parameter !== 'All States') {\n      this.setState(_objectSpread({}, this.state, {\n        coast: 'All Coasts',\n        [type]: parameter\n      }));\n    } else if (type === 'coast' && parameter !== 'All Coasts') {\n      this.setState(_objectSpread({}, this.state, {\n        state: 'All States',\n        [type]: parameter\n      }));\n    } else {\n      this.setState(_objectSpread({}, this.state, {\n        [type]: parameter\n      }));\n    }\n  }\n\n  render() {\n    var rappers = _objectSpread({}, this.state.rappers);\n\n    console.log(rappers);\n    var allVotes = this.state.votes ? Object.values(this.state.votes) : []; // states, coast, and gender filter\n\n    if (this.state.state !== \"All States\") {\n      rappers = Object.fromEntries(Object.entries(rappers).filter(([k, rapper]) => rapper.address.state === this.state.state));\n    }\n\n    if (this.state.coast !== \"All Coasts\") {\n      rappers = Object.fromEntries(Object.entries(rappers).filter(([k, rapper]) => rapper.address.region === this.state.coast));\n    }\n\n    if (this.state.gender !== \"All Genders\") {\n      rappers = Object.fromEntries(Object.entries(rappers).filter(([k, rapper]) => rapper.gender === this.state.gender));\n    } // tally user points\n\n\n    for (let uid in rappers) {\n      var rapper = rappers[uid];\n      var tally = 0;\n      allVotes.forEach(vote => {\n        var now = new Date();\n        var passedMilliseconds = now - vote.postDate.toDate().getTime();\n        var passedDays = passedMilliseconds / 1000 / 60 / 60 / 24; // tally if within given time \n\n        if (!(passedDays > timeDict[this.state.time]) && uid === vote.receiverID) {\n          tally += vote.value;\n        }\n      }); // if amount of votes is negative make zero\n\n      rapper['tally'] = tally < 0 ? 0 : tally; // submissionCount\n\n      var filteredSubmissions = this.state.submissions.filter(submission => {\n        var now = new Date();\n        var passedMilliseconds = now - submission.createdOn.toDate().getTime();\n        var passedDays = passedMilliseconds / 1000 / 60 / 60 / 24;\n        return !(passedDays > timeDict[this.state.time]) && submission.uid === uid;\n      });\n      var noOfSubmissions = filteredSubmissions.length;\n      rapper['submissionCount'] = noOfSubmissions;\n    }\n\n    rappers = rappers ? Object.values(rappers) : []; // Sort:\n\n    rappers = this.state.rank === \"Random\" ? // random sort\n    shuffle(rappers) : // best sort\n    rappers.sort((rapper_A, rapper_B) => {\n      return rapper_A.tally < rapper_B.tally ? 1 : -1;\n    }); // tally city and coast votes\n\n    var cityVotes = {};\n    var coastVotes = {};\n    rappers.forEach(rapper => {\n      const cityState = \"\".concat(rapper.address.city, \", \").concat(rapper.address.state);\n\n      if (rapper.tally > 0) {\n        cityVotes[cityState] = cityState in cityVotes ? cityVotes[cityState] + rapper.tally : rapper.tally;\n        coastVotes[rapper.address.region] = rapper.address.region in coastVotes ? coastVotes[rapper.address.region] + rapper.tally : rapper.tally;\n      }\n    }); //  Best City and Best Coast reducers\n\n    let bestCity = Object.keys(cityVotes).length ? Object.keys(cityVotes).reduce((a, b) => cityVotes[a] > cityVotes[b] ? a : b) : 'N/A';\n    let bestCoast = Object.keys(coastVotes).length ? Object.keys(coastVotes).reduce((a, b) => coastVotes[a] > coastVotes[b] ? a : b) : 'N/A';\n    return React.createElement(\"div\", {\n      className: \"WordsmithsContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      id: \"backup-img\",\n      src: joeyIMG,\n      alt: \"alt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(\"video\", {\n      id: \"badass\",\n      src: joey,\n      autoPlay: true,\n      loop: true,\n      playsInline: true,\n      muted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"WordSmithsOverlay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), React.createElement(WordNavBar, {\n      rank: this.state.rank,\n      time: this.state.time,\n      state: this.state.state,\n      coast: this.state.coast,\n      gender: this.state.gender,\n      sortAndFilter: this.sortAndFilter.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), React.createElement(Rappers, {\n      rappers: rappers,\n      rank: this.state.rank,\n      time: this.state.time,\n      state: this.state.state,\n      coast: this.state.coast,\n      gender: this.state.gender,\n      bestCity: bestCity,\n      bestCoast: bestCoast,\n      sort: this.state.rank,\n      fetching: this.state.fetching,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Wordsmiths;","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/containers/Wordsmiths/Wordsmiths.js"],"names":["React","Component","joey","WordNavBar","Rappers","shuffle","firebase","timeDict","joeyIMG","Wordsmiths","state","rank","time","coast","gender","rappers","submissions","fetching","follows","componentDidMount","toggleFetching","fetchSubmissions","votes","fetchVotes","users","fetchUsers","forEach","submission","filteredVotes","filter","vote","pid","uid","username","address","photoRef","blurb","handles","createdOn","setState","err","console","log","db","firestore","collection","get","then","querySnapshot","doc","push","data","id","catch","bool","sortAndFilter","type","parameter","render","allVotes","Object","values","fromEntries","entries","k","rapper","region","tally","now","Date","passedMilliseconds","postDate","toDate","getTime","passedDays","receiverID","value","filteredSubmissions","noOfSubmissions","length","sort","rapper_A","rapper_B","cityVotes","coastVotes","cityState","city","bestCity","keys","reduce","a","b","bestCoast","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport joey from '../../assets/joey.m4v'\nimport './Wordsmiths.css'\nimport WordNavBar from './WordNavBar/WordNavBar'\nimport Rappers from './Rappers/Rappers'\nimport shuffle from 'shuffle-array'\nimport firebase from '../../Firebase'\nimport 'firebase/firestore'\nimport timeDict from './WordSmithsTools/timeDict'\nimport joeyIMG from '../../assets/joeyIMG.png'\n\n\n\nclass Wordsmiths extends Component {\n\n\n    state = {\n        rank: \"Best\",\n        time: \"All Time\",\n        state: \"All States\",\n        coast: \"All Coasts\",\n        gender: \"All Genders\",\n\n        rappers: {},\n        submissions: [],\n        fetching: true,\n        follows: []\n\n    }\n    componentDidMount = async () => {\n\n        try {\n\n            this.toggleFetching(true)\n            var rappers = {}\n            var submissions = await this.fetchSubmissions()\n            var votes = await this.fetchVotes()\n            var users = await this.fetchUsers()\n            // this.fetchFollows()\n\n            // for every single submission\n            submissions.forEach(submission => {\n\n                // find the votes for that submission\n                var filteredVotes = votes.filter(vote => vote.pid === submission.pid)\n                if (!rappers[submission.uid]) {\n                    rappers[submission.uid] = {\n                        uid: submission.uid,\n                        gender: submission.gender,\n                        username: submission.username,\n                        address: submission.address,\n                        votes: filteredVotes,\n                        photoRef: users[submission.uid].photoRef,\n                        blurb: users[submission.uid].blurb,\n                        handles: users[submission.uid].handles\n                    }\n                } else {\n                    rappers[submission.uid].votes[submission.createdOn] = filteredVotes\n                }\n            })\n\n            this.setState({\n                ...this.state,\n                rappers: rappers,\n                submissions: submissions,\n                fetching: false,\n                votes: votes\n            })\n        }\n        catch (err) {\n            this.toggleFetching(false)\n            console.log(err)\n        }\n\n    }\n\n    // fetch ALL submissions\n    fetchSubmissions = async () => {\n        var db = firebase.firestore()\n        return db.collection(\"submissions\").get()\n            .then((querySnapshot) => {\n                var submissions = []\n                querySnapshot.forEach((doc) => {\n                    submissions.push({\n                        ...doc.data(),\n                        pid: doc.id\n                    })\n                });\n                return submissions\n            })\n            .catch(err => { throw err })\n    }\n    // fetch ALl votes\n    fetchVotes = async () => {\n        var db = firebase.firestore()\n        return db.collection(\"postVotes\").get()\n            .then((querySnapshot) => {\n                var votes = []\n                querySnapshot.forEach((doc) => {\n                    votes.push(doc.data())\n                });\n                return votes\n\n            })\n            .catch(err => { throw err })\n    }\n\n    // fetch ALl votes\n    fetchUsers = async () => {\n        var db = firebase.firestore()\n        return db.collection(\"users\").get()\n            .then((querySnapshot) => {\n                var users = {}\n                querySnapshot.forEach((doc) => {\n                    users[doc.id] = {...doc.data(), uid: doc.id}\n                });\n                return users\n\n            })\n            .catch(err => { throw err })\n    }\n\n    sortAndFilter(type, parameter) {\n        // set appropriate UI\n        if (type === 'state' && parameter !== 'All States') {\n            this.setState({\n                ...this.state,\n                coast: 'All Coasts',\n                [type]: parameter\n            })\n        } else if (type === 'coast' && parameter !== 'All Coasts') {\n            this.setState({\n                ...this.state,\n                state: 'All States',\n                [type]: parameter\n            })\n        }\n        else {\n            this.setState({\n                ...this.state,\n                [type]: parameter\n            })\n        }\n\n    }\n\n    toggleFetching = (bool) => {\n        this.setState({\n            ...this.state,\n            fetching: bool\n        })\n    }\n\n\n\n    render() {\n\n        var rappers = { ...this.state.rappers }\n        console.log(rappers)\n        var allVotes = this.state.votes ? Object.values(this.state.votes) : []\n\n        // states, coast, and gender filter\n        if (this.state.state !== \"All States\") { rappers = Object.fromEntries(Object.entries(rappers).filter(([k, rapper]) => rapper.address.state === this.state.state)) }\n        if (this.state.coast !== \"All Coasts\") { rappers = Object.fromEntries(Object.entries(rappers).filter(([k, rapper]) => rapper.address.region === this.state.coast)) }\n        if (this.state.gender !== \"All Genders\") { rappers = Object.fromEntries(Object.entries(rappers).filter(([k, rapper]) => rapper.gender === this.state.gender)) }\n\n        // tally user points\n        for (let uid in rappers) {\n            var rapper = rappers[uid]\n            var tally = 0\n            allVotes.forEach((vote) => {\n                var now = new Date()\n                var passedMilliseconds = now - vote.postDate.toDate().getTime()\n                var passedDays = (passedMilliseconds / 1000 / 60 / 60 / 24)\n                // tally if within given time \n                if (!(passedDays > timeDict[this.state.time]) && uid === vote.receiverID) {\n                    tally += vote.value\n                }\n            })\n            // if amount of votes is negative make zero\n            rapper['tally'] = tally < 0 ? 0 : tally\n\n            // submissionCount\n            var filteredSubmissions = this.state.submissions.filter(submission => {\n                var now = new Date()\n                var passedMilliseconds = now - submission.createdOn.toDate().getTime()\n                var passedDays = (passedMilliseconds / 1000 / 60 / 60 / 24)\n                return !(passedDays > timeDict[this.state.time]) && submission.uid === uid\n            })\n            var noOfSubmissions = filteredSubmissions.length\n            rapper['submissionCount'] = noOfSubmissions\n\n\n        }\n        rappers = rappers ? Object.values(rappers) : []\n\n        // Sort:\n        rappers = (this.state.rank === \"Random\") ?\n            // random sort\n            shuffle(rappers) :\n            // best sort\n            rappers.sort((rapper_A, rapper_B) => {\n                return (rapper_A.tally < rapper_B.tally) ? 1 : -1\n            })\n\n        // tally city and coast votes\n        var cityVotes = {}\n        var coastVotes = {}\n        rappers.forEach(rapper => {\n            const cityState = `${rapper.address.city}, ${rapper.address.state}`\n            if (rapper.tally > 0) {\n                cityVotes[cityState] = (cityState in cityVotes) ? \n                    cityVotes[cityState] + rapper.tally \n                    : rapper.tally\n                coastVotes[rapper.address.region] = (rapper.address.region in coastVotes) ?\n                    coastVotes[rapper.address.region] + rapper.tally \n                    : rapper.tally\n            }\n        })\n\n        //  Best City and Best Coast reducers\n        let bestCity = Object.keys(cityVotes).length ? Object.keys(cityVotes).reduce((a, b) => cityVotes[a] > cityVotes[b] ? a : b) : 'N/A'\n        let bestCoast = Object.keys(coastVotes).length ? Object.keys(coastVotes).reduce((a, b) => coastVotes[a] > coastVotes[b] ? a : b) : 'N/A'\n\n\n        return (\n            <div className=\"WordsmithsContainer\">\n                <img id=\"backup-img\" src={joeyIMG} alt=\"alt\" />\n\n                <video id=\"badass\" src={joey} autoPlay={true} loop={true} playsInline={true} muted />\n                <div id=\"WordSmithsOverlay\" />\n                <WordNavBar\n                    rank={this.state.rank}\n                    time={this.state.time}\n                    state={this.state.state}\n                    coast={this.state.coast}\n                    gender={this.state.gender}\n                    sortAndFilter={this.sortAndFilter.bind(this)} />\n                <Rappers\n                    rappers={rappers}\n                    rank={this.state.rank}\n                    time={this.state.time}\n                    state={this.state.state}\n                    coast={this.state.coast}\n                    gender={this.state.gender}\n                    bestCity={bestCity}\n                    bestCoast={bestCoast}\n                    sort={this.state.rank}\n                    fetching={this.state.fetching} />\n            </div>\n        )\n    }\n}\n\nexport default Wordsmiths\n"]},"metadata":{},"sourceType":"module"}