{"ast":null,"code":"import _defineProperty from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/components/Scribble/MyBars/MyBars.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport firebase from '../../../Firebase';\nimport { connect } from 'react-redux';\nimport 'firebase/firestore';\nimport './MyBars.css';\nimport ViewedPost from './ViewedBar/ViewedPost';\nimport GenID from '../../../shared/GenID';\n\nclass MyBars extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: [],\n      showPost: false,\n      viewedPost: null\n    };\n\n    this.componentDidUpdate = async (prevProps, prevState) => {\n      if (prevProps.focused === 'Post' && this.props.focused === 'MyBars') {\n        await this.fetchVotes(this.props.uid);\n        this.fetchPosts(this.props.uid);\n      } else if (prevState.showPost === true && this.state.showPost === false) {\n        await this.fetchVotes(this.props.uid);\n        this.fetchPosts(this.props.uid);\n      }\n    };\n\n    this.fetchPosts = async uid => {\n      var db = firebase.firestore();\n      await db.collection('submissions').where(\"uid\", \"==\", uid).orderBy('createdOn', 'desc').get().then(querySnapshot => {\n        var posts = [];\n        querySnapshot.forEach(doc => {\n          var post = _objectSpread({}, doc.data(), {\n            pid: doc.id\n          });\n\n          posts.push(post);\n        });\n        this.setState(_objectSpread({}, this.state, {\n          posts: posts\n        }));\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.fetchVotes = async uid => {\n      var db = firebase.firestore();\n      await db.collection('postVotes').where('receiverID', '==', uid).get().then(querySnapshot => {\n        var votes = {};\n        querySnapshot.forEach(doc => {\n          var vote = doc.data();\n          votes[vote.pid] = votes[vote.pid] ? Math.max(votes[vote.pid] + vote.value < 0) : Math.max(vote.value, 0);\n        });\n        console.log(votes);\n        this.setState(_objectSpread({}, this.state, {\n          votes: votes\n        }));\n      });\n    };\n\n    this.getOrdinal = i => {\n      var j = i % 10;\n      var k = i % 100;\n\n      if (j == 1 && k != 11) {\n        return \"st\";\n      }\n\n      if (j == 2 && k != 12) {\n        return \"nd\";\n      }\n\n      if (j == 3 && k != 13) {\n        return \"rd\";\n      } else {\n        return \"th\";\n      }\n    };\n\n    this.insertDateHeaders = inputArr => {\n      // create a copy\n      var arr = [...inputArr];\n      var currYear = 0;\n      var currMonth = 0;\n      var i = 0;\n\n      while (i < arr.length) {\n        var postYear = arr[i].createdOn.toDate().getUTCFullYear();\n        var postMonth = arr[i].createdOn.toDate().getUTCMonth() + 1; // if a new year is introduced, update\n\n        if (postYear !== currYear) {\n          currYear = postYear;\n        } // if a new month is introduced, or the same month but different year\n\n\n        if (postMonth !== currMonth || postMonth == currMonth && currYear != postYear) {\n          arr.splice(i, 0, [postMonth, currYear]);\n          currMonth = postMonth;\n          i += 1;\n        } else {\n          i += 1;\n        }\n      } // return copy with inserted variables\n\n\n      return arr;\n    };\n\n    this.toggleModal = (modal, value) => {\n      this.setState(_objectSpread({}, this.state, {\n        [modal]: value\n      }));\n    };\n\n    this.viewPost = async pid => {\n      this.setState(_objectSpread({}, this.state, {\n        showPost: true,\n        viewedPost: pid\n      }));\n    };\n  }\n\n  render() {\n    // UI\n    let focused = this.props.focused === \"MyBars\";\n    let myBarsId = focused ? 'mybars-expanded' : 'mybars-compressed';\n    let widgetHeader = focused ? 'my-bars-header-compressed' : 'my-bars-header-expanded';\n    let postsContainerId = focused ? 'posts-container-opaque' : 'posts-container-transparent'; // insert the date headers into the array\n\n    var posts = [...this.state.posts];\n\n    if (this.state.posts) {\n      posts = this.insertDateHeaders(this.state.posts);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"my-bars\",\n      id: myBarsId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"my-bars-widget-header\",\n      id: widgetHeader,\n      onClick: !focused ? this.props.toggle : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Manage\"), React.createElement(\"div\", {\n      className: \"posts-container\",\n      id: postsContainerId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, posts.map(post => {\n      if (typeof post === 'array' || post instanceof Array) {\n        return React.createElement(\"div\", {\n          id: \"month-header\",\n          key: GenID(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, MyBars.monthString[post[0]], \" \", post[1]);\n      }\n\n      return React.createElement(\"div\", {\n        className: \"a-post\",\n        onClick: () => this.viewPost(post.pid),\n        key: GenID(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"likes-overlay\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-fire\",\n        id: \"my-bars-flame\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      })), this.state.votes[post.pid] > 0 ? this.state.votes[post.pid] : 0), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, post.content.lineOne + \"...\"));\n    })), this.state.showPost ? React.createElement(ViewedPost, {\n      toggleViewedPost: this.toggleModal,\n      pid: this.state.viewedPost,\n      toggleModal: this.toggleModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nMyBars.monthString = {\n  '1': 'January',\n  '2': 'February',\n  '3': 'March',\n  '4': 'April',\n  '5': 'May',\n  '6': 'June',\n  '7': 'July',\n  '8': 'August',\n  '9': 'September',\n  '10': 'October',\n  '11': 'November',\n  '12': 'December'\n};\n\nconst mapStateToProps = state => {\n  return {\n    uid: state.uid\n  };\n};\n\nexport default connect(mapStateToProps, null)(MyBars);","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/components/Scribble/MyBars/MyBars.js"],"names":["React","Component","firebase","connect","ViewedPost","GenID","MyBars","state","posts","showPost","viewedPost","componentDidUpdate","prevProps","prevState","focused","props","fetchVotes","uid","fetchPosts","db","firestore","collection","where","orderBy","get","then","querySnapshot","forEach","doc","post","data","pid","id","push","setState","catch","err","console","log","votes","vote","Math","max","value","getOrdinal","i","j","k","insertDateHeaders","inputArr","arr","currYear","currMonth","length","postYear","createdOn","toDate","getUTCFullYear","postMonth","getUTCMonth","splice","toggleModal","modal","viewPost","render","myBarsId","widgetHeader","postsContainerId","toggle","map","Array","monthString","content","lineOne","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport firebase from '../../../Firebase'\nimport { connect } from 'react-redux'\nimport 'firebase/firestore'\nimport './MyBars.css'\nimport ViewedPost from './ViewedBar/ViewedPost'\nimport GenID from '../../../shared/GenID'\n\n\nclass MyBars extends Component {\n\n    static monthString = {\n        '1': 'January',\n        '2': 'February',\n        '3': 'March',\n        '4': 'April',\n        '5': 'May',\n        '6': 'June',\n        '7': 'July',\n        '8': 'August',\n        '9': 'September',\n        '10': 'October',\n        '11': 'November',\n        '12': 'December'\n    }\n\n    state = {\n        posts: [],\n        showPost: false,\n        viewedPost: null\n    }\n\n    componentDidUpdate = async (prevProps, prevState) => {\n        if (prevProps.focused === 'Post' && this.props.focused === 'MyBars') {\n            await this.fetchVotes(this.props.uid)\n            this.fetchPosts(this.props.uid)\n        } else if (prevState.showPost === true && this.state.showPost === false) {\n            await this.fetchVotes(this.props.uid)\n            this.fetchPosts(this.props.uid)\n        }\n    }\n\n\n    fetchPosts = async (uid) => {\n        var db = firebase.firestore()\n        await db.collection('submissions').where(\"uid\", \"==\", uid).orderBy('createdOn', 'desc').get()\n            .then(querySnapshot => {\n                var posts = []\n                querySnapshot.forEach(doc => {\n                    var post = {\n                        ...doc.data(),\n                        pid: doc.id\n                    }\n                    posts.push(post)\n                })\n                this.setState({\n                    ...this.state,\n                    posts: posts\n                })\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n    fetchVotes = async (uid) => {\n        var db = firebase.firestore()\n        await db.collection('postVotes').where('receiverID', '==', uid).get()\n            .then(querySnapshot => {\n                var votes = {}\n                querySnapshot.forEach(doc => {\n                    var vote = doc.data()\n                    votes[vote.pid] = votes[vote.pid] ? Math.max(votes[vote.pid] + vote.value< 0) : Math.max(vote.value, 0)\n                })\n                console.log(votes)\n                this.setState({\n                    ...this.state,\n                    votes: votes\n                })\n                 \n            })\n    }\n\n    getOrdinal = (i) => {\n        var j = i % 10\n        var k = i % 100\n        if (j == 1 && k != 11) { return \"st\" }\n        if (j == 2 && k != 12) { return \"nd\" }\n        if (j == 3 && k != 13) { return \"rd\" }\n        else { return \"th\" }\n    }\n\n    insertDateHeaders = (inputArr) => {\n        // create a copy\n        var arr = [...inputArr]\n        var currYear = 0\n        var currMonth = 0\n        var i = 0\n        while (i < arr.length) {\n            var postYear = arr[i].createdOn.toDate().getUTCFullYear()\n            var postMonth = arr[i].createdOn.toDate().getUTCMonth() + 1\n\n            // if a new year is introduced, update\n            if (postYear !== currYear) {\n                currYear = postYear\n            }\n            // if a new month is introduced, or the same month but different year\n            if (postMonth !== currMonth || postMonth == currMonth && currYear != postYear) {\n                arr.splice(i, 0, [postMonth, currYear])\n                currMonth = postMonth\n                i += 1\n            } else {\n                i += 1\n            }\n        }\n        // return copy with inserted variables\n        return arr\n    }\n\n    toggleModal = (modal, value) => {\n        this.setState({\n            ...this.state,\n            [modal]: value\n        })\n    }\n\n    viewPost = async (pid) => {\n        this.setState({\n            ...this.state,\n            showPost: true,\n            viewedPost: pid\n        })\n    }\n\n\n    render() {\n\n        // UI\n        let focused = this.props.focused === \"MyBars\"\n        let myBarsId = focused ? 'mybars-expanded' : 'mybars-compressed'\n        let widgetHeader = focused ? 'my-bars-header-compressed' : 'my-bars-header-expanded'\n        let postsContainerId = focused ? 'posts-container-opaque' : 'posts-container-transparent'\n        \n        // insert the date headers into the array\n        var posts = [...this.state.posts]\n        if (this.state.posts) {\n            posts = this.insertDateHeaders(this.state.posts)\n        }\n\n        return (\n            <div className=\"my-bars\" id={myBarsId}>\n                <div className={`my-bars-widget-header`} id={widgetHeader} onClick={!focused ? this.props.toggle : null}>Manage</div>\n                <div className=\"posts-container\" id={postsContainerId}>\n                    {posts.map((post) => {\n                        if ((typeof post === 'array' || post instanceof Array)) {\n                            return <div id='month-header' key={GenID()}>{MyBars.monthString[post[0]]} {post[1]}</div>\n                        }\n                        return (\n                            <div className=\"a-post\" onClick={() => this.viewPost(post.pid)} key={GenID()}>\n                                <div id='likes-overlay'>\n                                    <span><i className=\"fas fa-fire\" id=\"my-bars-flame\"></i></span>\n                                    {this.state.votes[post.pid] > 0 ? this.state.votes[post.pid] : 0}\n                                </div>\n                                <p>{post.content.lineOne + \"...\"}</p>\n                            </div>\n                        )\n                    })}\n                </div>\n                {this.state.showPost ? <ViewedPost toggleViewedPost={this.toggleModal} pid={this.state.viewedPost} toggleModal={this.toggleModal}/> : null }                \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        uid: state.uid\n    }\n}\n\nexport default connect(mapStateToProps, null)(MyBars)\n\n"]},"metadata":{},"sourceType":"module"}