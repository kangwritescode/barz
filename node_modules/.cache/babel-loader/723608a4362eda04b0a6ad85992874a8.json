{"ast":null,"code":"import _defineProperty from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/containers/Hub/InfoGetter/InfoGetter.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport './InfoGetter.css';\nimport { connect } from 'react-redux';\nimport { postUserData } from '../../../store/actionCreators';\nimport { regions } from '../../../shared/regions';\nimport axios from '../../../axios-orders';\nimport axiosCommon from 'axios';\nimport { parse } from 'url';\nimport firebase from '../../../Firebase';\nimport 'firebase/firestore';\nimport DotSpinner from '../../../shared/DotSpinner/DotSpinner';\n\nclass InfoGetter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: '',\n      zipcode: '',\n      gender: '',\n      focused: '',\n      allUsernames: [],\n      showNotification: false,\n      notificationMsg: '',\n      notificationStatus: false,\n      processing: false\n    };\n\n    this.componentDidMount = async () => {\n      var allUsernames = [];\n      var db = firebase.firestore();\n      await db.collection(\"users\").get().then(querySnapshot => {\n        querySnapshot.forEach(doc => {\n          var user = doc.data();\n\n          if (!user.needsInfo) {\n            allUsernames.push(user.username);\n          }\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n      this.setState(_objectSpread({}, this.state, {\n        allUsernames: allUsernames\n      }));\n    };\n\n    this.toggleProcessing = bool => {\n      this.setState(_objectSpread({}, this.state, {\n        processing: bool\n      }));\n    };\n\n    this.validateZipCode = elementValue => {\n      var elementvalue = parseInt(elementValue);\n      var zipCodePattern = /^\\d{5}$|^\\d{5}-\\d{4}$/;\n      return zipCodePattern.test(elementValue);\n    };\n\n    this.errorCreater = msg => {\n      return Object.assign(new Error(msg), {\n        code: 405\n      });\n    };\n\n    this.submissionChecks = () => {\n      // username taken check\n      if (this.state.allUsernames.includes(this.state.username)) {\n        throw this.errorCreater(\"That username is taken.\");\n      } // username length check\n\n\n      if (this.state.username.length <= 2) {\n        throw this.errorCreater(\"Username must be between 3-15 characters.\");\n      }\n\n      if (/\\W/.test(this.state.username)) {\n        throw this.errorCreater(\"Username can only include letters, numbers, and underscores.\");\n      } // valid zipcode check\n\n\n      if (!this.validateZipCode(this.state.zipcode)) {\n        throw this.errorCreater(\"Please enter a valid zipcode.\");\n      } // gender input check\n\n\n      if (this.state.gender === '') {\n        throw this.errorCreater(\"Please select a gender.\");\n      }\n    };\n\n    this.formIsValid = () => {\n      // username length check\n      if (this.state.username.length <= 2) {\n        return false;\n      }\n\n      if (/\\W/.test(this.state.username)) {\n        return false;\n      } // valid zipcode check\n\n\n      if (!this.validateZipCode(this.state.zipcode)) {\n        return false;\n      } // gender input check\n\n\n      if (this.state.gender === '') {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.noticeOverHandler = () => {\n      this.setState(_objectSpread({}, this.state, {\n        showNotification: false\n      }));\n    };\n  }\n\n  usernameInputHandler(event) {\n    this.setState(_objectSpread({}, this.state, {\n      username: event.target.value\n    }));\n  }\n\n  zipcodeInputHandler(event) {\n    this.setState(_objectSpread({}, this.state, {\n      zipcode: event.target.value\n    }));\n  }\n\n  focusMale(event) {\n    event.preventDefault();\n    this.setState(_objectSpread({}, this.state, {\n      gender: 'Male',\n      focused: 'm'\n    }));\n  }\n\n  focusFemale(event) {\n    event.preventDefault();\n    this.setState(_objectSpread({}, this.state, {\n      gender: 'Female',\n      focused: 'f'\n    }));\n  }\n\n  async setUserDataHandler(event) {\n    event.preventDefault();\n    this.toggleProcessing(true); // profile checks\n\n    try {\n      // try all check and throw err if conditions not met\n      this.submissionChecks(); // address data per zipcode\n\n      const address = await this.fetchAddressFromZipcode(this.state.zipcode); // new profile information\n\n      var username = this.state.username.toLowerCase();\n      console.log('lowercase username');\n      const toUpload = {\n        username: username,\n        address: _objectSpread({}, address, {\n          region: regions[address[\"state\"]]\n        }),\n        gender: this.state.gender,\n        needsInfo: false,\n        handles: {\n          facebook: '',\n          instagram: '',\n          soundcloud: '',\n          youtube: ''\n        } // uploads data to firebase profile\n\n      };\n      this.props.setUserData(this.props.uid, toUpload);\n    } catch (err) {\n      this.setState(_objectSpread({}, this.state, {\n        notificationMsg: err.message,\n        showNotification: true,\n        notificationStatus: false,\n        processing: false\n      }));\n    }\n  }\n\n  async fetchAddressFromZipcode(zipcode) {\n    return axiosCommon.get('https://www.zipcodeapi.com/rest/js-zF10dQxfazt7cMgYnzZphQk7jEzBwBYPb781ubkqZokAXEvUzbinxdGT5rzVrkmB/info.json/' + zipcode + '/degrees').then(res => {\n      return res.data;\n    }).catch(err => {\n      throw this.errorCreater(\"Sorry, we're having issues processing that zipcode.\");\n    });\n  }\n\n  render() {\n    var isValid = this.formIsValid();\n    return React.createElement(\"form\", {\n      className: \"InfoGetterContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, this.state.processing ? React.createElement(DotSpinner, {\n      id: 'info-getter-dot',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }) : null, this.state.showNotification ? React.createElement(\"div\", {\n      onAnimationEnd: this.noticeOverHandler,\n      className: \"infoGetterMsg\",\n      id: this.state.notificationStatus ? \"successColor\" : \"failed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, this.state.notificationMsg) : null, React.createElement(\"h2\", {\n      id: \"set-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Set Info\"), React.createElement(\"input\", {\n      id: \"username\",\n      minLength: \"3\",\n      maxLength: \"13\",\n      type: \"text\",\n      pattern: \"[a-zA-Z0-9-]+\",\n      required: true,\n      value: this.state.username,\n      onChange: event => this.usernameInputHandler(event),\n      placeholder: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      maxLength: \"5\",\n      minLength: \"5\",\n      onChange: event => this.zipcodeInputHandler(event),\n      placeholder: \"Hometown ZIP\",\n      id: \"Zipcode\",\n      type: \"text\",\n      pattern: \"[0-9]{5}\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"GenderContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"GenderButton\",\n      id: this.state.focused === 'm' ? 'focused' : null,\n      onClick: event => this.focusMale(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"M\"), React.createElement(\"button\", {\n      className: \"GenderButton\",\n      id: this.state.focused === 'f' ? 'focused' : null,\n      onClick: event => this.focusFemale(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"F\")), React.createElement(\"button\", {\n      className: \"set-info-button\",\n      id: isValid && !this.state.processing ? 'info-getter-isValid' : null,\n      disabled: this.state.processing || !isValid ? true : false,\n      onClick: event => this.setUserDataHandler(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Confirm\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    uid: state.uid,\n    username: state.username,\n    zipcode: state.zipcode,\n    gender: state.gender\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUserData: (uid, nameZipGen) => dispatch(postUserData(uid, nameZipGen)) // fetchAddressFromZipcode: (zipcode) => dispatch(fetchAddressJSON(zipcode))\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InfoGetter);","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/containers/Hub/InfoGetter/InfoGetter.js"],"names":["React","Component","connect","postUserData","regions","axios","axiosCommon","parse","firebase","DotSpinner","InfoGetter","state","username","zipcode","gender","focused","allUsernames","showNotification","notificationMsg","notificationStatus","processing","componentDidMount","db","firestore","collection","get","then","querySnapshot","forEach","doc","user","data","needsInfo","push","catch","err","console","log","setState","toggleProcessing","bool","validateZipCode","elementValue","elementvalue","parseInt","zipCodePattern","test","errorCreater","msg","Object","assign","Error","code","submissionChecks","includes","length","formIsValid","noticeOverHandler","usernameInputHandler","event","target","value","zipcodeInputHandler","focusMale","preventDefault","focusFemale","setUserDataHandler","address","fetchAddressFromZipcode","toLowerCase","toUpload","region","handles","facebook","instagram","soundcloud","youtube","props","setUserData","uid","message","res","render","isValid","mapStateToProps","mapDispatchToProps","dispatch","nameZipGen"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './InfoGetter.css'\nimport { connect } from 'react-redux'\nimport { postUserData } from '../../../store/actionCreators'\nimport { regions } from '../../../shared/regions'\nimport axios from '../../../axios-orders'\nimport axiosCommon from 'axios'\nimport { parse } from 'url'\nimport firebase from '../../../Firebase'\nimport 'firebase/firestore'\nimport DotSpinner from '../../../shared/DotSpinner/DotSpinner'\n\nclass InfoGetter extends Component {\n\n    state = {\n\n        username: '',\n        zipcode: '',\n        gender: '',\n        focused: '',\n        allUsernames: [],\n        showNotification: false,\n        notificationMsg: '',\n        notificationStatus: false,\n\n        processing: false,\n\n    }\n    componentDidMount = async () => {\n\n        var allUsernames = []\n        var db = firebase.firestore()\n        await db.collection(\"users\").get()\n            .then((querySnapshot) => {\n                querySnapshot.forEach((doc) => {\n                    var user = doc.data()\n                    if (!user.needsInfo) {\n                        allUsernames.push(user.username)\n                    }\n                });\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n        this.setState({\n            ...this.state,\n            allUsernames: allUsernames\n        })\n    }\n\n    toggleProcessing = (bool) => {\n        this.setState({\n            ...this.state,\n            processing: bool\n        })\n    }\n\n    usernameInputHandler(event) {\n        this.setState({\n            ...this.state,\n            username: event.target.value\n        })\n    }\n\n    zipcodeInputHandler(event) {\n        this.setState({\n            ...this.state,\n            zipcode: event.target.value\n        })\n    }\n    focusMale(event) {\n        event.preventDefault()\n        this.setState({\n            ...this.state,\n            gender: 'Male',\n            focused: 'm'\n        })\n    }\n    focusFemale(event) {\n        event.preventDefault()\n        this.setState({\n            ...this.state,\n            gender: 'Female',\n            focused: 'f'\n        })\n    }\n    validateZipCode = (elementValue) => {\n        var elementvalue = parseInt(elementValue)\n        var zipCodePattern = /^\\d{5}$|^\\d{5}-\\d{4}$/;\n        return zipCodePattern.test(elementValue);\n    }\n\n    errorCreater = (msg) => {\n        return Object.assign(\n            new Error(msg),\n            { code: 405 }\n        );\n    }\n\n    submissionChecks = () => {\n        // username taken check\n        if (this.state.allUsernames.includes(this.state.username)) {\n            throw this.errorCreater(\"That username is taken.\")\n        }\n        // username length check\n        if (this.state.username.length <= 2) {\n            throw this.errorCreater(\"Username must be between 3-15 characters.\")\n        }\n        if (/\\W/.test(this.state.username)) {\n            throw this.errorCreater(\"Username can only include letters, numbers, and underscores.\")\n        }\n        // valid zipcode check\n        if (!this.validateZipCode(this.state.zipcode)) {\n            throw this.errorCreater(\"Please enter a valid zipcode.\")\n        }\n        // gender input check\n        if (this.state.gender === '') {\n            throw this.errorCreater(\"Please select a gender.\")\n        }\n    }\n\n    formIsValid = () => {\n\n        // username length check\n        if (this.state.username.length <= 2) {\n            return false\n        }\n        if (/\\W/.test(this.state.username)) {\n            return false\n        }\n        // valid zipcode check\n        if (!this.validateZipCode(this.state.zipcode)) {\n            return false\n        }\n        // gender input check\n        if (this.state.gender === '') {\n            return false\n        }\n        return true\n    }\n\n    async setUserDataHandler(event) {\n        event.preventDefault()\n        this.toggleProcessing(true)\n        // profile checks\n        try {\n\n            // try all check and throw err if conditions not met\n            this.submissionChecks()\n\n            // address data per zipcode\n            const address = await this.fetchAddressFromZipcode(this.state.zipcode)\n\n            // new profile information\n\n            var username = this.state.username.toLowerCase()\n            console.log('lowercase username')\n            const toUpload = {\n                username: username,\n                address: {\n                    ...address,\n                    region: regions[address[\"state\"]]\n                },\n                gender: this.state.gender,\n                needsInfo: false,\n                handles: {\n                    facebook: '',\n                    instagram: '',\n                    soundcloud: '',\n                    youtube: ''\n                }\n            }\n\n            // uploads data to firebase profile\n            this.props.setUserData(this.props.uid, toUpload)\n        }\n        catch (err) {\n            this.setState({\n                ...this.state,\n                notificationMsg: err.message,\n                showNotification: true,\n                notificationStatus: false,\n                processing: false\n            })\n        }\n    }\n\n\n    async fetchAddressFromZipcode(zipcode) {\n        return axiosCommon.get('https://www.zipcodeapi.com/rest/js-zF10dQxfazt7cMgYnzZphQk7jEzBwBYPb781ubkqZokAXEvUzbinxdGT5rzVrkmB/info.json/' + zipcode + '/degrees')\n            .then(res => { return res.data })\n            .catch(err => { \n                \n                throw this.errorCreater(\"Sorry, we're having issues processing that zipcode.\") \n            })\n    }\n\n    noticeOverHandler = () => {\n        this.setState({\n            ...this.state,\n            showNotification: false\n        })\n    }\n\n    render() {\n\n        var isValid = this.formIsValid()\n        return (\n            <form className=\"InfoGetterContainer\">\n                {this.state.processing ? <DotSpinner id={'info-getter-dot'}/> : null}\n                {this.state.showNotification ? (\n                    <div\n                        onAnimationEnd={this.noticeOverHandler}\n                        className=\"infoGetterMsg\"\n                        id={this.state.notificationStatus ? \"successColor\" : \"failed\"}>\n                        {this.state.notificationMsg}\n                    </div>\n                ) : null}\n                <h2 id=\"set-info\">Set Info</h2>\n                <input\n                    id=\"username\"\n                    minLength=\"3\"\n                    maxLength=\"13\"\n                    type=\"text\"\n                    pattern=\"[a-zA-Z0-9-]+\"\n                    required\n                    value={this.state.username}\n                    onChange={event => this.usernameInputHandler(event)}\n                    placeholder=\"Username\"></input>\n                <input\n                    maxLength=\"5\"\n                    minLength=\"5\"\n                    onChange={event => this.zipcodeInputHandler(event)}\n                    placeholder=\"Hometown ZIP\"\n                    id=\"Zipcode\"\n                    type=\"text\"\n                    pattern=\"[0-9]{5}\"></input>\n                <div className=\"GenderContainer\">\n                    <button\n                        className=\"GenderButton\"\n                        id={this.state.focused === 'm' ? 'focused' : null}\n                        onClick={event => this.focusMale(event)}>M</button>\n                    <button\n                        className=\"GenderButton\"\n                        id={this.state.focused === 'f' ? 'focused' : null}\n                        onClick={event => this.focusFemale(event)}>F</button>\n                </div>\n                <button className={`set-info-button`} id={isValid && !this.state.processing ? 'info-getter-isValid' : null} disabled={this.state.processing || !isValid ? true : false} onClick={event => this.setUserDataHandler(event)}>Confirm</button>\n            </form>\n\n\n        )\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        uid: state.uid,\n        username: state.username,\n        zipcode: state.zipcode,\n        gender: state.gender\n    }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setUserData: (uid, nameZipGen) => dispatch(postUserData(uid, nameZipGen)),\n        // fetchAddressFromZipcode: (zipcode) => dispatch(fetchAddressJSON(zipcode))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InfoGetter)\n\n"]},"metadata":{},"sourceType":"module"}