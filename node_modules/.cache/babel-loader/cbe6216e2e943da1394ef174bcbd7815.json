{"ast":null,"code":"import _defineProperty from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/containers/Wordsmiths/Wordsmiths.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport 'firebase/firestore';\nimport React, { Component, useState, useEffect } from 'react';\nimport shuffle from 'shuffle-array';\nimport joey from '../../assets/videos/joey.m4v';\nimport joeyIMG from '../../assets/images/joeyIMG.png';\nimport firebase from '../../Firebase';\nimport Rappers from './Rappers/Rappers';\nimport WordNavBar from './WordNavBar/WordNavBar';\nimport './Wordsmiths.css';\nimport timeDict from './WordSmithsTools/timeDict';\nimport FireApi from '../../Api/FireApi/FireApi';\n\nconst Wordsmiths = props => {\n  const _useState = useState({\n    rank: \"Best\",\n    time: \"All Time\",\n    state: \"All States\",\n    coast: \"All Coasts\",\n    gender: \"All Genders\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        sortFilterState = _useState2[0],\n        setSortFilterState = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rappers = _useState4[0],\n        setRappers = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        submissions = _useState6[0],\n        setSubmissions = _useState6[1];\n\n  const _useState7 = useState(true),\n        _useState8 = _slicedToArray(_useState7, 2),\n        fetching = _useState8[0],\n        setFetching = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        follows = _useState10[0],\n        setFollows = _useState10[1];\n\n  const _useState11 = useState([]),\n        _useState12 = _slicedToArray(_useState11, 2),\n        votes = _useState12[0],\n        setVotes = _useState12[1];\n\n  useEffect(async () => {\n    try {\n      setFetching(true);\n      let rappers = {};\n      let submissions = await FireApi.fetchPostsOnce();\n      let votes = await FireApi.fetchVotesOnce();\n      let users = await this.fetchUsers(); // for every single submission\n\n      submissions.forEach(submission => {\n        // find the votes for that submission\n        let filteredVotes = votes.filter(vote => vote.pid === submission.pid);\n\n        if (!rappers[submission.uid]) {\n          rappers[submission.uid] = {\n            uid: submission.uid,\n            gender: submission.gender,\n            username: submission.username,\n            address: submission.address,\n            votes: filteredVotes,\n            photoURL: users[submission.uid].photoURL,\n            blurb: users[submission.uid].blurb,\n            handles: users[submission.uid].handles\n          };\n        } else {\n          rappers[submission.uid].votes[submission.createdOn] = filteredVotes;\n        }\n      });\n      setRappers(rappers);\n      setSubmissions(submissions);\n      setFetching(false);\n      setVotes(votes);\n    } catch (err) {\n      setFetching(false);\n      console.log(err);\n    }\n\n    return () => {};\n  }, []); // fetch ALl votes\n\n  const fetchUsers = async () => {\n    let db = firebase.firestore();\n    return db.collection(\"users\").get().then(querySnapshot => {\n      let users = {};\n      querySnapshot.forEach(doc => {\n        users[doc.id] = _objectSpread({}, doc.data(), {\n          uid: doc.id\n        });\n      });\n      return users;\n    }).catch(err => {\n      throw err;\n    });\n  };\n\n  const sortAndFilter = (type, parameter) => {\n    // set appropriate UI\n    if (type === 'state' && parameter !== 'All States') {\n      setSortFilterState(_objectSpread({}, this.state, {\n        coast: 'All Coasts',\n        [type]: parameter\n      }));\n    } else if (type === 'coast' && parameter !== 'All Coasts') {\n      setSortFilterState(_objectSpread({}, this.state, {\n        state: 'All States',\n        [type]: parameter\n      }));\n    } else {\n      setSortFilterState(_objectSpread({}, this.state, {\n        [type]: parameter\n      }));\n    }\n  };\n\n  const toggleFetching = bool => {\n    setFetching(bool);\n  };\n\n  let displayedRappers = _objectSpread({}, sortFilterState.rappers);\n\n  let allVotes = sortFilterState.votes ? Object.values(sortFilterState.votes) : []; // Filters start\n\n  if (sortFilterState.state !== \"All States\") {\n    displayedRappers = Object.fromEntries(Object.entries(displayedRappers).filter(([k, rapper]) => rapper.address.state === sortFilterState.state));\n  }\n\n  if (sortFilterState.coast !== \"All Coasts\") {\n    displayedRappers = Object.fromEntries(Object.entries(displayedRappers).filter(([k, rapper]) => rapper.address.region === sortFilterState.coast));\n  }\n\n  if (sortFilterState.gender !== \"All Genders\") {\n    displayedRappers = Object.fromEntries(Object.entries(displayedRappers).filter(([k, rapper]) => rapper.gender === sortFilterState.gender));\n  } // Filters end\n  // Tally points start\n\n\n  for (let uid in displayedRappers) {\n    let rapper = displayedRappers[uid];\n    let tally = 0;\n    allVotes.forEach(vote => {\n      let now = new Date();\n      let passedMilliseconds = now - vote.postDate.toDate().getTime();\n      let passedDays = passedMilliseconds / 1000 / 60 / 60 / 24; // tally if within given time \n\n      if (!(passedDays > timeDict[sortFilterState.time]) && uid === vote.receiverID) {\n        tally += vote.value;\n      }\n    }); // if amount of votes is negative make zero\n\n    rapper['tally'] = tally < 0 ? 0 : tally; // submissionCount\n\n    let filteredSubmissions = sortFilterState.submissions.filter(submission => {\n      let now = new Date();\n      let passedMilliseconds = now - submission.createdOn.toDate().getTime();\n      let passedDays = passedMilliseconds / 1000 / 60 / 60 / 24;\n      return !(passedDays > timeDict[sortFilterState.time]) && submission.uid === uid;\n    });\n    let noOfSubmissions = filteredSubmissions.length;\n    rapper['submissionCount'] = noOfSubmissions;\n  } // Tally points end\n\n\n  displayedRappers = displayedRappers ? Object.values(displayedRappers) : []; // Sort start\n\n  displayedRappers = sortFilterState.rank === \"Random\" ? // random sort\n  shuffle(displayedRappers) : // best sort\n  displayedRappers.sort((rapper_A, rapper_B) => {\n    return rapper_A.tally < rapper_B.tally ? 1 : -1;\n  }); // Sort end\n  // tally city and coast votes\n\n  let cityVotes = {};\n  let coastVotes = {};\n  displayedRappers.forEach(rapper => {\n    const cityState = \"\".concat(rapper.address.city, \", \").concat(rapper.address.state);\n\n    if (rapper.tally > 0) {\n      cityVotes[cityState] = cityState in cityVotes ? cityVotes[cityState] + rapper.tally : rapper.tally;\n      coastVotes[rapper.address.region] = rapper.address.region in coastVotes ? coastVotes[rapper.address.region] + rapper.tally : rapper.tally;\n    }\n  }); //  Best City and Best Coast reducers\n\n  let bestCity = Object.keys(cityVotes).length ? Object.keys(cityVotes).reduce((a, b) => cityVotes[a] > cityVotes[b] ? a : b) : 'N/A';\n  let bestCoast = Object.keys(coastVotes).length ? Object.keys(coastVotes).reduce((a, b) => coastVotes[a] > coastVotes[b] ? a : b) : 'N/A';\n  return React.createElement(\"div\", {\n    className: \"WordsmithsContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    id: \"backup-img\",\n    src: joeyIMG,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }), React.createElement(\"video\", {\n    id: \"badass\",\n    src: joey,\n    autoPlay: true,\n    loop: true,\n    playsInline: true,\n    muted: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"WordSmithsOverlay\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }), React.createElement(WordNavBar, {\n    rank: sortFilterState.rank,\n    time: sortFilterState.time,\n    state: sortFilterState.state,\n    coast: sortFilterState.coast,\n    gender: sortFilterState.gender,\n    sortAndFilter: sortAndFilter.bind(this),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }), React.createElement(Rappers, {\n    rappers: displayedRappers,\n    rank: sortFilterState.rank,\n    time: sortFilterState.time,\n    state: sortFilterState.state,\n    coast: sortFilterState.coast,\n    gender: sortFilterState.gender,\n    bestCity: bestCity,\n    bestCoast: bestCoast,\n    sort: sortFilterState.rank,\n    fetching: sortFilterState.fetching,\n    follows: sortFilterState.follows,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }));\n};\n\nexport default Wordsmiths;","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/containers/Wordsmiths/Wordsmiths.js"],"names":["React","Component","useState","useEffect","shuffle","joey","joeyIMG","firebase","Rappers","WordNavBar","timeDict","FireApi","Wordsmiths","props","rank","time","state","coast","gender","sortFilterState","setSortFilterState","rappers","setRappers","submissions","setSubmissions","fetching","setFetching","follows","setFollows","votes","setVotes","fetchPostsOnce","fetchVotesOnce","users","fetchUsers","forEach","submission","filteredVotes","filter","vote","pid","uid","username","address","photoURL","blurb","handles","createdOn","err","console","log","db","firestore","collection","get","then","querySnapshot","doc","id","data","catch","sortAndFilter","type","parameter","toggleFetching","bool","displayedRappers","allVotes","Object","values","fromEntries","entries","k","rapper","region","tally","now","Date","passedMilliseconds","postDate","toDate","getTime","passedDays","receiverID","value","filteredSubmissions","noOfSubmissions","length","sort","rapper_A","rapper_B","cityVotes","coastVotes","cityState","city","bestCity","keys","reduce","a","b","bestCoast","bind"],"mappings":"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","sourcesContent":["import 'firebase/firestore'\nimport React, { Component, useState, useEffect } from 'react'\nimport shuffle from 'shuffle-array'\nimport joey from '../../assets/videos/joey.m4v'\nimport joeyIMG from '../../assets/images/joeyIMG.png'\nimport firebase from '../../Firebase'\nimport Rappers from './Rappers/Rappers'\nimport WordNavBar from './WordNavBar/WordNavBar'\nimport './Wordsmiths.css'\nimport timeDict from './WordSmithsTools/timeDict'\nimport FireApi from '../../Api/FireApi/FireApi'\n\n\n\nconst Wordsmiths = (props) => {\n\n    const [sortFilterState, setSortFilterState] = useState({\n        rank: \"Best\",\n        time: \"All Time\",\n        state: \"All States\",\n        coast: \"All Coasts\",\n        gender: \"All Genders\",\n    })\n    const [rappers, setRappers] = useState({})\n    const [submissions, setSubmissions] = useState([])\n    const [fetching, setFetching] = useState(true)\n    const [follows, setFollows] = useState([])\n    const [votes, setVotes] = useState([])\n\n    useEffect(async () => {\n        try {\n            setFetching(true)\n            let rappers = {}\n            let submissions = await FireApi.fetchPostsOnce()\n            let votes = await FireApi.fetchVotesOnce()\n            let users = await this.fetchUsers()\n\n            // for every single submission\n            submissions.forEach(submission => {\n\n                // find the votes for that submission\n                let filteredVotes = votes.filter(vote => vote.pid === submission.pid)\n                if (!rappers[submission.uid]) {\n                    rappers[submission.uid] = {\n                        uid: submission.uid,\n                        gender: submission.gender,\n                        username: submission.username,\n                        address: submission.address,\n                        votes: filteredVotes,\n                        photoURL: users[submission.uid].photoURL,\n                        blurb: users[submission.uid].blurb,\n                        handles: users[submission.uid].handles\n                    }\n                } else {\n                    rappers[submission.uid].votes[submission.createdOn] = filteredVotes\n                }\n            })\n            setRappers(rappers)\n            setSubmissions(submissions)\n            setFetching(false)\n            setVotes(votes)\n        }\n        catch (err) {\n            setFetching(false)\n            console.log(err)\n        }\n        return () => {\n        };\n    }, [])\n\n\n    // fetch ALl votes\n    const fetchUsers = async () => {\n        let db = firebase.firestore()\n        return db.collection(\"users\").get()\n            .then((querySnapshot) => {\n                let users = {}\n                querySnapshot.forEach((doc) => {\n                    users[doc.id] = { ...doc.data(), uid: doc.id }\n                });\n                return users\n\n            })\n            .catch(err => { throw err })\n    }\n\n\n    const sortAndFilter = (type, parameter) => {\n        // set appropriate UI\n        if (type === 'state' && parameter !== 'All States') {\n            setSortFilterState({\n                ...this.state,\n                coast: 'All Coasts',\n                [type]: parameter\n            })\n        } else if (type === 'coast' && parameter !== 'All Coasts') {\n            setSortFilterState({\n                ...this.state,\n                state: 'All States',\n                [type]: parameter\n            })\n        }\n        else {\n            setSortFilterState({\n                ...this.state,\n                [type]: parameter\n            })\n        }\n\n    }\n\n    const toggleFetching = (bool) => {\n        setFetching(bool)\n    }\n\n\n\n\n\n        let displayedRappers = { ...sortFilterState.rappers }\n        let allVotes = sortFilterState.votes ? Object.values(sortFilterState.votes) : []\n\n        // Filters start\n        if (sortFilterState.state !== \"All States\") { displayedRappers = Object.fromEntries(Object.entries(displayedRappers).filter(([k, rapper]) => rapper.address.state === sortFilterState.state)) }\n        if (sortFilterState.coast !== \"All Coasts\") { displayedRappers = Object.fromEntries(Object.entries(displayedRappers).filter(([k, rapper]) => rapper.address.region === sortFilterState.coast)) }\n        if (sortFilterState.gender !== \"All Genders\") { displayedRappers = Object.fromEntries(Object.entries(displayedRappers).filter(([k, rapper]) => rapper.gender === sortFilterState.gender)) }\n        // Filters end\n\n\n        // Tally points start\n        for (let uid in displayedRappers) {\n            let rapper = displayedRappers[uid]\n            let tally = 0\n            allVotes.forEach((vote) => {\n                let now = new Date()\n                let passedMilliseconds = now - vote.postDate.toDate().getTime()\n                let passedDays = (passedMilliseconds / 1000 / 60 / 60 / 24)\n                // tally if within given time \n                if (!(passedDays > timeDict[sortFilterState.time]) && uid === vote.receiverID) {\n                    tally += vote.value\n                }\n            })\n            // if amount of votes is negative make zero\n            rapper['tally'] = tally < 0 ? 0 : tally\n\n            // submissionCount\n            let filteredSubmissions = sortFilterState.submissions.filter(submission => {\n                let now = new Date()\n                let passedMilliseconds = now - submission.createdOn.toDate().getTime()\n                let passedDays = (passedMilliseconds / 1000 / 60 / 60 / 24)\n                return !(passedDays > timeDict[sortFilterState.time]) && submission.uid === uid\n            })\n            let noOfSubmissions = filteredSubmissions.length\n            rapper['submissionCount'] = noOfSubmissions\n        }\n        // Tally points end\n\n\n        displayedRappers = displayedRappers ? Object.values(displayedRappers) : []\n\n        // Sort start\n        displayedRappers = (sortFilterState.rank === \"Random\") ?\n            // random sort\n            shuffle(displayedRappers) :\n            // best sort\n            displayedRappers.sort((rapper_A, rapper_B) => {\n                return (rapper_A.tally < rapper_B.tally) ? 1 : -1\n            })\n        // Sort end\n\n        // tally city and coast votes\n        let cityVotes = {}\n        let coastVotes = {}\n        displayedRappers.forEach(rapper => {\n            const cityState = `${rapper.address.city}, ${rapper.address.state}`\n            if (rapper.tally > 0) {\n                cityVotes[cityState] = (cityState in cityVotes) ?\n                    cityVotes[cityState] + rapper.tally\n                    : rapper.tally\n                coastVotes[rapper.address.region] = (rapper.address.region in coastVotes) ?\n                    coastVotes[rapper.address.region] + rapper.tally\n                    : rapper.tally\n            }\n        })\n\n        //  Best City and Best Coast reducers\n        let bestCity = Object.keys(cityVotes).length ? Object.keys(cityVotes).reduce((a, b) => cityVotes[a] > cityVotes[b] ? a : b) : 'N/A'\n        let bestCoast = Object.keys(coastVotes).length ? Object.keys(coastVotes).reduce((a, b) => coastVotes[a] > coastVotes[b] ? a : b) : 'N/A'\n\n\n        return (\n            <div className=\"WordsmithsContainer\">\n                <img id=\"backup-img\" src={joeyIMG} alt=\"\" />\n\n                <video id=\"badass\" src={joey} autoPlay={true} loop={true} playsInline={true} muted />\n                <div id=\"WordSmithsOverlay\" />\n                <WordNavBar\n                    rank={sortFilterState.rank}\n                    time={sortFilterState.time}\n                    state={sortFilterState.state}\n                    coast={sortFilterState.coast}\n                    gender={sortFilterState.gender}\n                    sortAndFilter={sortAndFilter.bind(this)} />\n                <Rappers\n                    rappers={displayedRappers}\n                    rank={sortFilterState.rank}\n                    time={sortFilterState.time}\n                    state={sortFilterState.state}\n                    coast={sortFilterState.coast}\n                    gender={sortFilterState.gender}\n                    bestCity={bestCity}\n                    bestCoast={bestCoast}\n                    sort={sortFilterState.rank}\n                    fetching={sortFilterState.fetching}\n                    follows={sortFilterState.follows} />\n            </div>\n        )\n}\n\nexport default Wordsmiths\n"]},"metadata":{},"sourceType":"module"}