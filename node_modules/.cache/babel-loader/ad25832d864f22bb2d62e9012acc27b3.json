{"ast":null,"code":"import _defineProperty from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/containers/Scribble/Post/Post.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from '../../../Firebase';\nimport './Post.css';\n\nclass Post extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      submission: {\n        lineOne: '',\n        lineTwo: '',\n        lineThree: '',\n        lineFour: ''\n      },\n      inputData: {\n        one: {\n          id: 'lineOne'\n        },\n        two: {\n          id: 'lineTwo'\n        },\n        three: {\n          id: 'lineThree'\n        },\n        four: {\n          id: 'lineFour'\n        }\n      },\n      inputUniversalProps: {\n        maxLength: '70',\n        spellCheck: 'false',\n        autoCorrect: 'false'\n      },\n      spinner: false,\n      notificationMessage: 'default notification message',\n      showNotification: false,\n      notificationStatus: true\n    };\n\n    this.resetBars = () => {\n      this.setState(_objectSpread({}, this.state, {\n        inputData: _objectSpread({}, this.state.inputData),\n        inputUniversalProps: _objectSpread({}, this.state.inputUniversalProps),\n        submission: {\n          lineOne: '',\n          lineTwo: '',\n          lineThree: '',\n          lineFour: ''\n        }\n      }));\n    };\n\n    this.toggleSpinner = bool => {\n      this.setState(_objectSpread({}, this.state, {\n        spinner: bool\n      }));\n    };\n\n    this.onChangeHandler = (line, event) => {\n      console.log('[Post.js] onChangeHandler');\n      this.setState(_objectSpread({}, this.state, {\n        submission: _objectSpread({}, this.state.submission, {\n          [line]: event.target.value.toLowerCase()\n        })\n      }));\n    };\n\n    this.arrowKeyHandler = event => {\n      if (event.key === \"Enter\") {\n        event.preventDefault();\n      }\n\n      if (event.key === \"Enter\" && (event.target.id !== 'lineFour' || event.key === \"ArrowDown\" && event.target.id !== 'lineFour')) {\n        return event.target.nextElementSibling.focus();\n      }\n\n      if (event.key === \"ArrowUp\" && event.target.id !== 'lineOne') {\n        return event.target.previousElementSibling.focus();\n      }\n\n      if (event.key === \"ArrowDown\" && event.target.id !== 'lineFour') {\n        return event.target.nextElementSibling.focus();\n      }\n    };\n\n    this.createErr = (msg, code) => {\n      return Object.assign(new Error(msg), {\n        code: code\n      });\n    };\n\n    this.toggleNotification = (msg, show, status) => {\n      this.setState(_objectSpread({}, this.state, {\n        notificationMessage: msg,\n        showNotification: show,\n        notificationStatus: status\n      }));\n    };\n\n    this.checkPostsLeft = async () => {\n      //firestore stuff\n      let db = firebase.firestore();\n      return db.collection(\"submissions\").where('uid', '==', this.props.uid).get().then(querySnapshot => {\n        let postsToday = 0;\n        querySnapshot.forEach(doc => {\n          let post = doc.data();\n          let submissionDate = post.createdOn.toDate().toDateString();\n\n          if (submissionDate === new Date().toDateString()) {\n            postsToday += 1;\n          }\n        });\n\n        if (postsToday >= 3) {\n          throw this.createErr(\"Daily Posting Limit Reached! (3)\", 402);\n        } else {\n          return postsToday;\n        }\n      }).catch(err => {\n        throw err;\n      });\n    };\n\n    this.postSubmission = async submission => {\n      let db = firebase.firestore();\n      return db.collection(\"submissions\").add(_objectSpread({}, submission)).then(() => {\n        console.log(\"submission for \".concat(this.props.uid, \" successful!\"));\n      }).catch(function (error) {\n        console.error(\"Error writing document: \", error);\n      });\n    };\n\n    this.generateSubmission = () => {\n      let content = _objectSpread({}, this.state.submission); // trim initial whitespaces\n\n\n      for (let key in content) {\n        content[key] = this.trimInitialSpaces(content[key]);\n      }\n\n      return {\n        username: this.props.username,\n        uid: this.props.uid,\n        createdOn: new Date(),\n        gender: this.props.gender,\n        content: content,\n        address: this.props.address,\n        photoURL: this.props.photoURL\n      };\n    };\n\n    this.trimInitialSpaces = str => {\n      let i = 0;\n\n      while (i < str.length) {\n        if (str.charAt(i) === ' ') {\n          i += 1;\n        } else {\n          return str.slice(i, str.length);\n        }\n      }\n\n      return '';\n    };\n\n    this.submit = async event => {\n      event.preventDefault();\n      let submission = this.generateSubmission();\n\n      try {\n        this.toggleSpinner(true); //        ***CHECKS START***\n        // auth check \n\n        if (!this.props.uid) {\n          throw this.createErr('Log in to post!', 405);\n        } // limit check\n\n\n        const postsToday = await this.checkPostsLeft(); // filled out check\n\n        if (!this.state.submission.lineOne || !this.state.submission.lineTwo || !this.state.submission.lineThree || !this.state.submission.lineFour) {\n          throw this.createErr('A submission requires four bars!', 408);\n        } // posts the post\n\n\n        await this.postSubmission(submission); //off with the spinner\n\n        this.toggleSpinner(false);\n        this.toggleNotification(\"Post Successful! \".concat(2 - postsToday, \" \").concat(2 - postsToday === 1 ? 'post' : 'posts', \" left today.\"), true, true);\n        this.resetBars();\n      } catch (err) {\n        this.toggleSpinner(false);\n        this.toggleNotification(err.message, true, false);\n      }\n    };\n\n    this.isFilledOut = () => {\n      return this.state.submission.lineOne && !this.state.submission.lineTwo && !this.state.submission.lineThree && !this.state.submission.lineFour;\n    };\n  }\n\n  render() {\n    // transition classes\n    let focused = this.props.focused === 'Post';\n    let theNotepadId = focused ? 'notepad-expanded' : 'notepad-compressed';\n    let submitPostButtonId = focused ? 'visible' : 'invisible';\n    let postWidgetHeader = focused ? 'header-compressed' : 'header-expanded';\n    let fourLinesId = focused ? 'four-lines-expanded' : 'four-lines-compressed'; // input elements\n\n    let inputArr = [];\n\n    for (let key in this.state.inputData) {\n      inputArr.push(this.state.inputData[key]);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"the-notepad\",\n      id: theNotepadId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"post-widget-header\",\n      id: postWidgetHeader,\n      onClick: !focused ? this.props.toggle : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"Post\"), React.createElement(\"form\", {\n      className: 'four-lines',\n      autoComplete: \"new-password\",\n      id: fourLinesId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, this.state.showNotification ? React.createElement(\"div\", {\n      className: \"post-notification\",\n      id: !this.state.notificationStatus ? 'negative-msg' : null,\n      onAnimationEnd: () => this.toggleNotification('', false, false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, this.state.notificationMessage) : null, inputArr.map((obj, index) => {\n      return React.createElement(\"input\", Object.assign({}, this.state.inputUniversalProps, {\n        autoComplete: \"new-password\",\n        className: 'input-line lines-expanded',\n        type: \"text\",\n        id: obj.id,\n        value: this.state.submission[obj.id],\n        onChange: event => this.onChangeHandler(obj.id, event),\n        key: index,\n        onKeyDown: this.arrowKeyHandler,\n        disabled: this.props.loggedIn ? false : true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }));\n    }), React.createElement(\"button\", {\n      className: \"submit-post-button\",\n      disabled: this.state.spinner ? true : false,\n      id: submitPostButtonId,\n      onClick: event => this.submit(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \"Submit\", this.state.spinner ? React.createElement(\"div\", {\n      id: \"my-post-spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }) : null)));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    uid: state.user.uid,\n    email: state.user.email,\n    username: state.user.username,\n    gender: state.user.gender,\n    address: state.user.address,\n    loggedIn: state.user.loggedIn,\n    needsInfo: state.user.needsInfo,\n    photoURL: state.user.photoURL\n  };\n};\n\nexport default connect(mapStateToProps, null)(Post);","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/containers/Scribble/Post/Post.js"],"names":["React","Component","connect","firebase","Post","state","submission","lineOne","lineTwo","lineThree","lineFour","inputData","one","id","two","three","four","inputUniversalProps","maxLength","spellCheck","autoCorrect","spinner","notificationMessage","showNotification","notificationStatus","resetBars","setState","toggleSpinner","bool","onChangeHandler","line","event","console","log","target","value","toLowerCase","arrowKeyHandler","key","preventDefault","nextElementSibling","focus","previousElementSibling","createErr","msg","code","Object","assign","Error","toggleNotification","show","status","checkPostsLeft","db","firestore","collection","where","props","uid","get","then","querySnapshot","postsToday","forEach","doc","post","data","submissionDate","createdOn","toDate","toDateString","Date","catch","err","postSubmission","add","error","generateSubmission","content","trimInitialSpaces","username","gender","address","photoURL","str","i","length","charAt","slice","submit","message","isFilledOut","render","focused","theNotepadId","submitPostButtonId","postWidgetHeader","fourLinesId","inputArr","push","toggle","map","obj","index","loggedIn","mapStateToProps","user","email","needsInfo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport firebase from '../../../Firebase'\nimport './Post.css'\n\nclass Post extends Component {\n\n    state = {\n        submission: {\n            lineOne: '',\n            lineTwo: '',\n            lineThree: '',\n            lineFour: '',\n        },\n        inputData: {\n            one: { id: 'lineOne' },\n            two: { id: 'lineTwo' },\n            three: { id: 'lineThree' },\n            four: { id: 'lineFour' }\n        },\n        inputUniversalProps: {\n            maxLength: '70',\n            spellCheck: 'false',\n            autoCorrect: 'false',\n        },\n        spinner: false,\n        notificationMessage: 'default notification message',\n        showNotification: false,\n        notificationStatus: true\n    }\n\n    resetBars = () => {\n        this.setState({\n            ...this.state,\n            inputData: {\n                ...this.state.inputData\n            },\n            inputUniversalProps: {\n                ...this.state.inputUniversalProps\n            },\n            submission: {\n                lineOne: '',\n                lineTwo: '',\n                lineThree: '',\n                lineFour: ''\n            }\n        })\n    }\n\n    toggleSpinner = bool => {\n        this.setState({\n            ...this.state,\n            spinner: bool\n        });\n    };\n\n    onChangeHandler = (line, event) => {\n        console.log('[Post.js] onChangeHandler')\n        this.setState({\n            ...this.state,\n            submission: {\n                ...this.state.submission,\n                [line]: event.target.value.toLowerCase()\n            }\n        })\n    }\n\n    arrowKeyHandler = (event) => {\n        if (event.key === \"Enter\") {\n            event.preventDefault()\n        }\n        if (event.key === \"Enter\"\n            && ((event.target.id !== 'lineFour') || (event.key === \"ArrowDown\" && event.target.id !== 'lineFour'))) {\n            return event.target.nextElementSibling.focus();\n        }\n        if (event.key === \"ArrowUp\" && event.target.id !== 'lineOne') {\n            return event.target.previousElementSibling.focus();\n        }\n        \n        if (event.key === \"ArrowDown\" && event.target.id !== 'lineFour') {\n            return event.target.nextElementSibling.focus();\n        }\n    };\n\n    createErr = (msg, code) => {\n        return Object.assign(new Error(msg), { code: code })\n    }\n\n    toggleNotification = (msg, show, status) => {\n        this.setState({\n            ...this.state,\n            notificationMessage: msg,\n            showNotification: show,\n            notificationStatus: status\n\n        })\n    }\n\n    checkPostsLeft = async () => {\n\n        //firestore stuff\n        let db = firebase.firestore()\n        return db.collection(\"submissions\").where('uid', '==', this.props.uid).get()\n            .then((querySnapshot) => {\n                let postsToday = 0\n                querySnapshot.forEach((doc) => {\n                    let post = doc.data()\n                    let submissionDate = post.createdOn.toDate().toDateString()\n                    if (submissionDate === new Date().toDateString()) {\n                        postsToday += 1\n                    }\n                });\n                if (postsToday >= 3) {\n                    throw this.createErr(\"Daily Posting Limit Reached! (3)\", 402)\n                } else {\n                    return postsToday\n                }\n            }).catch(err => {\n\n                throw err\n            })\n    }\n    postSubmission = async (submission) => {\n        let db = firebase.firestore()\n        return db.collection(\"submissions\").add({ ...submission })\n            .then(() => {\n                console.log(`submission for ${this.props.uid} successful!`);\n            })\n            .catch(function (error) {\n                console.error(\"Error writing document: \", error);\n            });\n    }\n\n    generateSubmission = () => {\n\n        let content = {\n            ...this.state.submission\n        }\n        // trim initial whitespaces\n        for (let key in content) {\n            content[key] = this.trimInitialSpaces(content[key])\n        }\n\n        return {\n            username: this.props.username,\n            uid: this.props.uid,\n            createdOn: new Date(),\n            gender: this.props.gender,\n            content: content,\n            address: this.props.address,\n            photoURL: this.props.photoURL,\n        };\n    }\n\n    // helper function that trims empty spaces (e.g. ' ') in the beginning of string\n    trimInitialSpaces = (str) => {\n        let i = 0;\n        while (i < str.length) {\n            if (str.charAt(i) === ' ') {\n                i += 1\n            } else {\n                return str.slice(i, str.length)\n            }\n        }\n        return ''\n    }\n\n\n    submit = async (event) => {\n        event.preventDefault()\n        let submission = this.generateSubmission()\n        try {\n            this.toggleSpinner(true)\n            //        ***CHECKS START***\n\n            // auth check \n            if (!this.props.uid) { throw this.createErr('Log in to post!', 405) }\n            // limit check\n            const postsToday = await this.checkPostsLeft()\n            // filled out check\n            if (!this.state.submission.lineOne || !this.state.submission.lineTwo || !this.state.submission.lineThree || !this.state.submission.lineFour) {\n                throw this.createErr('A submission requires four bars!', 408)\n            }\n            // posts the post\n            await this.postSubmission(submission)\n            //off with the spinner\n            this.toggleSpinner(false)\n            this.toggleNotification(`Post Successful! ${2 - postsToday} ${2 - postsToday === 1 ? 'post' : 'posts'} left today.`, true, true);\n            this.resetBars()\n        }\n        catch (err) {\n            this.toggleSpinner(false)\n            this.toggleNotification(err.message, true, false)\n        }\n    }\n\n    isFilledOut = () => {\n        return this.state.submission.lineOne && !this.state.submission.lineTwo && !this.state.submission.lineThree && !this.state.submission.lineFour\n    }\n\n\n\n\n\n\n    render() {\n\n        // transition classes\n        let focused = this.props.focused === 'Post'\n        let theNotepadId = focused ? 'notepad-expanded' : 'notepad-compressed'\n        let submitPostButtonId = focused ? 'visible' : 'invisible'\n        let postWidgetHeader = focused ? 'header-compressed' : 'header-expanded'\n\n        let fourLinesId = focused ? 'four-lines-expanded' : 'four-lines-compressed'\n\n        // input elements\n        let inputArr = []\n        for (let key in this.state.inputData) {\n            inputArr.push(this.state.inputData[key])\n        }\n\n        return (\n\n            <div className={`the-notepad`} id={theNotepadId}>\n                <div className={`post-widget-header`} id={postWidgetHeader} onClick={!focused ? this.props.toggle : null}>Post</div>\n                <form className={'four-lines'} autoComplete=\"new-password\" id={fourLinesId}>\n                    {this.state.showNotification ? <div className=\"post-notification\" id={!this.state.notificationStatus ? 'negative-msg' : null} onAnimationEnd={() => this.toggleNotification('', false, false)}>{this.state.notificationMessage}</div> : null}\n\n                    {inputArr.map((obj, index) => {\n                        return (\n                            <input\n                                {...this.state.inputUniversalProps}\n                                autoComplete=\"new-password\"\n                                className={'input-line lines-expanded'}\n                                type=\"text\"\n                                id={obj.id}\n                                value={this.state.submission[obj.id]}\n                                onChange={(event) => this.onChangeHandler(obj.id, event)}\n                                key={index}\n                                onKeyDown={this.arrowKeyHandler}\n                                disabled={this.props.loggedIn ? false : true} />\n\n                        )\n                    })}\n                    <button\n                        className={`submit-post-button`}\n                        disabled={this.state.spinner ? true : false}\n                        id={submitPostButtonId}\n                        onClick={(event) => this.submit(event)}>\n                        Submit\n                        {this.state.spinner ? <div id=\"my-post-spinner\"></div> : null}\n\n                    </button>\n                </form>\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        uid: state.user.uid,\n        email: state.user.email,\n        username: state.user.username,\n        gender: state.user.gender,\n        address: state.user.address,\n        loggedIn: state.user.loggedIn,\n        needsInfo: state.user.needsInfo,\n        photoURL: state.user.photoURL,\n    };\n};\n\nexport default connect(mapStateToProps, null)(Post)\n"]},"metadata":{},"sourceType":"module"}