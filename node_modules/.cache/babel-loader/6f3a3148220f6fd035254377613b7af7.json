{"ast":null,"code":"import _defineProperty from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/containers/Hub/Profile/UploadImage/UploadImage.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport './UploadImage.css';\nimport { connect } from 'react-redux';\nimport firebase from '../../../../Firebase';\nimport portrait from '../../../../assets/portrait.png';\n\nclass UploadImage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedFile: null,\n      hasChanged: false,\n      uploading: false,\n      showNotification: false,\n      notificationMessage: 'Upload Successful!',\n      notificationStatus: 'successColor'\n    };\n\n    this.fileSelectedHandler = event => {\n      var targetFile = event.target.files[0];\n\n      if (targetFile) {\n        var reader = new FileReader();\n        var presentIMG = document.getElementById(\"uploadIMGPresent\");\n        presentIMG.title = targetFile.name;\n\n        reader.onload = event => {\n          presentIMG.src = event.target.result;\n        };\n\n        reader.readAsDataURL(targetFile);\n        this.setState(_objectSpread({}, this.state, {\n          selectedFile: event.target.files[0],\n          hasChanged: true\n        }));\n      }\n    };\n\n    this.toggleNotification = bool => {\n      this.setState(_objectSpread({}, this.state, {\n        showNotification: bool\n      }));\n    };\n  }\n\n  componentDidMount() {\n    var storage = firebase.storage();\n    storage.ref(this.props.photoRef).getDownloadURL().then(url => {\n      console.log(url);\n      this.setState(_objectSpread({}, this.state, {\n        selectedFile: url\n      }));\n    }).catch(function (error) {\n      console.log(\"error in Profile.js: \", error);\n    });\n  }\n\n  fileUploadHandler() {\n    this.setState(_objectSpread({}, this.state, {\n      uploading: true\n    }));\n    var storageRef = firebase.storage().ref();\n    var imageRef = storageRef.child(this.props.photoRef);\n    var uploadTask = imageRef.put(this.state.selectedFile);\n    uploadTask.on('state_changed', snapshot => {}, err => {\n      this.setState(_objectSpread({}, this.state, {\n        uploading: false,\n        showNotification: true,\n        notificationStatus: 'failed',\n        notificationMessage: err.message\n      }));\n    }, () => {\n      uploadTask.snapshot.ref.getDownloadURL().then(downloadURL => {\n        this.props.setProfileImage(downloadURL);\n        this.setState(_objectSpread({}, this.state, {\n          uploading: false,\n          showNotification: true\n        }));\n      });\n    });\n  }\n\n  render() {\n    var theImage;\n\n    if (this.state.selectedFile) {\n      theImage = React.createElement(\"img\", {\n        id: \"uploadIMGPresent\",\n        alt: \"what?\",\n        src: this.state.selectedFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      });\n    } else {\n      theImage = React.createElement(\"div\", {\n        className: \"lds-ripple\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ul-img-backdrop\",\n      onClick: () => this.props.setShowPhotoModal(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"UploadImage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.state.uploading ? React.createElement(\"div\", {\n      id: \"dotdotLoader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }) : null, this.state.showNotification ? React.createElement(\"div\", {\n      className: \"upload-photo-success-msg\",\n      onAnimationEnd: () => this.toggleNotification(false),\n      id: this.state.notificationStatus ? \"successColor\" : \"failed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.state.notificationMessage) : null, React.createElement(\"div\", {\n      id: \"closeUploadImage\",\n      onClick: () => this.props.setShowPhotoModal(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-close\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Set Photo\"), React.createElement(\"div\", {\n      id: \"IMG_Border\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, theImage), React.createElement(\"div\", {\n      id: \"UploadButtons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.fileSelectedHandler,\n      type: \"file\",\n      id: \"files\",\n      className: \"hidden\",\n      accept: \"image/x-png, image/jpeg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      id: \"uploadIMG\",\n      htmlFor: \"files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Choose File\"), this.state.hasChanged ? React.createElement(\"button\", {\n      onClick: () => this.fileUploadHandler(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Confirm\") : React.createElement(\"button\", {\n      onClick: () => this.props.setShowPhotoModal(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Cancel\"))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    uid: state.uid,\n    photoRef: state.photoRef\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadImage);","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/containers/Hub/Profile/UploadImage/UploadImage.js"],"names":["React","Component","connect","firebase","portrait","UploadImage","state","selectedFile","hasChanged","uploading","showNotification","notificationMessage","notificationStatus","fileSelectedHandler","event","targetFile","target","files","reader","FileReader","presentIMG","document","getElementById","title","name","onload","src","result","readAsDataURL","setState","toggleNotification","bool","componentDidMount","storage","ref","props","photoRef","getDownloadURL","then","url","console","log","catch","error","fileUploadHandler","storageRef","imageRef","child","uploadTask","put","on","snapshot","err","message","downloadURL","setProfileImage","render","theImage","setShowPhotoModal","mapStateToProps","uid","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './UploadImage.css'\nimport { connect } from 'react-redux'\nimport firebase from '../../../../Firebase'\nimport portrait from '../../../../assets/portrait.png'\n\nclass UploadImage extends Component {\n\n    state = {\n        selectedFile: null,\n        hasChanged: false,\n        uploading: false,\n        showNotification: false,\n        notificationMessage: 'Upload Successful!',\n        notificationStatus: 'successColor'\n    }\n\n    componentDidMount() {\n        var storage = firebase.storage();\n        storage.ref(this.props.photoRef).getDownloadURL().then(url => {\n\n            console.log(url)\n            this.setState({\n                ...this.state,\n                selectedFile: url\n            })\n        }).catch(function (error) {\n            console.log(\"error in Profile.js: \", error)\n        });\n    }\n\n    fileSelectedHandler = event => {\n        var targetFile = event.target.files[0]\n        if (targetFile) {\n            var reader = new FileReader()\n            var presentIMG = document.getElementById(\"uploadIMGPresent\")\n            presentIMG.title = targetFile.name\n            reader.onload = event => {\n                presentIMG.src = event.target.result\n            }\n            reader.readAsDataURL(targetFile)\n            this.setState({\n                ...this.state,\n                selectedFile: event.target.files[0],\n                hasChanged: true\n            })\n        }\n    }\n\n    fileUploadHandler() {\n        this.setState({\n            ...this.state,\n            uploading: true\n        })\n        var storageRef = firebase.storage().ref()\n        var imageRef = storageRef.child(this.props.photoRef)\n        var uploadTask = imageRef.put(this.state.selectedFile)\n        uploadTask.on('state_changed', snapshot => {\n\n        }, (err) => {\n            this.setState({\n                ...this.state,\n                uploading: false,\n                showNotification: true,\n                notificationStatus: 'failed',\n                notificationMessage: err.message\n            })\n        }, () => {\n            uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\n                this.props.setProfileImage(downloadURL)\n                this.setState({\n                    ...this.state,\n                    uploading: false,\n                    showNotification: true\n                })\n            });\n        });\n\n    }\n\n    toggleNotification = (bool) => {\n        this.setState({\n            ...this.state,\n            showNotification: bool\n        })\n    }\n\n\n\n\n    render() {\n        var theImage;\n        if (this.state.selectedFile) {\n            theImage = (<img id=\"uploadIMGPresent\" alt={\"what?\"} src={this.state.selectedFile} />\n\n            )\n        } else {\n            theImage = (<div className=\"lds-ripple\"><div></div><div></div></div>)\n        }\n\n        return (\n            <div>\n                <div className=\"ul-img-backdrop\" onClick={() => this.props.setShowPhotoModal(false)}></div>\n\n                <div id=\"UploadImage\">\n                    {this.state.uploading ? <div id=\"dotdotLoader\"></div> : null}\n                    {this.state.showNotification ?\n                        <div\n                            className=\"upload-photo-success-msg\"\n                            onAnimationEnd={() => this.toggleNotification(false)}\n                            id={this.state.notificationStatus ? \"successColor\" : \"failed\"}>\n                            {this.state.notificationMessage}\n                        </div> : null}\n\n                    <div id=\"closeUploadImage\" onClick={() => this.props.setShowPhotoModal(false)}><i className=\"fa fa-close\"></i></div>\n\n                    {/* <img alt=\"alt\" src={portrait}></img> */}\n                    <h1>Set Photo</h1>\n                    <div id=\"IMG_Border\">\n                        {theImage}\n                    </div>\n                    \n                    \n\n                    <div id=\"UploadButtons\">\n                        <input onChange={this.fileSelectedHandler} type=\"file\" id=\"files\" className=\"hidden\" accept=\"image/x-png, image/jpeg\" />\n                        <label id=\"uploadIMG\" htmlFor=\"files\">Choose File</label>\n                        {this.state.hasChanged ?\n                            <button onClick={() => this.fileUploadHandler()}>Confirm</button> :\n                            <button onClick={() => this.props.setShowPhotoModal(false)}>Cancel</button>}\n                    </div>\n\n                </div>\n            </div>\n\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        uid: state.uid,\n        photoRef: state.photoRef\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadImage)"]},"metadata":{},"sourceType":"module"}