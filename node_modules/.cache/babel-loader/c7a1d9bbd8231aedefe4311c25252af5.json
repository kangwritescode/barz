{"ast":null,"code":"import _slicedToArray from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/components/Scribble/PostEditor/PostEditor.js\";\nimport React, { useState, useEffect } from 'react';\nimport './PostEditor.css';\nimport { connect } from 'react-redux';\nimport FireApi from '../../../FireApi/FireApi';\nimport ManyPost from '../../../containers/Judge/JudgeBarz/ManyView/ManyPost/ManyPost';\nimport Commenter from '../../../containers/Judge/JudgeBarz/ManyView/Commenter/Commenter';\n\nconst PostEditor = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        comments = _useState2[0],\n        setComments = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        votes = _useState4[0],\n        setVotes = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        post = _useState6[0],\n        setPost = _useState6[1];\n\n  useEffect(() => {\n    FireApi.fetchSinglePost(setPost, props.pid);\n    const commentsListener = FireApi.allSubmissionCommentsListener(setComments, props.pid);\n    const votesListener = FireApi.allVotesListener(setVotes, props.pid);\n    return () => {\n      commentsListener();\n      votesListener();\n    };\n  }, [props.pid]);\n  var content = null;\n\n  if (post) {\n    content = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"editor-backdrop\",\n      onClick: () => props.toggleEditor(null),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"editor-backdrop__content-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(ManyPost, Object.assign({\n      comments: comments.filter(post => post.pid === props.pid),\n      selectPost: () => null,\n      votes: votes.filter(vote => vote.pid === props.pid)\n    }, post, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"content-container-edit-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Commenter, {\n      toggleDeleteCommentModal: () => null,\n      customStyle: null,\n      selectedPost: post,\n      postSelected: post,\n      comments: comments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }))));\n  }\n\n  return content;\n};\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostEditor);","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/components/Scribble/PostEditor/PostEditor.js"],"names":["React","useState","useEffect","connect","FireApi","ManyPost","Commenter","PostEditor","props","comments","setComments","votes","setVotes","post","setPost","fetchSinglePost","pid","commentsListener","allSubmissionCommentsListener","votesListener","allVotesListener","content","toggleEditor","filter","vote","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,kBAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,QAAP,MAAqB,gEAArB;AACA,OAAOC,SAAP,MAAsB,kEAAtB;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA,oBAEMP,QAAQ,CAAC,EAAD,CAFd;AAAA;AAAA,QAEnBQ,QAFmB;AAAA,QAETC,WAFS;;AAAA,qBAGAT,QAAQ,CAAC,EAAD,CAHR;AAAA;AAAA,QAGnBU,KAHmB;AAAA,QAGZC,QAHY;;AAAA,qBAIFX,QAAQ,CAAC,IAAD,CAJN;AAAA;AAAA,QAInBY,IAJmB;AAAA,QAIbC,OAJa;;AAM1BZ,EAAAA,SAAS,CAAC,MAAM;AAEZE,IAAAA,OAAO,CAACW,eAAR,CAAwBD,OAAxB,EAAiCN,KAAK,CAACQ,GAAvC;AACA,UAAMC,gBAAgB,GAAGb,OAAO,CAACc,6BAAR,CAAsCR,WAAtC,EAAmDF,KAAK,CAACQ,GAAzD,CAAzB;AACA,UAAMG,aAAa,GAAGf,OAAO,CAACgB,gBAAR,CAAyBR,QAAzB,EAAmCJ,KAAK,CAACQ,GAAzC,CAAtB;AAEA,WAAO,MAAM;AACTC,MAAAA,gBAAgB;AAChBE,MAAAA,aAAa;AAChB,KAHD;AAIH,GAVQ,EAUN,CAACX,KAAK,CAACQ,GAAP,CAVM,CAAT;AAYA,MAAIK,OAAO,GAAG,IAAd;;AACA,MAAIR,IAAJ,EAAU;AACNQ,IAAAA,OAAO,GACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAiC,MAAA,OAAO,EAAE,MAAMb,KAAK,CAACc,YAAN,CAAmB,IAAnB,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGI;AAAK,MAAA,SAAS,sCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AACI,MAAA,QAAQ,EAAEb,QAAQ,CAACc,MAAT,CAAgBV,IAAI,IAAIA,IAAI,CAACG,GAAL,KAAaR,KAAK,CAACQ,GAA3C,CADd;AAEI,MAAA,UAAU,EAAE,MAAM,IAFtB;AAGI,MAAA,KAAK,EAAEL,KAAK,CAACY,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACR,GAAL,KAAaR,KAAK,CAACQ,GAAxC;AAHX,OAIQH,IAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,EAMI;AAAK,MAAA,SAAS,oCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AACI,MAAA,wBAAwB,EAAE,MAAM,IADpC;AAEI,MAAA,WAAW,EAAE,IAFjB;AAGI,MAAA,YAAY,EAAEA,IAHlB;AAII,MAAA,YAAY,EAAEA,IAJlB;AAKI,MAAA,QAAQ,EAAEJ,QALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CANJ,CAHJ,CADJ;AAsBH;;AACD,SAAOY,OAAP;AACH,CA5CD;;AA8CA,MAAMI,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO,EAAP;AAGH,CAJD;;AAMA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO,EAAP;AAGH,CAJD;;AAOA,eAAezB,OAAO,CAACsB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CpB,UAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './PostEditor.css'\nimport { connect } from 'react-redux'\nimport FireApi from '../../../FireApi/FireApi'\nimport ManyPost from '../../../containers/Judge/JudgeBarz/ManyView/ManyPost/ManyPost'\nimport Commenter from '../../../containers/Judge/JudgeBarz/ManyView/Commenter/Commenter'\n\nconst PostEditor = (props) => {\n\n    const [comments, setComments] = useState([])\n    const [votes, setVotes] = useState([])\n    const [post, setPost] = useState(null)\n\n    useEffect(() => {\n\n        FireApi.fetchSinglePost(setPost, props.pid)\n        const commentsListener = FireApi.allSubmissionCommentsListener(setComments, props.pid)\n        const votesListener = FireApi.allVotesListener(setVotes, props.pid)\n\n        return () => {\n            commentsListener()\n            votesListener()\n        };\n    }, [props.pid])\n\n    var content = null\n    if (post) {\n        content = (\n            <div>\n                <div className='editor-backdrop' onClick={() => props.toggleEditor(null)}>\n                </div>\n                <div className={`editor-backdrop__content-container`}>\n                    <ManyPost\n                        comments={comments.filter(post => post.pid === props.pid)}\n                        selectPost={() => null}\n                        votes={votes.filter(vote => vote.pid === props.pid)}\n                        {...post} />\n                    <div className={`content-container-edit-container`}>\n                        <Commenter\n                            toggleDeleteCommentModal={() => null}\n                            customStyle={null}\n                            selectedPost={post}\n                            postSelected={post}\n                            comments={comments} />\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n    return content\n}\n\nconst mapStateToProps = state => {\n    return {\n\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostEditor)\n"]},"metadata":{},"sourceType":"module"}