{"ast":null,"code":"var _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/components/Scribble/Toolkit/RhymeModal/RhymeModal.js\";\nimport React, { Component } from 'react';\nimport copy from 'clipboard-copy';\nimport './RhymeModal.css';\nimport GenID from '../../../../shared/GenID';\n\nclass RhymeModal extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.distribute = arr => {\n      let columns = {\n        one: [],\n        two: [],\n        three: [],\n        four: []\n      };\n\n      while (arr.length > 0) {\n        columns.one.push(arr.pop().word);\n\n        if (arr.length === 0) {\n          return columns;\n        }\n\n        columns.two.push(arr.pop().word);\n\n        if (arr.length === 0) {\n          return columns;\n        }\n\n        columns.three.push(arr.pop().word);\n\n        if (arr.length === 0) {\n          return columns;\n        }\n\n        columns.four.push(arr.pop().word);\n      }\n\n      return columns;\n    };\n\n    this.copyAndShowNotification = word => {\n      // copy to clipboard\n      copy(word);\n      let allNotifications = document.getElementsByClassName('notification');\n\n      for (let item of allNotifications) {\n        item.classList.remove('show-copy-notification');\n      }\n\n      let notification = document.getElementById(\"\".concat(word, \"-notification\"));\n      notification.classList.add('show-copy-notification');\n    };\n\n    this.removeShowNotificationClass = word => {\n      let notification = document.getElementById(\"\".concat(word, \"-notification\"));\n      notification.classList.remove('show-copy-notification');\n    };\n  }\n\n  render() {\n    // rhyme arra y\n    let rhymeArray = [...this.props.rhymeJSON];\n    let content = this.distribute(rhymeArray);\n    let theWords = [];\n\n    for (let lineNumber in content) {\n      theWords.push(React.createElement(\"div\", {\n        className: \"column\",\n        id: \"column-\".concat(lineNumber),\n        key: GenID(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, content[lineNumber].map(word => {\n        return React.createElement(\"div\", {\n          className: \"rhyme-word\",\n          id: word,\n          onClick: () => this.copyAndShowNotification(word),\n          key: GenID(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"notification\",\n          id: \"\".concat(word, \"-notification\"),\n          onAnimationEnd: () => this.removeShowNotificationClass(word),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          id: \"notification-tail\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }), \"Copied to clipboard!\"), word);\n      })));\n    }\n\n    let bodyContent = React.createElement(\"div\", {\n      id: \"rhyme-sugg-modal-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-close\",\n      id: \"close-rhyme-sugg-modal\",\n      onClick: () => this.props.toggleModal('showrhymeJSON', false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"suggestions-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"sorry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Sorry fam, nothing for '\", React.createElement(\"span\", {\n      id: \"wrong-word\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, this.props.theWord), \"'.\")));\n\n    if (this.props.rhymeJSON.length !== 0) {\n      bodyContent = React.createElement(\"div\", {\n        className: \"rhyme-modal-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"close-rhyme-modal-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-close\",\n        id: \"close-rhyme-modal\",\n        onClick: () => this.props.toggleModal('showrhymeJSON', false),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"toolkit-modal\",\n        id: \"rhyme-modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"word-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, this.props.theWord), React.createElement(\"div\", {\n        id: \"line-divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"columns-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, theWords)));\n    }\n\n    return React.createElement(\"div\", {\n      id: \"rhyme-modal-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"rhyme-modal-backdrop\",\n      onClick: () => this.props.toggleModal('showrhymeJSON', false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"body-content-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, bodyContent));\n  }\n\n}\n\nexport default RhymeModal;","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/components/Scribble/Toolkit/RhymeModal/RhymeModal.js"],"names":["React","Component","copy","GenID","RhymeModal","distribute","arr","columns","one","two","three","four","length","push","pop","word","copyAndShowNotification","allNotifications","document","getElementsByClassName","item","classList","remove","notification","getElementById","add","removeShowNotificationClass","render","rhymeArray","props","rhymeJSON","content","theWords","lineNumber","map","bodyContent","toggleModal","theWord"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport copy from 'clipboard-copy'\nimport './RhymeModal.css'\nimport GenID from '../../../../shared/GenID'\n\nclass RhymeModal extends Component {\n\n    distribute = (arr) => {\n\n        let columns = {\n            one: [],\n            two: [],\n            three: [],\n            four: [],\n        }\n        while (arr.length > 0) {\n\n            columns.one.push(arr.pop().word)\n            if (arr.length === 0) { return columns }\n            columns.two.push(arr.pop().word)\n            if (arr.length === 0) { return columns }\n            columns.three.push(arr.pop().word)\n            if (arr.length === 0) { return columns }\n            columns.four.push(arr.pop().word)\n        }\n        return columns\n    }\n\n\n\n    copyAndShowNotification = (word) => {\n        // copy to clipboard\n        copy(word)\n\n        let allNotifications = document.getElementsByClassName('notification')\n        for (let item of allNotifications) {\n            item.classList.remove('show-copy-notification')\n        }\n\n\n        let notification = document.getElementById(`${word}-notification`)\n        notification.classList.add('show-copy-notification')\n    }\n\n    removeShowNotificationClass = (word) => {\n        let notification = document.getElementById(`${word}-notification`)\n        notification.classList.remove('show-copy-notification')\n    }\n\n    render() {\n\n\n\n        // rhyme arra y\n        let rhymeArray = [...this.props.rhymeJSON]\n        let content = this.distribute(rhymeArray)\n        let theWords = []\n        for (let lineNumber in content) {\n            theWords.push((\n                <div className='column' id={`column-${lineNumber}`} key={GenID()}>\n                    {content[lineNumber].map(word => {\n                        return (\n                            <div className=\"rhyme-word\" id={word} onClick={() => this.copyAndShowNotification(word)} key={GenID()}>\n                                <div className=\"notification\" id={`${word}-notification`} onAnimationEnd={() => this.removeShowNotificationClass(word)}>\n                                    <div id={`notification-tail`}></div>\n                                    Copied to clipboard!\n                                        </div>\n                                {word}\n                            </div>\n                        )\n                    })}\n                </div>\n            ))\n        }\n\n\n\n        let bodyContent = (\n            <div id=\"rhyme-sugg-modal-body\">\n                <i className=\"fa fa-close\" id=\"close-rhyme-sugg-modal\" onClick={() => this.props.toggleModal('showrhymeJSON', false)}></i>\n                <div id=\"suggestions-wrapper\">\n                    <div id=\"sorry\">Sorry fam, nothing for '<span id='wrong-word'>{this.props.theWord}</span>'.</div>\n                </div>\n            </div>\n        )\n        if (this.props.rhymeJSON.length !== 0) {\n            bodyContent = (\n                <div className='rhyme-modal-container'>\n                    <div id='close-rhyme-modal-wrapper'>\n                        <i className=\"fa fa-close\" id=\"close-rhyme-modal\" onClick={() => this.props.toggleModal('showrhymeJSON', false)}></i>\n                    </div>\n                    <div className='toolkit-modal' id=\"rhyme-modal-body\">\n                        <div id=\"word-title\">{this.props.theWord}</div>\n                        <div id=\"line-divider\"></div>\n                        <div className='columns-container'>\n                            {theWords}\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n\n\n\n        return (\n            <div id='rhyme-modal-wrapper'>\n                <div id=\"rhyme-modal-backdrop\" onClick={() => this.props.toggleModal('showrhymeJSON', false)}></div>\n                <div id=\"body-content-wrapper\">\n\n                    {bodyContent}\n                </div>\n            </div>\n        )\n    }\n}\nexport default RhymeModal"]},"metadata":{},"sourceType":"module"}