{"ast":null,"code":"import _defineProperty from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/containers/Authenticate/SignIn/SignIn.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport firebase from '../../../Firebase';\nimport { connect } from 'react-redux';\nimport { fetchUserData } from '../../../store/actionCreators';\nimport validator from 'validator';\nimport './SignIn.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport ForgotPassword from './ForgotPassword/ForgotPassword';\nimport DotSpinner from '../../../shared/DotSpinner/DotSpinner';\n\nclass SignIn extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userInput: '',\n      passInput: '',\n      loading: false,\n      badInput: '',\n      showForgotPassword: false,\n      processing: false\n    };\n\n    this.toggleProcessing = bool => {\n      this.setState(_objectSpread({}, this.state, {\n        processing: bool\n      }));\n    };\n\n    this.authenticate = async (userInput, passInput) => {\n      return await firebase.auth().signInWithEmailAndPassword(userInput, passInput).then(successObj => {\n        // now's date\n        var expirationDate = new Date(); // now's date + 1 hour\n\n        expirationDate.setHours(expirationDate.getHours() + 12);\n        localStorage.setItem('token', successObj.user.refreshToken);\n        localStorage.setItem('expirationDate', expirationDate);\n        localStorage.setItem('uid', successObj.user.uid);\n        return successObj.user.uid;\n      }).catch(function (error) {\n        console.log(error);\n        throw error;\n      });\n    };\n\n    this.toggleModal = (event, modal, bool) => {\n      event.preventDefault();\n      this.setState(_objectSpread({}, this.state, {\n        [modal]: bool\n      }));\n    };\n\n    this.formIsValid = () => {\n      if (!this.state.userInput || this.state.passInput.length < 6) {\n        return false;\n      }\n\n      if (!validator.isEmail(this.state.userInput)) {\n        return false;\n      }\n\n      return true;\n    };\n  }\n\n  userInputHandler(event) {\n    this.setState(_objectSpread({}, this.state, {\n      userInput: event.target.value\n    }));\n  }\n\n  passInputHandler(event) {\n    this.setState(_objectSpread({}, this.state, {\n      passInput: event.target.value\n    }));\n  }\n\n  async signInHandler(event) {\n    event.preventDefault();\n    this.toggleProcessing(true);\n\n    try {\n      const uid = await this.authenticate(this.state.userInput, this.state.passInput);\n      this.props.getUserData(uid);\n      this.toggleProcessing(false);\n    } catch (err) {\n      console.log(err.code);\n\n      switch (err.code) {\n        case 'auth/invalid-email':\n          this.props.loginErrMsgHandler(err.message, false);\n          this.setBadInput('email');\n          break;\n\n        case \"auth/too-many-requests\":\n          var errMsg = \"Too many unsuccessful login attempts. Please try again later.\";\n          this.props.loginErrMsgHandler(errMsg, false);\n          this.setBadInput('password');\n          break;\n\n        case 'auth/user-not-found':\n          this.props.loginErrMsgHandler(err.message, false);\n          this.setBadInput('email');\n          break;\n\n        case 'auth/wrong-password':\n          this.props.loginErrMsgHandler(err.message, false);\n          this.setBadInput('password');\n          break;\n\n        default:\n          console.log('default!');\n      }\n\n      this.toggleProcessing(false);\n    }\n  }\n\n  setBadInput(input) {\n    this.setState(_objectSpread({}, this.state, {\n      badInput: input\n    }));\n  }\n\n  render() {\n    var formIsValid = this.formIsValid();\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, this.state.showForgotPassword ? React.createElement(ForgotPassword, {\n      toggleModal: this.toggleModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }) : null, React.createElement(\"form\", {\n      className: \"LoginContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, this.state.processing ? React.createElement(DotSpinner, {\n      id: \"sign-dot-spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }) : null, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Login\"), React.createElement(\"input\", {\n      className: this.state.badInput === 'email' ? 'Username-badInput' : '',\n      type: \"email\",\n      placeholder: 'email',\n      vaxlue: this.state.userInput,\n      autoCorrect: \"off\",\n      spellCheck: \"false\",\n      autoComplete: \"off\",\n      onChange: event => this.userInputHandler(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: this.state.badInput === 'password' ? 'Password-BadInput' : '',\n      type: \"password\",\n      placeholder: 'password',\n      spellCheck: \"false\",\n      autoCorrect: \"off\",\n      value: this.state.passInput,\n      onChange: event => this.passInputHandler(event),\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: formIsValid && !this.state.processing ? 'AuthButton' : '',\n      onClick: event => this.signInHandler(event),\n      disabled: !formIsValid || this.state.processing,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Login\"), React.createElement(\"div\", {\n      className: \"BottomButtons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"register\",\n      onClick: event => this.props.toggleProcess('signup', event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Register\"), \" |\", React.createElement(\"button\", {\n      id: \"forgotPassword\",\n      onClick: event => this.toggleModal(event, 'showForgotPassword', true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Forgot Password\"))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getUserData: uid => dispatch(fetchUserData(uid))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/containers/Authenticate/SignIn/SignIn.js"],"names":["React","Component","firebase","connect","fetchUserData","validator","Spinner","ForgotPassword","DotSpinner","SignIn","state","userInput","passInput","loading","badInput","showForgotPassword","processing","toggleProcessing","bool","setState","authenticate","auth","signInWithEmailAndPassword","then","successObj","expirationDate","Date","setHours","getHours","localStorage","setItem","user","refreshToken","uid","catch","error","console","log","toggleModal","event","modal","preventDefault","formIsValid","length","isEmail","userInputHandler","target","value","passInputHandler","signInHandler","props","getUserData","err","code","loginErrMsgHandler","message","setBadInput","errMsg","input","render","bind","toggleProcess","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport firebase from '../../../Firebase'\nimport { connect } from 'react-redux'\nimport { fetchUserData } from '../../../store/actionCreators'\nimport validator from 'validator'\nimport './SignIn.css'\nimport Spinner from '../../../components/UI/Spinner/Spinner'\nimport ForgotPassword from './ForgotPassword/ForgotPassword'\nimport DotSpinner from '../../../shared/DotSpinner/DotSpinner'\n\nclass SignIn extends Component {\n\n    state = {\n        userInput: '',\n        passInput: '',\n        loading: false,\n        badInput: '',\n        showForgotPassword: false,\n        processing: false\n    }\n\n    toggleProcessing = (bool) => {\n        this.setState({\n            ...this.state,\n            processing: bool\n        })\n    }\n\n    userInputHandler(event) {\n        this.setState({\n            ...this.state,\n            userInput: event.target.value\n        })\n    }\n\n    passInputHandler(event) {\n        this.setState({\n            ...this.state,\n            passInput: event.target.value,\n        })\n    }\n\n    async signInHandler(event) {\n\n        event.preventDefault()\n        this.toggleProcessing(true)\n        try {\n            const uid = await this.authenticate(this.state.userInput, this.state.passInput)\n            this.props.getUserData(uid)\n            this.toggleProcessing(false)\n        }\n        catch (err) {\n            console.log(err.code)\n            switch (err.code) {\n                case 'auth/invalid-email':\n                    this.props.loginErrMsgHandler(err.message, false)\n                    this.setBadInput('email')\n                    break;\n                case \"auth/too-many-requests\":\n                    var errMsg = \"Too many unsuccessful login attempts. Please try again later.\"\n                    this.props.loginErrMsgHandler(errMsg, false)\n                    this.setBadInput('password')\n                    break;\n                case 'auth/user-not-found':\n                    this.props.loginErrMsgHandler(err.message, false)\n                    this.setBadInput('email')\n                    break;\n                case 'auth/wrong-password':\n                    this.props.loginErrMsgHandler(err.message, false)\n                    this.setBadInput('password')\n                    break;\n                default:\n                    console.log('default!')\n            }\n            this.toggleProcessing(false)\n        }\n    }\n\n    setBadInput(input) {\n        this.setState({\n            ...this.state,\n            badInput: input\n        })\n    }\n\n    authenticate = async (userInput, passInput) => {\n\n        return await firebase.auth().signInWithEmailAndPassword(userInput, passInput)\n            .then(successObj => {\n                // now's date\n                var expirationDate = new Date()\n                // now's date + 1 hour\n                expirationDate.setHours(expirationDate.getHours() + 12)\n                localStorage.setItem('token', successObj.user.refreshToken)\n                localStorage.setItem('expirationDate', expirationDate)\n                localStorage.setItem('uid', successObj.user.uid)\n                return successObj.user.uid\n\n            })\n            .catch(function (error) {\n                console.log(error)\n                throw error\n            });\n    }\n\n\n    toggleModal = (event, modal, bool) => {\n        event.preventDefault()\n        this.setState({\n            ...this.state,\n            [modal]: bool\n        })\n    }\n\n    formIsValid = () => {\n        if (!this.state.userInput || this.state.passInput.length < 6) { return false }\n        if (!validator.isEmail(this.state.userInput)) { return false }\n        return true\n    }\n\n    render() {\n\n        var formIsValid = this.formIsValid()\n\n        return (\n            <div>\n                {this.state.showForgotPassword ? <ForgotPassword toggleModal={this.toggleModal.bind(this)} /> : null}\n                <form className=\"LoginContainer\">\n                    {this.state.processing ? <DotSpinner id='sign-dot-spinner' /> : null}\n\n                    <h1>Login</h1>\n                    <input\n                        className={this.state.badInput === 'email' ? 'Username-badInput' : ''}\n                        type=\"email\"\n                        placeholder={'email'}\n                        vaxlue={this.state.userInput}\n                        autoCorrect=\"off\"\n                        spellCheck='false'\n                        autoComplete=\"off\"\n                        onChange={(event) => this.userInputHandler(event)}></input>\n                    <input\n                        className={this.state.badInput === 'password' ? 'Password-BadInput' : ''}\n                        type=\"password\"\n                        placeholder={'password'}\n                        spellCheck='false'\n                        autoCorrect=\"off\"\n                        value={this.state.passInput}\n                        onChange={event => this.passInputHandler(event)}\n                        autoComplete=\"off\"></input>\n                    <button className={formIsValid && !this.state.processing ? 'AuthButton' : ''} onClick={event => this.signInHandler(event)} disabled={!formIsValid || this.state.processing}>Login</button>\n                    <div className=\"BottomButtons\">\n                        <button id=\"register\" onClick={event => this.props.toggleProcess('signup', event)}>Register</button> |\n                    <button id=\"forgotPassword\" onClick={(event) => this.toggleModal(event, 'showForgotPassword', true)}>Forgot Password</button>\n                    </div>\n                </form>\n\n            </div>\n        )\n\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getUserData: (uid) => dispatch(fetchUserData(uid))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(SignIn)\n"]},"metadata":{},"sourceType":"module"}