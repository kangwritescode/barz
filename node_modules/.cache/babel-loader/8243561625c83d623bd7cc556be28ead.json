{"ast":null,"code":"import _defineProperty from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase';\n\nconst fetchPosts = setter => {\n  var db = firebase.firestore();\n  const listener = db.collection('submissions').onSnapshot(snapshot => {\n    const fetchedPosts = [];\n    snapshot.forEach(doc => {\n      fetchedPosts.push(_objectSpread({}, doc.data(), {\n        pid: doc.id\n      }));\n    });\n    setter(fetchedPosts);\n  });\n  return listener;\n};\n\nconst fetchVotes = setter => {\n  var db = firebase.firestore();\n  const listener = db.collection('postVotes').onSnapshot(snapshot => {\n    console.log('votes listener detected a change');\n    var fetchedVote;\n    var fetchedVotes = [];\n    snapshot.forEach(vote => {\n      fetchedVote = _objectSpread({}, vote.data(), {\n        vid: vote.id\n      });\n      fetchedVotes.push(fetchedVote);\n    });\n    setter(fetchedVotes);\n  });\n  return listener;\n};\n\nconst fetchFollows = setter => {\n  const db = firebase.firestore();\n  const listener = db.collection('follows').onSnapshot(snapshot => {\n    var fetchedFollows = [];\n    snapshot.forEach(doc => {\n      fetchedFollows.push(doc.data());\n    });\n    setter(fetchedFollows);\n  }, err => console.log(err));\n  return listener;\n};\n\nconst fetchSubmissionComments = setter => {\n  const db = firebase.firestore();\n  const listener = db.collection('postComments').onSnapshot(snapshot => {\n    var comments = [];\n\n    for (var comment of snapshot.docs) {\n      comment = _objectSpread({}, comment.data(), {\n        cid: comment.id\n      });\n      comments.push(comment);\n    }\n\n    setter(comments);\n  });\n  return listener;\n};\n\nexport default {\n  allPostsListener: fetchPosts,\n  allVotesListener: fetchVotes,\n  allFollowsListener: fetchFollows,\n  allSubmissionCommentsListener: fetchSubmissionComments\n};","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/FireApi/FireApi.js"],"names":["firebase","fetchPosts","setter","db","firestore","listener","collection","onSnapshot","snapshot","fetchedPosts","forEach","doc","push","data","pid","id","fetchVotes","console","log","fetchedVote","fetchedVotes","vote","vid","fetchFollows","fetchedFollows","err","fetchSubmissionComments","comments","comment","docs","cid","allPostsListener","allVotesListener","allFollowsListener","allSubmissionCommentsListener"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,UAArB;;AAEA,MAAMC,UAAU,GAAIC,MAAD,IAAY;AAC3B,MAAIC,EAAE,GAAGH,QAAQ,CAACI,SAAT,EAAT;AACA,QAAMC,QAAQ,GAAGF,EAAE,CAACG,UAAH,CAAc,aAAd,EAA6BC,UAA7B,CAAwCC,QAAQ,IAAI;AACjE,UAAMC,YAAY,GAAG,EAArB;AACAD,IAAAA,QAAQ,CAACE,OAAT,CAAiBC,GAAG,IAAI;AACpBF,MAAAA,YAAY,CAACG,IAAb,mBACOD,GAAG,CAACE,IAAJ,EADP;AAEIC,QAAAA,GAAG,EAAEH,GAAG,CAACI;AAFb;AAIH,KALD;AAMAb,IAAAA,MAAM,CAACO,YAAD,CAAN;AACH,GATgB,CAAjB;AAUA,SAAOJ,QAAP;AACH,CAbD;;AAgBA,MAAMW,UAAU,GAAId,MAAD,IAAY;AAC3B,MAAIC,EAAE,GAAGH,QAAQ,CAACI,SAAT,EAAT;AACA,QAAMC,QAAQ,GAAGF,EAAE,CAACG,UAAH,CAAc,WAAd,EAA2BC,UAA3B,CAAsCC,QAAQ,IAAI;AAC/DS,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACA,QAAIC,WAAJ;AACA,QAAIC,YAAY,GAAG,EAAnB;AACAZ,IAAAA,QAAQ,CAACE,OAAT,CAAiBW,IAAI,IAAI;AACrBF,MAAAA,WAAW,qBACJE,IAAI,CAACR,IAAL,EADI;AAEPS,QAAAA,GAAG,EAAED,IAAI,CAACN;AAFH,QAAX;AAIAK,MAAAA,YAAY,CAACR,IAAb,CAAkBO,WAAlB;AACH,KAND;AAOAjB,IAAAA,MAAM,CAACkB,YAAD,CAAN;AACH,GAZgB,CAAjB;AAaA,SAAOf,QAAP;AACH,CAhBD;;AAiBA,MAAMkB,YAAY,GAAIrB,MAAD,IAAY;AAC7B,QAAMC,EAAE,GAAGH,QAAQ,CAACI,SAAT,EAAX;AACA,QAAMC,QAAQ,GAAGF,EAAE,CAACG,UAAH,CAAc,SAAd,EAAyBC,UAAzB,CAAoCC,QAAQ,IAAI;AAC7D,QAAIgB,cAAc,GAAG,EAArB;AACAhB,IAAAA,QAAQ,CAACE,OAAT,CAAiBC,GAAG,IAAI;AACpBa,MAAAA,cAAc,CAACZ,IAAf,CAAoBD,GAAG,CAACE,IAAJ,EAApB;AACH,KAFD;AAGAX,IAAAA,MAAM,CAACsB,cAAD,CAAN;AACH,GANgB,EAMdC,GAAG,IAAIR,OAAO,CAACC,GAAR,CAAYO,GAAZ,CANO,CAAjB;AAOA,SAAOpB,QAAP;AACH,CAVD;;AAYA,MAAMqB,uBAAuB,GAAIxB,MAAD,IAAY;AACxC,QAAMC,EAAE,GAAGH,QAAQ,CAACI,SAAT,EAAX;AACA,QAAMC,QAAQ,GAAGF,EAAE,CAACG,UAAH,CAAc,cAAd,EAA8BC,UAA9B,CAA0CC,QAAD,IAAc;AACpE,QAAImB,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIC,OAAT,IAAoBpB,QAAQ,CAACqB,IAA7B,EAAmC;AAC/BD,MAAAA,OAAO,qBACAA,OAAO,CAACf,IAAR,EADA;AAEHiB,QAAAA,GAAG,EAAEF,OAAO,CAACb;AAFV,QAAP;AAIAY,MAAAA,QAAQ,CAACf,IAAT,CAAcgB,OAAd;AACH;;AACD1B,IAAAA,MAAM,CAACyB,QAAD,CAAN;AACH,GAVgB,CAAjB;AAWA,SAAOtB,QAAP;AACH,CAdD;;AAgBA,eAAe;AACX0B,EAAAA,gBAAgB,EAAE9B,UADP;AAEX+B,EAAAA,gBAAgB,EAAEhB,UAFP;AAGXiB,EAAAA,kBAAkB,EAAEV,YAHT;AAIXW,EAAAA,6BAA6B,EAAER;AAJpB,CAAf","sourcesContent":["import firebase from 'firebase'\n\nconst fetchPosts = (setter) => {\n    var db = firebase.firestore()\n    const listener = db.collection('submissions').onSnapshot(snapshot => {\n        const fetchedPosts = []\n        snapshot.forEach(doc => {\n            fetchedPosts.push({\n                ...doc.data(),\n                pid: doc.id\n            })\n        })\n        setter(fetchedPosts)\n    })\n    return listener\n}\n\n    \nconst fetchVotes = (setter) => {\n    var db = firebase.firestore()\n    const listener = db.collection('postVotes').onSnapshot(snapshot => {\n        console.log('votes listener detected a change')\n        var fetchedVote;\n        var fetchedVotes = []\n        snapshot.forEach(vote => {\n            fetchedVote = {\n                ...vote.data(),\n                vid: vote.id\n            }\n            fetchedVotes.push(fetchedVote)\n        })\n        setter(fetchedVotes)\n    })\n    return listener\n}\nconst fetchFollows = (setter) => {\n    const db = firebase.firestore()\n    const listener = db.collection('follows').onSnapshot(snapshot => {\n        var fetchedFollows = []\n        snapshot.forEach(doc => {\n            fetchedFollows.push(doc.data())\n        })\n        setter(fetchedFollows)\n    }, err => console.log(err))\n    return listener\n}\n\nconst fetchSubmissionComments = (setter) => {\n    const db = firebase.firestore()\n    const listener = db.collection('postComments').onSnapshot((snapshot) => {\n        var comments = []\n        for (var comment of snapshot.docs) {\n            comment = {\n                ...comment.data(),\n                cid: comment.id\n            }\n            comments.push(comment)\n        }\n        setter(comments)\n    })\n    return listener\n}\n\nexport default {\n    allPostsListener: fetchPosts,\n    allVotesListener: fetchVotes,\n    allFollowsListener: fetchFollows,\n    allSubmissionCommentsListener: fetchSubmissionComments\n}"]},"metadata":{},"sourceType":"module"}