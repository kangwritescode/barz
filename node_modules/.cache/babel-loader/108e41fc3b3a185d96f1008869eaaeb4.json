{"ast":null,"code":"import _defineProperty from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/containers/Landing/ForgotPassword/ForgotPassword.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport './ForgotPassword.css';\nimport passIcon from '../../../assets/images/pass-icon.png';\nimport firebase from 'firebase';\nimport validator from 'validator';\nimport DotSpinner from '../../../components/DotSpinner/DotSpinner';\n\nclass ForgotPassword extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      emailInput: '',\n      showNotification: false,\n      notificationMsg: 'Initial Notification Message',\n      errStyle: null,\n      notificationStyle: null,\n      processing: false\n    };\n\n    this.toggleProcessing = bool => {\n      this.setState(_objectSpread({}, this.state, {\n        processing: bool\n      }));\n    };\n\n    this.emailInputHandler = event => {\n      this.setState(_objectSpread({}, this.state, {\n        emailInput: event.target.value\n      }));\n    };\n\n    this.requestPassReset = event => {\n      event.preventDefault();\n      this.toggleProcessing(true);\n      var auth = firebase.auth();\n      auth.sendPasswordResetEmail(this.state.emailInput).then(() => {\n        this.setState(_objectSpread({}, this.state, {\n          showNotification: true,\n          notificationMsg: 'Password Reset Link Sent!',\n          emailInput: '',\n          errStyle: null,\n          processing: false,\n          notificationStyle: {\n            backgroundColor: 'rgba(0, 65, 3, 0.5)'\n          }\n        }));\n      }).catch(err => {\n        this.toggleProcessing(false);\n        var msg = err.message;\n        this.setState(_objectSpread({}, this.state, {\n          showNotification: true,\n          notificationMsg: msg,\n          processing: false,\n          notificationStyle: {\n            backgroundColor: 'rgba(112, 0, 0, 0.5)'\n          }\n        }));\n      });\n    };\n\n    this.closeNotificationMsg = () => {\n      this.setState(_objectSpread({}, this.state, {\n        showNotification: false\n      }));\n    };\n\n    this.isValidEmail = () => {\n      return validator.isEmail(this.state.emailInput);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"forgot-password-backdrop\",\n      onClick: event => this.props.toggleForgotPass(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      id: \"forgot-password-modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-close\",\n      id: \"forgot-pass-x\",\n      onClick: event => this.props.toggleForgotPass(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), this.state.processing ? React.createElement(DotSpinner, {\n      id: 'forgot-pass-dot',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }) : null, this.state.showNotification ? React.createElement(\"div\", {\n      className: \"forgot-pass-notification\",\n      onAnimationEnd: this.closeNotificationMsg,\n      style: this.state.notificationStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.state.notificationMsg) : null, React.createElement(\"img\", {\n      id: \"pass-icon\",\n      src: passIcon,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Reset Password\"), React.createElement(\"h5\", {\n      id: \"dont-remember\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Don't remember your password? We'll send you a reset link to your email.\"), React.createElement(\"input\", {\n      className: \"pass-reset-input\",\n      type: \"email\",\n      placeholder: \"email\",\n      value: this.state.emailInput,\n      onChange: this.emailInputHandler,\n      style: this.state.errStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"passResetBtn \".concat(this.isValidEmail() && !this.state.processing ? '' : 'forgot-pass-invalid'),\n      onClick: this.requestPassReset,\n      disabled: !this.isValidEmail() || this.state.processing ? true : false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Send Reset\")));\n  }\n\n}\n\nexport default ForgotPassword;","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/containers/Landing/ForgotPassword/ForgotPassword.js"],"names":["React","Component","passIcon","firebase","validator","DotSpinner","ForgotPassword","state","emailInput","showNotification","notificationMsg","errStyle","notificationStyle","processing","toggleProcessing","bool","setState","emailInputHandler","event","target","value","requestPassReset","preventDefault","auth","sendPasswordResetEmail","then","backgroundColor","catch","err","msg","message","closeNotificationMsg","isValidEmail","isEmail","render","props","toggleForgotPass"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,sBAAP;AACA,OAAOC,QAAP,MAAqB,sCAArB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,UAAP,MAAuB,2CAAvB;;AAEA,MAAMC,cAAN,SAA6BL,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAEnCM,KAFmC,GAE3B;AACJC,MAAAA,UAAU,EAAE,EADR;AAEJC,MAAAA,gBAAgB,EAAE,KAFd;AAGJC,MAAAA,eAAe,EAAE,8BAHb;AAIJC,MAAAA,QAAQ,EAAE,IAJN;AAKJC,MAAAA,iBAAiB,EAAE,IALf;AAMJC,MAAAA,UAAU,EAAE;AANR,KAF2B;;AAAA,SAUnCC,gBAVmC,GAUfC,IAAD,IAAU;AACzB,WAAKC,QAAL,mBACO,KAAKT,KADZ;AAEIM,QAAAA,UAAU,EAAEE;AAFhB;AAIH,KAfkC;;AAAA,SAiBnCE,iBAjBmC,GAiBfC,KAAK,IAAI;AACzB,WAAKF,QAAL,mBACO,KAAKT,KADZ;AAEIC,QAAAA,UAAU,EAAEU,KAAK,CAACC,MAAN,CAAaC;AAF7B;AAIH,KAtBkC;;AAAA,SAwBnCC,gBAxBmC,GAwBfH,KAAD,IAAW;AAC1BA,MAAAA,KAAK,CAACI,cAAN;AACA,WAAKR,gBAAL,CAAsB,IAAtB;AACA,UAAIS,IAAI,GAAGpB,QAAQ,CAACoB,IAAT,EAAX;AACAA,MAAAA,IAAI,CAACC,sBAAL,CAA4B,KAAKjB,KAAL,CAAWC,UAAvC,EACKiB,IADL,CACU,MAAM;AAER,aAAKT,QAAL,mBACO,KAAKT,KADZ;AAEIE,UAAAA,gBAAgB,EAAE,IAFtB;AAGIC,UAAAA,eAAe,EAAE,2BAHrB;AAIIF,UAAAA,UAAU,EAAE,EAJhB;AAKIG,UAAAA,QAAQ,EAAE,IALd;AAMIE,UAAAA,UAAU,EAAE,KANhB;AAOID,UAAAA,iBAAiB,EAAE;AAAEc,YAAAA,eAAe,EAAE;AAAnB;AAPvB;AAUH,OAbL,EAcKC,KAdL,CAcWC,GAAG,IAAI;AACV,aAAKd,gBAAL,CAAsB,KAAtB;AACA,YAAIe,GAAG,GAAGD,GAAG,CAACE,OAAd;AACA,aAAKd,QAAL,mBACO,KAAKT,KADZ;AAEIE,UAAAA,gBAAgB,EAAE,IAFtB;AAGIC,UAAAA,eAAe,EAAEmB,GAHrB;AAIIhB,UAAAA,UAAU,EAAE,KAJhB;AAKID,UAAAA,iBAAiB,EAAE;AAAEc,YAAAA,eAAe,EAAE;AAAnB;AALvB;AAOH,OAxBL;AAyBH,KArDkC;;AAAA,SAuDnCK,oBAvDmC,GAuDZ,MAAM;AACzB,WAAKf,QAAL,mBACO,KAAKT,KADZ;AAEIE,QAAAA,gBAAgB,EAAE;AAFtB;AAIH,KA5DkC;;AAAA,SA6DnCuB,YA7DmC,GA6DpB,MAAM;AACjB,aAAO5B,SAAS,CAAC6B,OAAV,CAAkB,KAAK1B,KAAL,CAAWC,UAA7B,CAAP;AACH,KA/DkC;AAAA;;AAiEnC0B,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,0BAAf;AAA0C,MAAA,OAAO,EAAGhB,KAAD,IAAW,KAAKiB,KAAL,CAAWC,gBAAX,CAA4B,KAA5B,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAM,MAAA,EAAE,EAAC,uBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAC,aAAb;AAA2B,MAAA,EAAE,EAAC,eAA9B;AAA8C,MAAA,OAAO,EAAGlB,KAAD,IAAW,KAAKiB,KAAL,CAAWC,gBAAX,CAA4B,KAA5B,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEK,KAAK7B,KAAL,CAAWM,UAAX,GAAwB,oBAAC,UAAD;AAAY,MAAA,EAAE,EAAE,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAxB,GAAgE,IAFrE,EAGK,KAAKN,KAAL,CAAWE,gBAAX,GACO;AAAK,MAAA,SAAS,EAAC,0BAAf;AACK,MAAA,cAAc,EAAE,KAAKsB,oBAD1B;AAEK,MAAA,KAAK,EAAE,KAAKxB,KAAL,CAAWK,iBAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGS,KAAKL,KAAL,CAAWG,eAHpB,CADP,GAMO,IATZ,EAUI;AAAK,MAAA,EAAE,EAAC,WAAR;AAAoB,MAAA,GAAG,EAAER,QAAzB;AAAmC,MAAA,GAAG,EAAC,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVJ,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAXJ,EAYI;AAAI,MAAA,EAAE,EAAC,eAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kFAZJ,EAaI;AACI,MAAA,SAAS,EAAC,kBADd;AAEI,MAAA,IAAI,EAAC,OAFT;AAGI,MAAA,WAAW,EAAC,OAHhB;AAII,MAAA,KAAK,EAAE,KAAKK,KAAL,CAAWC,UAJtB;AAKI,MAAA,QAAQ,EAAE,KAAKS,iBALnB;AAMI,MAAA,KAAK,EAAE,KAAKV,KAAL,CAAWI,QANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbJ,EAqBI;AACI,MAAA,SAAS,yBAAkB,KAAKqB,YAAL,MAAuB,CAAC,KAAKzB,KAAL,CAAWM,UAAnC,GAAgD,EAAhD,GAAqD,qBAAvE,CADb;AAEI,MAAA,OAAO,EAAE,KAAKQ,gBAFlB;AAGI,MAAA,QAAQ,EAAE,CAAC,KAAKW,YAAL,EAAD,IAAwB,KAAKzB,KAAL,CAAWM,UAAnC,GAAgD,IAAhD,GAAuD,KAHrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBArBJ,CAFJ,CADJ;AAmCH;;AArGkC;;AAwGvC,eAAeP,cAAf","sourcesContent":["import React, { Component } from 'react'\nimport './ForgotPassword.css'\nimport passIcon from '../../../assets/images/pass-icon.png'\nimport firebase from 'firebase'\nimport validator from 'validator'\nimport DotSpinner from '../../../components/DotSpinner/DotSpinner'\n\nclass ForgotPassword extends Component {\n\n    state = {\n        emailInput: '',\n        showNotification: false,\n        notificationMsg: 'Initial Notification Message',\n        errStyle: null,\n        notificationStyle: null,\n        processing: false\n    }\n    toggleProcessing = (bool) => {\n        this.setState({\n            ...this.state,\n            processing: bool\n        })\n    }\n\n    emailInputHandler = event => {\n        this.setState({\n            ...this.state,\n            emailInput: event.target.value\n        })\n    }\n\n    requestPassReset = (event) => {\n        event.preventDefault()\n        this.toggleProcessing(true)\n        var auth = firebase.auth()\n        auth.sendPasswordResetEmail(this.state.emailInput)\n            .then(() => {\n\n                this.setState({\n                    ...this.state,\n                    showNotification: true,\n                    notificationMsg: 'Password Reset Link Sent!',\n                    emailInput: '',\n                    errStyle: null,\n                    processing: false,\n                    notificationStyle: { backgroundColor: 'rgba(0, 65, 3, 0.5)' }\n\n                })\n            })\n            .catch(err => {\n                this.toggleProcessing(false)\n                var msg = err.message\n                this.setState({\n                    ...this.state,\n                    showNotification: true,\n                    notificationMsg: msg,\n                    processing: false,\n                    notificationStyle: { backgroundColor: 'rgba(112, 0, 0, 0.5)' }\n                })\n            })\n    }\n\n    closeNotificationMsg = () => {\n        this.setState({\n            ...this.state,\n            showNotification: false\n        })\n    }\n    isValidEmail = () => {\n        return validator.isEmail(this.state.emailInput)\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"forgot-password-backdrop\" onClick={(event) => this.props.toggleForgotPass(false)} />\n                <form id=\"forgot-password-modal\">\n                    <i className=\"fa fa-close\" id=\"forgot-pass-x\" onClick={(event) => this.props.toggleForgotPass(false)}></i>\n                    {this.state.processing ? <DotSpinner id={'forgot-pass-dot'} /> : null}\n                    {this.state.showNotification ? \n                            <div className=\"forgot-pass-notification\"\n                                 onAnimationEnd={this.closeNotificationMsg}\n                                 style={this.state.notificationStyle}>\n                                    {this.state.notificationMsg}\n                            </div> : \n                            null}\n                    <img id=\"pass-icon\" src={passIcon} alt=''/>\n                    <h2>Reset Password</h2>\n                    <h5 id='dont-remember'>Don't remember your password? We'll send you a reset link to your email.</h5>\n                    <input\n                        className=\"pass-reset-input\"\n                        type=\"email\"\n                        placeholder=\"email\"\n                        value={this.state.emailInput}\n                        onChange={this.emailInputHandler}\n                        style={this.state.errStyle}>\n                    </input>\n                    <button\n                        className={`passResetBtn ${this.isValidEmail() && !this.state.processing ? '' : 'forgot-pass-invalid'}`}\n                        onClick={this.requestPassReset}\n                        disabled={!this.isValidEmail() || this.state.processing ? true : false}>\n\n                        Send Reset\n                        </button>\n                </form>\n            </div>\n\n        )\n    }\n}\n\nexport default ForgotPassword\n"]},"metadata":{},"sourceType":"module"}