{"ast":null,"code":"import * as actionTypes from './actionsTypes';\nimport firebase from '../../Firebase';\nimport 'firebase/firestore';\nlet db = firebase.firestore();\nexport const fetchUserData = uid => {\n  return dispatch => {\n    let docRef = db.collection(\"users/\").doc(uid);\n    docRef.get().then(doc => {\n      if (doc.exists) {\n        dispatch(setUserData(doc.data()));\n      } else {\n        console.log(\"No such document!\");\n      }\n    }).catch(function (error) {\n      console.log(\"Error getting document:\", error);\n    });\n  };\n};\nexport const setUserData = data => {\n  return {\n    type: actionTypes.SET_USER_DATA,\n    data: data\n  };\n};\nexport const postUserData = (uid, newInfo) => {\n  return dispatch => {\n    db.collection(\"users\").doc(uid).update(newInfo).then(function () {\n      console.log(\"Document successfully updated!\");\n      dispatch(setUserData(newInfo));\n    }).catch(function (error) {\n      console.error(\"Error updating document: \", error);\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      firebase.auth().signOut();\n      dispatch(logOut());\n    } else {\n      const expirationTime = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationTime < new Date()) {\n        firebase.auth().signOut();\n        dispatch(logOut());\n      } else {\n        const uid = localStorage.getItem('uid');\n        dispatch(fetchUserData(uid));\n      }\n    }\n  };\n};\nexport const logOut = () => {\n  return {\n    type: actionTypes.LOG_OUT\n  };\n};","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/store/actions/auth.js"],"names":["actionTypes","firebase","db","firestore","fetchUserData","uid","dispatch","docRef","collection","doc","get","then","exists","setUserData","data","console","log","catch","error","type","SET_USER_DATA","postUserData","newInfo","update","authCheckState","token","localStorage","getItem","auth","signOut","logOut","expirationTime","Date","LOG_OUT"],"mappings":"AACA,OAAO,KAAKA,WAAZ,MAA6B,gBAA7B;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAO,oBAAP;AACA,IAAIC,EAAE,GAAGD,QAAQ,CAACE,SAAT,EAAT;AAEA,OAAO,MAAMC,aAAa,GAAIC,GAAD,IAAS;AAClC,SAAOC,QAAQ,IAAI;AACf,QAAIC,MAAM,GAAGL,EAAE,CAACM,UAAH,WAAwBC,GAAxB,CAA4BJ,GAA5B,CAAb;AACAE,IAAAA,MAAM,CAACG,GAAP,GAAaC,IAAb,CAAmBF,GAAD,IAAS;AACvB,UAAIA,GAAG,CAACG,MAAR,EAAgB;AACZN,QAAAA,QAAQ,CAACO,WAAW,CAACJ,GAAG,CAACK,IAAJ,EAAD,CAAZ,CAAR;AACH,OAFD,MAEO;AACHC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH;AACJ,KAND,EAMGC,KANH,CAMS,UAAUC,KAAV,EAAiB;AACtBH,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCE,KAAvC;AACH,KARD;AASH,GAXD;AAYH,CAbM;AAeP,OAAO,MAAML,WAAW,GAAIC,IAAD,IAAU;AACjC,SAAO;AACHK,IAAAA,IAAI,EAAEnB,WAAW,CAACoB,aADf;AAC8BN,IAAAA,IAAI,EAAEA;AADpC,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMO,YAAY,GAAG,CAAChB,GAAD,EAAMiB,OAAN,KAAkB;AAC1C,SAAOhB,QAAQ,IAAI;AACfJ,IAAAA,EAAE,CAACM,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BJ,GAA3B,EAAgCkB,MAAhC,CAAuCD,OAAvC,EACKX,IADL,CACU,YAAY;AACdI,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAV,MAAAA,QAAQ,CAACO,WAAW,CAACS,OAAD,CAAZ,CAAR;AACH,KAJL,EAKKL,KALL,CAKW,UAAUC,KAAV,EAAiB;AACpBH,MAAAA,OAAO,CAACG,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;AACH,KAPL;AAQH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMM,cAAc,GAAG,MAAM;AAChC,SAAOlB,QAAQ,IAAI;AACf,UAAMmB,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAI,CAACF,KAAL,EAAY;AACRxB,MAAAA,QAAQ,CAAC2B,IAAT,GAAgBC,OAAhB;AACAvB,MAAAA,QAAQ,CAACwB,MAAM,EAAP,CAAR;AACH,KAHD,MAGO;AACH,YAAMC,cAAc,GAAG,IAAIC,IAAJ,CAASN,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAT,CAAvB;;AACA,UAAII,cAAc,GAAG,IAAIC,IAAJ,EAArB,EAAiC;AAC7B/B,QAAAA,QAAQ,CAAC2B,IAAT,GAAgBC,OAAhB;AACAvB,QAAAA,QAAQ,CAACwB,MAAM,EAAP,CAAR;AACH,OAHD,MAGO;AACH,cAAMzB,GAAG,GAAGqB,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAZ;AACArB,QAAAA,QAAQ,CAACF,aAAa,CAACC,GAAD,CAAd,CAAR;AACH;AACJ;AACJ,GAfD;AAgBH,CAjBM;AAmBP,OAAO,MAAMyB,MAAM,GAAG,MAAM;AACxB,SAAO;AACHX,IAAAA,IAAI,EAAEnB,WAAW,CAACiC;AADf,GAAP;AAGH,CAJM","sourcesContent":["\nimport * as actionTypes from './actionsTypes'\nimport firebase from '../../Firebase'\nimport 'firebase/firestore'\nlet db = firebase.firestore()\n\nexport const fetchUserData = (uid) => {\n    return dispatch => {\n        let docRef = db.collection(`users/`).doc(uid);\n        docRef.get().then((doc) => {\n            if (doc.exists) {\n                dispatch(setUserData(doc.data()))\n            } else {\n                console.log(\"No such document!\");\n            }\n        }).catch(function (error) {\n            console.log(\"Error getting document:\", error);\n        });\n    }\n}\n\nexport const setUserData = (data) => {\n    return {\n        type: actionTypes.SET_USER_DATA, data: data\n    }\n}\n\nexport const postUserData = (uid, newInfo) => {\n    return dispatch => {\n        db.collection(\"users\").doc(uid).update(newInfo)\n            .then(function () {\n                console.log(\"Document successfully updated!\");\n                dispatch(setUserData(newInfo))\n            })\n            .catch(function (error) {\n                console.error(\"Error updating document: \", error);\n            });\n    }\n}\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token')\n        if (!token) {\n            firebase.auth().signOut()\n            dispatch(logOut())\n        } else {\n            const expirationTime = new Date(localStorage.getItem('expirationDate'))\n            if (expirationTime < new Date()) {\n                firebase.auth().signOut()\n                dispatch(logOut())\n            } else {\n                const uid = localStorage.getItem('uid')\n                dispatch(fetchUserData(uid))\n            }\n        }\n    }\n}\n\nexport const logOut = () => {\n    return {\n        type: actionTypes.LOG_OUT\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}