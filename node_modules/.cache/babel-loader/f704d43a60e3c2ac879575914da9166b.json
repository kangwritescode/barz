{"ast":null,"code":"var _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/components/Scribble/Toolkit/ThesModal/ThesModal.js\";\nimport React, { Component } from 'react';\nimport './ThesModal.css';\nimport GenID from '../../../../shared/GenID';\n\nclass ThesModal extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.checkResponsetype = arr => {\n      try {\n        if (arr.length == 0 || arr.every(datum => typeof datum === 'string')) {\n          return 'suggestions';\n        } else {\n          return 'definitions';\n        }\n      } catch {\n        return 'suggestions';\n      }\n    };\n  }\n\n  render() {\n    let content = null;\n    let response = this.props.thesJSON;\n\n    if (response) {\n      let responseType = this.checkResponsetype(response);\n\n      if (responseType === 'suggestions') {\n        content = React.createElement(\"div\", {\n          id: \"thes-sugg-modal-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"fa fa-close\",\n          id: \"close-thes-sugg-modal\",\n          onClick: () => this.props.toggleModal('showthesJSON', false),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          id: \"suggestions-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          id: \"sorry\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, \"Sorry fam, nothing for '\", React.createElement(\"span\", {\n          id: \"wrong-word\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, this.props.theWord), \"'.\")));\n      } else {\n        // filter\n        response = response.filter(entry => entry.meta.id.toLowerCase() === this.props.theWord.toLowerCase() || entry.hom && entry.meta.id === this.props.theWord + ':' + entry.hom);\n        content = React.createElement(\"div\", {\n          id: \"thes-modal-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          id: \"thes-close-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"fa fa-close\",\n          id: \"close-thes-modal\",\n          onClick: () => this.props.toggleModal('showthesJSON', false),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"toolkit-modal\",\n          id: \"thes-content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          id: \"word-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, this.props.theWord), React.createElement(\"div\", {\n          id: \"line-divider\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }), response.map((type, index) => {\n          return React.createElement(\"div\", {\n            id: \"body-section-container\",\n            key: GenID(),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            id: \"thes-def\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            id: \"thes-def-type\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60\n            },\n            __self: this\n          }, type.fl, \". \"), type.shortdef.map((definition, index) => {\n            if (index === type.shortdef.length - 1) {\n              return \" \".concat(definition);\n            }\n\n            return \" \".concat(definition, \"; \");\n          })), type.meta.syns.map((synList, index) => {\n            return React.createElement(\"div\", {\n              key: GenID(),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 69\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              id: \"a-syn-list\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 70\n              },\n              __self: this\n            }, synList.map((word, index) => {\n              let comma = index === synList.length - 1 ? null : ', ';\n              return word + comma;\n            })), index === type.meta.syns.length - 1 ? null : React.createElement(\"div\", {\n              id: \"dotted-bottom\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 76\n              },\n              __self: this\n            }));\n          }), index === response.length - 1 ? React.createElement(\"div\", {\n            id: \"hacky-space-filler\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          }) : React.createElement(\"div\", {\n            id: \"type-divider\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          }));\n        })));\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"thes-modal-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"thes-modal-backdrop\",\n      onClick: () => this.props.toggleModal('showthesJSON', false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), content);\n  }\n\n}\n\nexport default ThesModal;","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/components/Scribble/Toolkit/ThesModal/ThesModal.js"],"names":["React","Component","GenID","ThesModal","checkResponsetype","arr","length","every","datum","render","content","response","props","thesJSON","responseType","toggleModal","theWord","filter","entry","meta","id","toLowerCase","hom","map","type","index","fl","shortdef","definition","syns","synList","word","comma"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './ThesModal.css'\nimport GenID from '../../../../shared/GenID'\n\nclass ThesModal extends Component {\n\n\n    checkResponsetype = (arr) => {\n        try {\n            if (arr.length == 0 || arr.every(datum => typeof datum === 'string')) {\n                return 'suggestions'\n            } else {\n                return 'definitions'\n            }\n        }\n        catch {\n            return 'suggestions'\n        }\n    }\n\n    render() {\n\n\n        let content = null\n        let response = this.props.thesJSON\n\n        if (response) {\n            let responseType = this.checkResponsetype(response)\n            if (responseType === 'suggestions') {\n\n                content = (\n                    <div id=\"thes-sugg-modal-body\">\n                        <i className=\"fa fa-close\" id=\"close-thes-sugg-modal\" onClick={() => this.props.toggleModal('showthesJSON', false)}></i>\n\n                        <div id=\"suggestions-wrapper\">\n                            <div id=\"sorry\">Sorry fam, nothing for '<span id='wrong-word'>{this.props.theWord}</span>'.</div>\n                        </div>\n                    </div>\n                )\n            }\n            else {\n                // filter\n                response = response.filter(entry => entry.meta.id.toLowerCase() === this.props.theWord.toLowerCase() || entry.hom && entry.meta.id === this.props.theWord + ':' + entry.hom)\n\n                content = (\n                    <div  id=\"thes-modal-body\">\n                        <div id='thes-close-wrapper'>\n                            <i className=\"fa fa-close\" id=\"close-thes-modal\" onClick={() => this.props.toggleModal('showthesJSON', false)}></i>\n                        </div>\n                        <div className='toolkit-modal' id=\"thes-content\">\n                            <div id=\"word-title\">{this.props.theWord}</div>\n                            <div id=\"line-divider\"></div>\n\n                            {/* for very single type */}\n                            {response.map((type, index) => {\n\n                                return (\n                                    <div id=\"body-section-container\" key={GenID()}>\n                                        <div id=\"thes-def\">\n                                            <i id=\"thes-def-type\">{type.fl}. </i>\n                                            {type.shortdef.map((definition, index) => {\n                                                if (index === type.shortdef.length - 1) {\n                                                    return ` ${definition}`\n                                                } return ` ${definition}; `\n                                            })}\n                                        </div>\n                                        {type.meta.syns.map((synList, index) => {\n                                            return (\n                                                <div key={GenID()}>\n                                                    <div id=\"a-syn-list\">\n                                                        {synList.map((word, index) => {\n                                                            let comma = index === synList.length - 1 ? null : ', '\n                                                            return word + comma\n                                                        })}\n                                                    </div>\n                                                    {index === type.meta.syns.length - 1 ? null : <div id=\"dotted-bottom\"></div>}\n                                                </div>\n                                            )\n                                        })}\n                                        {index === response.length - 1 ? <div id='hacky-space-filler' /> : <div id=\"type-divider\"></div>}\n                                    </div>\n                                )\n                            })}\n                        </div>\n\n                    </div>\n                )\n            }\n        }\n\n        return (\n            <div className='thes-modal-container'>\n                <div id=\"thes-modal-backdrop\" onClick={() => this.props.toggleModal('showthesJSON', false)}></div>\n                {content}\n            </div>\n        )\n    }\n}\nexport default ThesModal"]},"metadata":{},"sourceType":"module"}