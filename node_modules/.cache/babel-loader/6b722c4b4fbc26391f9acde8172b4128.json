{"ast":null,"code":"import _defineProperty from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/containers/Hub/ProfileBox/UploadImage/UploadImage.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport './UploadImage.css';\nimport { connect } from 'react-redux';\nimport firebase from 'firebase';\nimport * as actions from '../../../../store/actions/index';\nimport DotSpinner from '../../../../components/DotSpinner/DotSpinner';\n\nclass UploadImage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedFile: null,\n      hasChanged: false,\n      uploading: false,\n      showNotification: false,\n      notificationMessage: 'Upload Successful!',\n      notificationStatus: 'successColor'\n    };\n\n    this.fileSelectedHandler = event => {\n      let targetFile = event.target.files[0];\n\n      if (targetFile) {\n        let reader = new FileReader();\n        let presentIMG = document.getElementById(\"uploadIMGPresent\");\n        presentIMG.title = targetFile.name;\n\n        reader.onload = event => {\n          presentIMG.src = event.target.result;\n        };\n\n        reader.readAsDataURL(targetFile);\n        this.setState(_objectSpread({}, this.state, {\n          selectedFile: event.target.files[0],\n          hasChanged: true\n        }));\n      }\n    };\n\n    this.fileUploadHandler = () => {\n      this.setState(_objectSpread({}, this.state, {\n        uploading: true\n      }));\n      let storageRef = firebase.storage().ref();\n      let imageRef = storageRef.child(\"images/\".concat(this.props.uid, \"/userIMG.png\"));\n      let uploadTask = imageRef.put(this.state.selectedFile);\n      uploadTask.on('state_changed', snapshot => {}, err => {\n        this.setState(_objectSpread({}, this.state, {\n          uploading: false,\n          showNotification: true,\n          notificationStatus: 'failed',\n          notificationMessage: err.message\n        }));\n      }, () => {\n        uploadTask.snapshot.ref.getDownloadURL().then(downloadURL => {\n          this.props.setUserData(downloadURL);\n          this.setState(_objectSpread({}, this.state, {\n            uploading: false,\n            showNotification: true,\n            hasChanged: false\n          }));\n        });\n      });\n    };\n\n    this.toggleNotification = bool => {\n      this.setState(_objectSpread({}, this.state, {\n        showNotification: bool\n      }));\n    };\n  }\n\n  componentDidMount() {\n    this.setState(_objectSpread({}, this.state, {\n      selectedFile: this.props.photoURL\n    }));\n  }\n\n  render() {\n    let theImage;\n\n    if (this.state.selectedFile) {\n      theImage = React.createElement(\"img\", {\n        id: \"uploadIMGPresent\",\n        alt: \"what?\",\n        src: this.state.selectedFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      });\n    } else {\n      theImage = React.createElement(\"div\", {\n        className: \"lds-ripple\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ul-img-backdrop\",\n      onClick: () => this.props.setShowPhotoModal(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"UploadImage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"upload-image__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Set Photo\")), this.state.uploading ? React.createElement(DotSpinner, {\n      customStyle: {\n        position: 'absolute',\n        zIndex: 500,\n        color: 'orange',\n        top: '-10em'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }) : null, this.state.showNotification ? React.createElement(\"div\", {\n      className: \"upload-photo-success-msg\",\n      onAnimationEnd: () => this.toggleNotification(false),\n      id: this.state.notificationStatus ? \"successColor\" : \"failed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.state.notificationMessage) : null, React.createElement(\"div\", {\n      className: \"upload-image__content-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-close closeUploadImage\",\n      onClick: () => this.props.setShowPhotoModal(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), theImage, React.createElement(\"input\", {\n      onChange: this.fileSelectedHandler,\n      type: \"file\",\n      id: \"files\",\n      className: \"hidden\",\n      accept: \"image/x-png, image/jpeg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"UploadButtons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, !this.state.hasChanged ? React.createElement(\"label\", {\n      id: \"uploadIMG\",\n      htmlFor: \"files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, 'Choose File') : React.createElement(\"button\", {\n      id: \"uploadIMG\",\n      onClick: this.fileUploadHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Confirm\")))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    uid: state.user.uid,\n    photoURL: state.user.photoURL\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUserData: photoURL => dispatch(actions.setUserData({\n      photoURL: photoURL\n    }))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadImage);","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/containers/Hub/ProfileBox/UploadImage/UploadImage.js"],"names":["React","Component","connect","firebase","actions","DotSpinner","UploadImage","state","selectedFile","hasChanged","uploading","showNotification","notificationMessage","notificationStatus","fileSelectedHandler","event","targetFile","target","files","reader","FileReader","presentIMG","document","getElementById","title","name","onload","src","result","readAsDataURL","setState","fileUploadHandler","storageRef","storage","ref","imageRef","child","props","uid","uploadTask","put","on","snapshot","err","message","getDownloadURL","then","downloadURL","setUserData","toggleNotification","bool","componentDidMount","photoURL","render","theImage","setShowPhotoModal","position","zIndex","color","top","mapStateToProps","user","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './UploadImage.css'\nimport { connect } from 'react-redux'\nimport firebase from 'firebase'\nimport * as actions from '../../../../store/actions/index'\nimport DotSpinner from '../../../../components/DotSpinner/DotSpinner'\n\nclass UploadImage extends Component {\n\n    state = {\n        selectedFile: null,\n        hasChanged: false,\n        uploading: false,\n        showNotification: false,\n        notificationMessage: 'Upload Successful!',\n        notificationStatus: 'successColor'\n    }\n\n    componentDidMount() {\n\n        this.setState({\n            ...this.state,\n            selectedFile: this.props.photoURL\n        })\n    }\n\n\n    fileSelectedHandler = event => {\n        let targetFile = event.target.files[0]\n        if (targetFile) {\n            let reader = new FileReader()\n            let presentIMG = document.getElementById(\"uploadIMGPresent\")\n            presentIMG.title = targetFile.name\n            reader.onload = event => {\n                presentIMG.src = event.target.result\n            }\n            reader.readAsDataURL(targetFile)\n            this.setState({\n                ...this.state,\n                selectedFile: event.target.files[0],\n                hasChanged: true\n            })\n        }\n    }\n\n    fileUploadHandler = () => {\n        this.setState({\n            ...this.state,\n            uploading: true\n        })\n        let storageRef = firebase.storage().ref()\n        let imageRef = storageRef.child(`images/${this.props.uid}/userIMG.png`);\n        let uploadTask = imageRef.put(this.state.selectedFile)\n        uploadTask.on('state_changed', snapshot => {\n\n        }, (err) => {\n            this.setState({\n                ...this.state,\n                uploading: false,\n                showNotification: true,\n                notificationStatus: 'failed',\n                notificationMessage: err.message\n            })\n        }, () => {\n            uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\n                this.props.setUserData(downloadURL)\n                this.setState({\n                    ...this.state,\n                    uploading: false,\n                    showNotification: true,\n                    hasChanged: false\n                })\n            });\n        });\n\n    }\n\n    toggleNotification = (bool) => {\n        this.setState({\n            ...this.state,\n            showNotification: bool\n        })\n    }\n\n\n\n\n    render() {\n        let theImage;\n        if (this.state.selectedFile) {\n            theImage = (<img id=\"uploadIMGPresent\" alt={\"what?\"} src={this.state.selectedFile} />\n\n            )\n        } else {\n            theImage = (<div className=\"lds-ripple\"><div></div><div></div></div>)\n        }\n\n        return (\n            <div>\n                <div className=\"ul-img-backdrop\" onClick={() => this.props.setShowPhotoModal(false)}></div>\n\n                <div id=\"UploadImage\">\n                    <div className={`upload-image__header`}>\n                        <div>Set Photo</div>\n                    </div>\n                    {this.state.uploading ? <DotSpinner customStyle={{position: 'absolute', zIndex: 500, color: 'orange', top: '-10em'}}/> : null}\n                    {this.state.showNotification ?\n                        <div\n                            className=\"upload-photo-success-msg\"\n                            onAnimationEnd={() => this.toggleNotification(false)}\n                            id={this.state.notificationStatus ? \"successColor\" : \"failed\"}>\n                            {this.state.notificationMessage}\n                        </div> : null}\n\n                    <div className={`upload-image__content-container`}>\n                        <i className=\"fa fa-close closeUploadImage\" onClick={() => this.props.setShowPhotoModal(false)}></i>\n\n                        {/* <img alt=\"\" src={portrait}></img> */}\n                        {/* <h1>Set Photo</h1> */}\n                        {theImage}\n                        <input onChange={this.fileSelectedHandler} type=\"file\" id=\"files\" className=\"hidden\" accept=\"image/x-png, image/jpeg\" />\n                            \n                        <div id=\"UploadButtons\">\n                            {!this.state.hasChanged ? <label id=\"uploadIMG\" htmlFor=\"files\">{'Choose File'}</label>\n                            : <button id='uploadIMG' onClick={this.fileUploadHandler}>Confirm</button>}\n                            \n                        </div>\n                    </div>\n\n                </div>\n            </div>\n\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        uid: state.user.uid,\n        photoURL: state.user.photoURL,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setUserData: (photoURL) => dispatch(actions.setUserData({ photoURL: photoURL }))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadImage)"]},"metadata":{},"sourceType":"module"}