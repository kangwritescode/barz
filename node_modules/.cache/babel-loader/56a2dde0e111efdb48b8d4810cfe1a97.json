{"ast":null,"code":"import _defineProperty from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/davidkang/Desktop/local-barz/src/containers/Hub/DeleteAccount/DeleteAccount.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*global FB*/\nimport React, { Component } from 'react';\nimport firebase from 'firebase';\nimport { connect } from 'react-redux';\nimport './DeleteAccount.css';\nimport trash from '../../../assets/images/trash.png';\nimport * as actionTypes from '../../../store/actions/actionsTypes';\nimport * as actions from '../../../store/actions/index';\n\nclass DeleteAccount extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      password: '',\n      spinning: true,\n      FBtoken: null,\n      authType: null\n    };\n\n    this.componentDidMount = () => {\n      this.setSpinner(true);\n      FB.getLoginStatus(response => {\n        if (response.status === 'connected') {\n          var accessToken = response.authResponse.accessToken;\n          this.setAuthType('FB', accessToken);\n        } else if (response.status === 'not_authorized') {\n          this.setAuthType('FB', null);\n        } else {\n          this.setAuthType('PASSWORD', null);\n        }\n\n        this.setSpinner(false);\n      });\n    };\n\n    this.setAuthType = (authType, fbToken) => {\n      this.setState(_objectSpread({}, this.state, {\n        authType: authType,\n        FBtoken: fbToken\n      }));\n    };\n\n    this.setSpinner = bool => {\n      this.setState(_objectSpread({}, this.state, {\n        spinning: bool\n      }));\n    };\n\n    this.onInputHandler = event => {\n      this.setState(_objectSpread({}, this.state, {\n        password: event.target.value\n      }));\n    };\n\n    this.deleteAccount = async () => {\n      let user = firebase.auth().currentUser;\n      let credentials = firebase.auth.EmailAuthProvider.credential(user.email, this.state.password); // first reauthenticate\n\n      user.reauthenticateWithCredential(credentials).then(async () => {\n        let db = firebase.firestore(); // delete submissions\n\n        await db.collection(\"submissions\").get().then(snapshot => {\n          snapshot.forEach(doc => {\n            let post = doc.data();\n\n            if (post.uid === this.props.uid) {\n              doc.ref.delete();\n            }\n          });\n        }).catch(err => {\n          throw err;\n        }); // delete follows\n\n        await db.collection(\"follows\").get().then(snapshot => {\n          snapshot.forEach(doc => {\n            let follow = doc.data();\n\n            if (follow.from === this.props.uid || follow.to === this.props.uid) {\n              doc.ref.delete();\n            }\n          });\n        }).catch(err => {\n          throw err;\n        }); // delete votes\n\n        await db.collection(\"postVotes\").get().then(snapshot => {\n          snapshot.forEach(doc => {\n            let vote = doc.data();\n\n            if (vote.receiverID === this.props.uid || vote.voterID === this.props.uid) {\n              doc.ref.delete();\n            }\n          });\n        }).catch(err => {\n          throw err;\n        }); // delete post comments\n\n        await db.collection(\"postComments\").get().then(querySnapshot => {\n          querySnapshot.forEach(doc => {\n            let comment = doc.data();\n\n            if (comment.uid === this.props.uid || comment.receiverUID === this.props.uid) {\n              doc.ref.delete();\n            }\n          });\n        }).catch(err => {\n          throw err;\n        }); //  remove profile image\n\n        let storage = firebase.storage();\n        let storageRef = storage.ref();\n        let imgRef = storageRef.child(\"images/\".concat(this.props.uid, \"/userIMG.png\"));\n        await imgRef.delete().then(() => console.log('profile image deleted successfully')).catch(err => {\n          throw err;\n        }); // delete the user\n\n        await db.collection('users').doc(\"\".concat(this.props.uid)).delete().then(() => {\n          console.log('user deleted successfully');\n        }).catch(err => {\n          throw err;\n        }); // delete auth acount\n\n        await firebase.auth().currentUser.delete().then(res => console.log('ACCOUNT WAS DELETED!!!!!')).catch(err => {\n          throw err;\n        });\n        this.props.logout();\n      }).catch(err => console.log(err.message));\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"delete-backdrop\",\n      onClick: () => this.props.toggleDeleteAcc(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"delete-account-modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-close\",\n      id: \"exit-delete-modal\",\n      onClick: () => this.props.toggleDeleteAcc(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      id: \"delete-icon\",\n      src: trash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"are-you-sure\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Delete Account\"), React.createElement(\"div\", {\n      id: \"will-be-deleted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"All user data will be deleted forever.\"), React.createElement(\"input\", {\n      type: \"password\",\n      id: \"delete-pass-input\",\n      placeholder: \"password\",\n      onChange: this.onInputHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"delete-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"delete-button\",\n      id: \"cancel\",\n      onClick: () => this.props.toggleDeleteAcc(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(\"div\", {\n      className: \"delete-button\",\n      id: this.state.password === '' ? 'delete-disabled' : 'delete',\n      onClick: this.state.password === '' ? null : this.deleteAccount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Delete\"))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    uid: state.user.uid\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    logout: () => dispatch(actions.logOut())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteAccount);","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/containers/Hub/DeleteAccount/DeleteAccount.js"],"names":["React","Component","firebase","connect","trash","actionTypes","actions","DeleteAccount","state","password","spinning","FBtoken","authType","componentDidMount","setSpinner","FB","getLoginStatus","response","status","accessToken","authResponse","setAuthType","fbToken","setState","bool","onInputHandler","event","target","value","deleteAccount","user","auth","currentUser","credentials","EmailAuthProvider","credential","email","reauthenticateWithCredential","then","db","firestore","collection","get","snapshot","forEach","doc","post","data","uid","props","ref","delete","catch","err","follow","from","to","vote","receiverID","voterID","querySnapshot","comment","receiverUID","storage","storageRef","imgRef","child","console","log","res","logout","message","render","toggleDeleteAcc","mapStateToProps","mapDispatchToProps","dispatch","logOut"],"mappings":"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","sourcesContent":["/*global FB*/\n\nimport React, { Component } from 'react'\nimport firebase from 'firebase'\nimport { connect } from 'react-redux'\nimport './DeleteAccount.css'\nimport trash from '../../../assets/images/trash.png'\nimport * as actionTypes from '../../../store/actions/actionsTypes'\nimport * as actions from '../../../store/actions/index'\n\nclass DeleteAccount extends Component {\n\n    state = {\n        password: '',\n        spinning: true,\n        FBtoken: null,\n        authType: null\n    }\n\n    componentDidMount = () => {\n        this.setSpinner(true)\n        FB.getLoginStatus((response) => {\n            if (response.status === 'connected') {\n                var accessToken = response.authResponse.accessToken;\n                this.setAuthType('FB', accessToken)\n            } else if (response.status === 'not_authorized') {\n                this.setAuthType('FB', null)\n            } else {\n                this.setAuthType('PASSWORD', null)\n            }\n            this.setSpinner(false)\n        });\n    }\n    setAuthType = (authType, fbToken) => {\n        this.setState({\n            ...this.state,\n            authType: authType,\n            FBtoken: fbToken\n        })\n\n    }\n    setSpinner = bool => {\n        this.setState({\n            ...this.state,\n            spinning: bool\n        })\n    }\n\n    onInputHandler = (event) => {\n        this.setState({\n            ...this.state,\n            password: event.target.value\n        })\n    }\n\n\n    deleteAccount = async () => {\n\n        let user = firebase.auth().currentUser;\n        let credentials = firebase.auth.EmailAuthProvider.credential(\n            user.email,\n            this.state.password\n        );\n        // first reauthenticate\n        user.reauthenticateWithCredential(credentials)\n            .then(async () => {\n                let db = firebase.firestore()\n\n                // delete submissions\n                await db.collection(\"submissions\").get().then(snapshot => {\n                    snapshot.forEach(doc => {\n                        let post = doc.data()\n                        if (post.uid === this.props.uid) {\n                            doc.ref.delete()\n                        }\n                    })\n                }).catch(err => { throw err })\n\n                // delete follows\n                await db.collection(\"follows\").get().then(snapshot => {\n                    snapshot.forEach(doc => {\n                        let follow = doc.data()\n                        if (follow.from === this.props.uid\n                            || follow.to === this.props.uid) {\n                            doc.ref.delete()\n                        }\n                    })\n                }).catch(err => { throw err })\n\n\n                // delete votes\n                await db.collection(\"postVotes\").get().then(snapshot => {\n                    snapshot.forEach(doc => {\n                        let vote = doc.data()\n                        if (vote.receiverID === this.props.uid\n                            || vote.voterID === this.props.uid) {\n                            doc.ref.delete()\n                        }\n                    })\n                }).catch(err => { throw err })\n\n                // delete post comments\n                await db.collection(\"postComments\").get().then(querySnapshot => {\n                    querySnapshot.forEach(doc => {\n\n                        let comment = doc.data()\n                        if (comment.uid === this.props.uid\n                            || comment.receiverUID === this.props.uid) {\n                            doc.ref.delete()\n                        }\n\n                    })\n                }).catch(err => { throw err })\n\n\n\n                //  remove profile image\n                let storage = firebase.storage();\n                let storageRef = storage.ref();\n                let imgRef = storageRef.child(`images/${this.props.uid}/userIMG.png`)\n                await imgRef.delete()\n                    .then(() => console.log('profile image deleted successfully'))\n                    .catch((err) => { throw err })\n\n                // delete the user\n                await db.collection('users').doc(`${this.props.uid}`).delete()\n                    .then(() => { console.log('user deleted successfully') })\n                    .catch(err => { throw err })\n\n                // delete auth acount\n                await firebase.auth().currentUser.delete()\n                    .then(res => console.log('ACCOUNT WAS DELETED!!!!!'))\n                    .catch(err => { throw err })\n\n                this.props.logout()\n\n            })\n            .catch(err => console.log(err.message))\n\n    }\n\n\n    render() {\n\n        return (\n            <div>\n                <div className=\"delete-backdrop\" onClick={() => this.props.toggleDeleteAcc(false)} />\n                <div id=\"delete-account-modal\">\n                    <i className=\"fa fa-close\" id=\"exit-delete-modal\" onClick={() => this.props.toggleDeleteAcc(false)}></i>\n                    <img id=\"delete-icon\" src={trash}></img>\n                    <div id=\"are-you-sure\">Delete Account</div>\n                    <div id=\"will-be-deleted\">\n                        All user data will be deleted forever.\n                    </div>\n                    <input type=\"password\" id=\"delete-pass-input\" placeholder=\"password\" onChange={this.onInputHandler}></input>\n                    <div id=\"delete-buttons\">\n                        <div className=\"delete-button\" id=\"cancel\" onClick={() => this.props.toggleDeleteAcc(false)}>Cancel</div>\n                        <div\n                            className={`delete-button`}\n                            id={this.state.password === '' ? 'delete-disabled' : 'delete'} onClick={this.state.password === '' ? null : this.deleteAccount}>Delete</div>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        uid: state.user.uid\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        logout: () => dispatch(actions.logOut())\n    }\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteAccount);\n"]},"metadata":{},"sourceType":"module"}