{"ast":null,"code":"import _defineProperty from \"/Users/davidkang/Desktop/local-barz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase';\n\nconst fetchPosts = setter => {\n  var db = firebase.firestore();\n  const listener = db.collection('submissions').onSnapshot(snapshot => {\n    const fetchedPosts = [];\n    snapshot.forEach(doc => {\n      fetchedPosts.push(_objectSpread({}, doc.data(), {\n        pid: doc.id\n      }));\n    });\n    setter(fetchedPosts);\n  });\n  return listener;\n};\n\nconst fetchUserSortedPosts = (setter, uid) => {\n  var db = firebase.firestore();\n  db.collection('submissions').where(\"uid\", \"==\", uid).orderBy('createdOn', 'desc').onSnapshot(querySnapshot => {\n    var posts = [];\n    querySnapshot.forEach(doc => {\n      posts.push(_objectSpread({\n        pid: doc.id\n      }, doc.data()));\n    });\n    setter(posts);\n  }, err => console.log(err));\n};\n\nconst fetchVotes = setter => {\n  var db = firebase.firestore();\n  const listener = db.collection('postVotes').onSnapshot(snapshot => {\n    console.log('votes listener detected a change');\n    var fetchedVote;\n    var fetchedVotes = [];\n    snapshot.forEach(vote => {\n      fetchedVote = _objectSpread({}, vote.data(), {\n        vid: vote.id\n      });\n      fetchedVotes.push(fetchedVote);\n    });\n    setter(fetchedVotes);\n  });\n  return listener;\n};\n\nconst fetchVotesForUID = async (setter, uid) => {\n  var db = firebase.firestore();\n  await db.collection('postVotes').where('receiverID', '==', uid).get().then(querySnapshot => {\n    var votes = {};\n    querySnapshot.forEach(doc => {\n      var vote = doc.data();\n\n      if (vote.value === 1) {\n        votes[vote.pid] = votes[vote.pid] ? votes[vote.pid] + 1 : 1;\n      }\n    });\n    setter(votes);\n  });\n};\n\nconst fetchFollows = setter => {\n  const db = firebase.firestore();\n  const listener = db.collection('follows').onSnapshot(snapshot => {\n    var fetchedFollows = [];\n    snapshot.forEach(doc => {\n      fetchedFollows.push(doc.data());\n    });\n    setter(fetchedFollows);\n  }, err => console.log(err));\n  return listener;\n};\n\nconst fetchSubmissionComments = setter => {\n  const db = firebase.firestore();\n  const listener = db.collection('postComments').onSnapshot(snapshot => {\n    var comments = [];\n\n    for (var comment of snapshot.docs) {\n      comment = _objectSpread({}, comment.data(), {\n        cid: comment.id\n      });\n      comments.push(comment);\n    }\n\n    setter(comments);\n  });\n  return listener;\n};\n\nexport default {\n  allPostsListener: fetchPosts,\n  allVotesListener: fetchVotes,\n  allFollowsListener: fetchFollows,\n  allSubmissionCommentsListener: fetchSubmissionComments,\n  voteForUIDListener: fetchVotesForUID,\n  userSortedPostsListener: fetchUserSortedPosts\n};","map":{"version":3,"sources":["/Users/davidkang/Desktop/local-barz/src/FireApi/FireApi.js"],"names":["firebase","fetchPosts","setter","db","firestore","listener","collection","onSnapshot","snapshot","fetchedPosts","forEach","doc","push","data","pid","id","fetchUserSortedPosts","uid","where","orderBy","querySnapshot","posts","err","console","log","fetchVotes","fetchedVote","fetchedVotes","vote","vid","fetchVotesForUID","get","then","votes","value","fetchFollows","fetchedFollows","fetchSubmissionComments","comments","comment","docs","cid","allPostsListener","allVotesListener","allFollowsListener","allSubmissionCommentsListener","voteForUIDListener","userSortedPostsListener"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,UAArB;;AAEA,MAAMC,UAAU,GAAIC,MAAD,IAAY;AAC3B,MAAIC,EAAE,GAAGH,QAAQ,CAACI,SAAT,EAAT;AACA,QAAMC,QAAQ,GAAGF,EAAE,CAACG,UAAH,CAAc,aAAd,EAA6BC,UAA7B,CAAwCC,QAAQ,IAAI;AACjE,UAAMC,YAAY,GAAG,EAArB;AACAD,IAAAA,QAAQ,CAACE,OAAT,CAAiBC,GAAG,IAAI;AACpBF,MAAAA,YAAY,CAACG,IAAb,mBACOD,GAAG,CAACE,IAAJ,EADP;AAEIC,QAAAA,GAAG,EAAEH,GAAG,CAACI;AAFb;AAIH,KALD;AAMAb,IAAAA,MAAM,CAACO,YAAD,CAAN;AACH,GATgB,CAAjB;AAUA,SAAOJ,QAAP;AACH,CAbD;;AAcA,MAAMW,oBAAoB,GAAG,CAACd,MAAD,EAASe,GAAT,KAAiB;AAC1C,MAAId,EAAE,GAAGH,QAAQ,CAACI,SAAT,EAAT;AACAD,EAAAA,EAAE,CAACG,UAAH,CAAc,aAAd,EAA6BY,KAA7B,CAAmC,KAAnC,EAA0C,IAA1C,EAAgDD,GAAhD,EAAqDE,OAArD,CAA6D,WAA7D,EAA0E,MAA1E,EACKZ,UADL,CACgBa,aAAa,IAAI;AACzB,QAAIC,KAAK,GAAG,EAAZ;AACAD,IAAAA,aAAa,CAACV,OAAd,CAAsBC,GAAG,IAAI;AAAEU,MAAAA,KAAK,CAACT,IAAN;AAAaE,QAAAA,GAAG,EAAEH,GAAG,CAACI;AAAtB,SAA6BJ,GAAG,CAACE,IAAJ,EAA7B;AAA4C,KAA3E;AACAX,IAAAA,MAAM,CAACmB,KAAD,CAAN;AACH,GALL,EAKOC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CALd;AAMH,CARD;;AAUA,MAAMG,UAAU,GAAIvB,MAAD,IAAY;AAC3B,MAAIC,EAAE,GAAGH,QAAQ,CAACI,SAAT,EAAT;AACA,QAAMC,QAAQ,GAAGF,EAAE,CAACG,UAAH,CAAc,WAAd,EAA2BC,UAA3B,CAAsCC,QAAQ,IAAI;AAC/De,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACA,QAAIE,WAAJ;AACA,QAAIC,YAAY,GAAG,EAAnB;AACAnB,IAAAA,QAAQ,CAACE,OAAT,CAAiBkB,IAAI,IAAI;AACrBF,MAAAA,WAAW,qBACJE,IAAI,CAACf,IAAL,EADI;AAEPgB,QAAAA,GAAG,EAAED,IAAI,CAACb;AAFH,QAAX;AAIAY,MAAAA,YAAY,CAACf,IAAb,CAAkBc,WAAlB;AACH,KAND;AAOAxB,IAAAA,MAAM,CAACyB,YAAD,CAAN;AACH,GAZgB,CAAjB;AAaA,SAAOtB,QAAP;AACH,CAhBD;;AAkBA,MAAMyB,gBAAgB,GAAG,OAAO5B,MAAP,EAAee,GAAf,KAAuB;AAC5C,MAAId,EAAE,GAAGH,QAAQ,CAACI,SAAT,EAAT;AACA,QAAMD,EAAE,CAACG,UAAH,CAAc,WAAd,EAA2BY,KAA3B,CAAiC,YAAjC,EAA+C,IAA/C,EAAqDD,GAArD,EAA0Dc,GAA1D,GACDC,IADC,CACIZ,aAAa,IAAI;AACnB,QAAIa,KAAK,GAAG,EAAZ;AACAb,IAAAA,aAAa,CAACV,OAAd,CAAsBC,GAAG,IAAI;AACzB,UAAIiB,IAAI,GAAGjB,GAAG,CAACE,IAAJ,EAAX;;AACA,UAAIe,IAAI,CAACM,KAAL,KAAe,CAAnB,EAAsB;AAClBD,QAAAA,KAAK,CAACL,IAAI,CAACd,GAAN,CAAL,GAAkBmB,KAAK,CAACL,IAAI,CAACd,GAAN,CAAL,GAAkBmB,KAAK,CAACL,IAAI,CAACd,GAAN,CAAL,GAAkB,CAApC,GAAwC,CAA1D;AACH;AAEJ,KAND;AAOAZ,IAAAA,MAAM,CAAC+B,KAAD,CAAN;AAEH,GAZC,CAAN;AAaH,CAfD;;AAiBA,MAAME,YAAY,GAAIjC,MAAD,IAAY;AAC7B,QAAMC,EAAE,GAAGH,QAAQ,CAACI,SAAT,EAAX;AACA,QAAMC,QAAQ,GAAGF,EAAE,CAACG,UAAH,CAAc,SAAd,EAAyBC,UAAzB,CAAoCC,QAAQ,IAAI;AAC7D,QAAI4B,cAAc,GAAG,EAArB;AACA5B,IAAAA,QAAQ,CAACE,OAAT,CAAiBC,GAAG,IAAI;AACpByB,MAAAA,cAAc,CAACxB,IAAf,CAAoBD,GAAG,CAACE,IAAJ,EAApB;AACH,KAFD;AAGAX,IAAAA,MAAM,CAACkC,cAAD,CAAN;AACH,GANgB,EAMdd,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CANO,CAAjB;AAOA,SAAOjB,QAAP;AACH,CAVD;;AAYA,MAAMgC,uBAAuB,GAAInC,MAAD,IAAY;AACxC,QAAMC,EAAE,GAAGH,QAAQ,CAACI,SAAT,EAAX;AACA,QAAMC,QAAQ,GAAGF,EAAE,CAACG,UAAH,CAAc,cAAd,EAA8BC,UAA9B,CAA0CC,QAAD,IAAc;AACpE,QAAI8B,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIC,OAAT,IAAoB/B,QAAQ,CAACgC,IAA7B,EAAmC;AAC/BD,MAAAA,OAAO,qBACAA,OAAO,CAAC1B,IAAR,EADA;AAEH4B,QAAAA,GAAG,EAAEF,OAAO,CAACxB;AAFV,QAAP;AAIAuB,MAAAA,QAAQ,CAAC1B,IAAT,CAAc2B,OAAd;AACH;;AACDrC,IAAAA,MAAM,CAACoC,QAAD,CAAN;AACH,GAVgB,CAAjB;AAWA,SAAOjC,QAAP;AACH,CAdD;;AAgBA,eAAe;AACXqC,EAAAA,gBAAgB,EAAEzC,UADP;AAEX0C,EAAAA,gBAAgB,EAAElB,UAFP;AAGXmB,EAAAA,kBAAkB,EAAET,YAHT;AAIXU,EAAAA,6BAA6B,EAAER,uBAJpB;AAKXS,EAAAA,kBAAkB,EAAEhB,gBALT;AAMXiB,EAAAA,uBAAuB,EAAE/B;AANd,CAAf","sourcesContent":["import firebase from 'firebase'\n\nconst fetchPosts = (setter) => {\n    var db = firebase.firestore()\n    const listener = db.collection('submissions').onSnapshot(snapshot => {\n        const fetchedPosts = []\n        snapshot.forEach(doc => {\n            fetchedPosts.push({\n                ...doc.data(),\n                pid: doc.id\n            })\n        })\n        setter(fetchedPosts)\n    })\n    return listener\n}\nconst fetchUserSortedPosts = (setter, uid) => {\n    var db = firebase.firestore()\n    db.collection('submissions').where(\"uid\", \"==\", uid).orderBy('createdOn', 'desc')\n        .onSnapshot(querySnapshot => {\n            var posts = []\n            querySnapshot.forEach(doc => { posts.push({ pid: doc.id, ...doc.data() }) })\n            setter(posts)\n        }, err => console.log(err))\n}\n\nconst fetchVotes = (setter) => {\n    var db = firebase.firestore()\n    const listener = db.collection('postVotes').onSnapshot(snapshot => {\n        console.log('votes listener detected a change')\n        var fetchedVote;\n        var fetchedVotes = []\n        snapshot.forEach(vote => {\n            fetchedVote = {\n                ...vote.data(),\n                vid: vote.id\n            }\n            fetchedVotes.push(fetchedVote)\n        })\n        setter(fetchedVotes)\n    })\n    return listener\n}\n\nconst fetchVotesForUID = async (setter, uid) => {\n    var db = firebase.firestore()\n    await db.collection('postVotes').where('receiverID', '==', uid).get()\n        .then(querySnapshot => {\n            var votes = {}\n            querySnapshot.forEach(doc => {\n                var vote = doc.data()\n                if (vote.value === 1) {\n                    votes[vote.pid] = votes[vote.pid] ? votes[vote.pid] + 1 : 1\n                }\n                \n            })\n            setter(votes)\n\n        })\n}\n\nconst fetchFollows = (setter) => {\n    const db = firebase.firestore()\n    const listener = db.collection('follows').onSnapshot(snapshot => {\n        var fetchedFollows = []\n        snapshot.forEach(doc => {\n            fetchedFollows.push(doc.data())\n        })\n        setter(fetchedFollows)\n    }, err => console.log(err))\n    return listener\n}\n\nconst fetchSubmissionComments = (setter) => {\n    const db = firebase.firestore()\n    const listener = db.collection('postComments').onSnapshot((snapshot) => {\n        var comments = []\n        for (var comment of snapshot.docs) {\n            comment = {\n                ...comment.data(),\n                cid: comment.id\n            }\n            comments.push(comment)\n        }\n        setter(comments)\n    })\n    return listener\n}\n\nexport default {\n    allPostsListener: fetchPosts,\n    allVotesListener: fetchVotes,\n    allFollowsListener: fetchFollows,\n    allSubmissionCommentsListener: fetchSubmissionComments,\n    voteForUIDListener: fetchVotesForUID,\n    userSortedPostsListener: fetchUserSortedPosts\n}"]},"metadata":{},"sourceType":"module"}