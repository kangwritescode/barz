{"ast":null,"code":"import _defineProperty from \"/Users/davidkang/Documents/GitHub/barz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase';\n\nconst fetchPosts = (setter, setDoneFetching) => {\n  let db = firebase.firestore();\n  const listener = db.collection('submissions').onSnapshot(snapshot => {\n    const fetchedPosts = [];\n    snapshot.forEach(doc => {\n      fetchedPosts.push(_objectSpread({}, doc.data(), {\n        pid: doc.id\n      }));\n    });\n    setter(fetchedPosts);\n\n    if (setDoneFetching) {\n      setDoneFetching(true);\n    }\n  }, err => {\n    console.log(err.message);\n\n    if (setDoneFetching) {\n      setDoneFetching(true);\n    }\n  });\n  return listener;\n};\n\nconst fetchPostsOnce = async () => {\n  let db = firebase.firestore();\n  return db.collection(\"submissions\").get().then(querySnapshot => {\n    let submissions = [];\n    querySnapshot.forEach(doc => {\n      submissions.push(_objectSpread({}, doc.data(), {\n        pid: doc.id\n      }));\n    });\n    return submissions;\n  }).catch(err => {\n    throw err;\n  });\n};\n\nconst fetchPost = (setter, pid) => {\n  let db = firebase.firestore();\n  db.collection('submissions').doc(pid).get().then(doc => {\n    setter(_objectSpread({}, doc.data(), {\n      pid: doc.id\n    }));\n  });\n};\n\nconst fetchUserSortedPosts = (setter, uid) => {\n  let db = firebase.firestore();\n  const listener = db.collection('submissions').where(\"uid\", \"==\", uid).orderBy('createdOn', 'desc').onSnapshot(querySnapshot => {\n    let posts = [];\n    querySnapshot.forEach(doc => {\n      posts.push(_objectSpread({\n        pid: doc.id\n      }, doc.data()));\n    });\n    setter(posts);\n  }, err => console.log(err));\n  return listener;\n};\n\nconst fetchVotes = setter => {\n  let db = firebase.firestore();\n  const listener = db.collection('postVotes').onSnapshot(snapshot => {\n    console.log('votes listener detected a change');\n    let fetchedVote;\n    let fetchedVotes = [];\n    snapshot.forEach(vote => {\n      fetchedVote = _objectSpread({}, vote.data(), {\n        vid: vote.id\n      });\n      fetchedVotes.push(fetchedVote);\n    });\n    setter(fetchedVotes);\n  });\n  return listener;\n};\n\nconst fetchVotesOnce = async () => {\n  let db = firebase.firestore();\n  return db.collection(\"postVotes\").get().then(querySnapshot => {\n    let votes = [];\n    querySnapshot.forEach(doc => {\n      votes.push(doc.data());\n    });\n    return votes;\n  }).catch(err => {\n    throw err;\n  });\n};\n\nconst fetchVotesForPost = (setter, pid) => {\n  let db = firebase.firestore();\n  const listener = db.collection('postVotes').where('pid', '==', pid).onSnapshot(snapshot => {\n    console.log('votes listener detected a change');\n    let fetchedVote;\n    let fetchedVotes = [];\n    snapshot.forEach(vote => {\n      fetchedVote = _objectSpread({}, vote.data(), {\n        vid: vote.id\n      });\n      fetchedVotes.push(fetchedVote);\n    });\n    setter(fetchedVotes);\n  });\n  return listener;\n};\n\nconst fetchVotesForUID = (setter, uid) => {\n  let db = firebase.firestore();\n  const listener = db.collection('postVotes').where('receiverID', '==', uid).onSnapshot(querySnapshot => {\n    let votes = {};\n    querySnapshot.forEach(doc => {\n      let vote = doc.data();\n\n      if (vote.value === 1) {\n        votes[vote.pid] = votes[vote.pid] ? votes[vote.pid] + 1 : 1;\n      }\n    });\n    setter(votes);\n  });\n  return listener;\n};\n\nconst fetchFollows = setter => {\n  const db = firebase.firestore();\n  const listener = db.collection('follows').onSnapshot(snapshot => {\n    let fetchedFollows = [];\n    snapshot.forEach(doc => {\n      fetchedFollows.push(doc.data());\n    });\n    setter(fetchedFollows);\n  }, err => console.log(err));\n  return listener;\n};\n\nconst fetchSubmissionComments = setter => {\n  const db = firebase.firestore();\n  const listener = db.collection('postComments').onSnapshot(snapshot => {\n    let comments = [];\n\n    for (let comment of snapshot.docs) {\n      comment = _objectSpread({}, comment.data(), {\n        cid: comment.id\n      });\n      comments.push(comment);\n    }\n\n    setter(comments);\n  }, err => {\n    console.log(err);\n  });\n  return listener;\n};\n\nconst fetchSubmissionCommentsForPost = (setter, pid) => {\n  const db = firebase.firestore();\n  const listener = db.collection('postComments').where('pid', '==', pid).onSnapshot(snapshot => {\n    let comments = [];\n\n    for (let comment of snapshot.docs) {\n      comment = _objectSpread({}, comment.data(), {\n        cid: comment.id\n      });\n      comments.push(comment);\n    }\n\n    setter(comments);\n  });\n  return listener;\n};\n\nexport default {\n  allPostsListener: fetchPosts,\n  allVotesListener: fetchVotes,\n  allFollowsListener: fetchFollows,\n  allSubmissionCommentsListener: fetchSubmissionComments,\n  voteForUIDListener: fetchVotesForUID,\n  userSortedPostsListener: fetchUserSortedPosts,\n  votesForPostListener: fetchVotesForPost,\n  submissionCommentsForPostListener: fetchSubmissionCommentsForPost,\n  fetchSinglePost: fetchPost,\n  fetchPostsOnce: fetchPostsOnce,\n  fetchVotesOnce: fetchVotesOnce\n};","map":{"version":3,"sources":["/Users/davidkang/Documents/GitHub/barz/src/Api/FireApi/FireApi.js"],"names":["firebase","fetchPosts","setter","setDoneFetching","db","firestore","listener","collection","onSnapshot","snapshot","fetchedPosts","forEach","doc","push","data","pid","id","err","console","log","message","fetchPostsOnce","get","then","querySnapshot","submissions","catch","fetchPost","fetchUserSortedPosts","uid","where","orderBy","posts","fetchVotes","fetchedVote","fetchedVotes","vote","vid","fetchVotesOnce","votes","fetchVotesForPost","fetchVotesForUID","value","fetchFollows","fetchedFollows","fetchSubmissionComments","comments","comment","docs","cid","fetchSubmissionCommentsForPost","allPostsListener","allVotesListener","allFollowsListener","allSubmissionCommentsListener","voteForUIDListener","userSortedPostsListener","votesForPostListener","submissionCommentsForPostListener","fetchSinglePost"],"mappings":"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","sourcesContent":["import firebase from 'firebase'\n\nconst fetchPosts = (setter, setDoneFetching) => {\n    let db = firebase.firestore()\n    const listener = db.collection('submissions').onSnapshot(snapshot => {\n        const fetchedPosts = []\n        snapshot.forEach(doc => {\n            fetchedPosts.push({\n                ...doc.data(),\n                pid: doc.id\n            })\n        })\n        setter(fetchedPosts)\n        if (setDoneFetching) {setDoneFetching(true)}\n    }, err => {\n        console.log(err.message)\n        if (setDoneFetching) {setDoneFetching(true)}\n    })\n    return listener\n}\nconst fetchPostsOnce = async () => {\n    let db = firebase.firestore()\n    return db.collection(\"submissions\").get()\n        .then((querySnapshot) => {\n            let submissions = []\n            querySnapshot.forEach((doc) => {\n                submissions.push({\n                    ...doc.data(),\n                    pid: doc.id\n                })\n            });\n            return submissions\n        })\n        .catch(err => { throw err })\n}\nconst fetchPost = (setter, pid) => {\n    let db = firebase.firestore()\n    db.collection('submissions').doc(pid).get()\n        .then(doc => {\n            setter({ ...doc.data(), pid: doc.id })\n        })\n}\n\nconst fetchUserSortedPosts = (setter, uid) => {\n    let db = firebase.firestore()\n    const listener = db.collection('submissions').where(\"uid\", \"==\", uid).orderBy('createdOn', 'desc')\n        .onSnapshot(querySnapshot => {\n            let posts = []\n            querySnapshot.forEach(doc => { posts.push({ pid: doc.id, ...doc.data() }) })\n            setter(posts)\n        }, err => console.log(err))\n    return listener\n}\n\nconst fetchVotes = (setter) => {\n    let db = firebase.firestore()\n    const listener = db.collection('postVotes').onSnapshot(snapshot => {\n        console.log('votes listener detected a change')\n        let fetchedVote;\n        let fetchedVotes = []\n        snapshot.forEach(vote => {\n            fetchedVote = {\n                ...vote.data(),\n                vid: vote.id\n            }\n            fetchedVotes.push(fetchedVote)\n        })\n        setter(fetchedVotes)\n    })\n    return listener\n}\nconst fetchVotesOnce = async () => {\n    let db = firebase.firestore()\n    return db.collection(\"postVotes\").get()\n        .then((querySnapshot) => {\n            let votes = []\n            querySnapshot.forEach((doc) => {\n                votes.push(doc.data())\n            });\n            return votes\n\n        })\n        .catch(err => { throw err })\n}\n\nconst fetchVotesForPost = (setter, pid) => {\n    let db = firebase.firestore()\n    const listener = db.collection('postVotes').where('pid', '==', pid).onSnapshot(snapshot => {\n        console.log('votes listener detected a change')\n        let fetchedVote;\n        let fetchedVotes = []\n        snapshot.forEach(vote => {\n            fetchedVote = {\n                ...vote.data(),\n                vid: vote.id\n            }\n            fetchedVotes.push(fetchedVote)\n        })\n        setter(fetchedVotes)\n    })\n    return listener\n}\n\nconst fetchVotesForUID = (setter, uid) => {\n    let db = firebase.firestore()\n    const listener = db.collection('postVotes').where('receiverID', '==', uid).onSnapshot(querySnapshot => {\n        let votes = {}\n        querySnapshot.forEach(doc => {\n            let vote = doc.data()\n            if (vote.value === 1) {\n                votes[vote.pid] = votes[vote.pid] ? votes[vote.pid] + 1 : 1\n            }\n\n        })\n        setter(votes)\n\n    })\n    return listener\n}\n\nconst fetchFollows = (setter) => {\n    const db = firebase.firestore()\n    const listener = db.collection('follows').onSnapshot(snapshot => {\n        let fetchedFollows = []\n        snapshot.forEach(doc => {\n            fetchedFollows.push(doc.data())\n        })\n        setter(fetchedFollows)\n    }, err => console.log(err))\n    return listener\n}\n\nconst fetchSubmissionComments = (setter) => {\n    const db = firebase.firestore()\n    const listener = db.collection('postComments').onSnapshot((snapshot) => {\n        let comments = []\n        for (let comment of snapshot.docs) {\n            comment = {\n                ...comment.data(),\n                cid: comment.id\n            }\n            comments.push(comment)\n        }\n        setter(comments)\n    }, err => {\n        console.log(err)\n    })\n    return listener\n}\nconst fetchSubmissionCommentsForPost = (setter, pid) => {\n    const db = firebase.firestore()\n    const listener = db.collection('postComments').where('pid', '==', pid).onSnapshot((snapshot) => {\n        let comments = []\n        for (let comment of snapshot.docs) {\n            comment = {\n                ...comment.data(),\n                cid: comment.id\n            }\n            comments.push(comment)\n        }\n        setter(comments)\n    })\n    return listener\n}\n\nexport default {\n    allPostsListener: fetchPosts,\n    allVotesListener: fetchVotes,\n    allFollowsListener: fetchFollows,\n    allSubmissionCommentsListener: fetchSubmissionComments,\n    voteForUIDListener: fetchVotesForUID,\n    userSortedPostsListener: fetchUserSortedPosts,\n    votesForPostListener: fetchVotesForPost,\n    submissionCommentsForPostListener: fetchSubmissionCommentsForPost,\n    fetchSinglePost: fetchPost,\n    fetchPostsOnce: fetchPostsOnce,\n    fetchVotesOnce: fetchVotesOnce\n}"]},"metadata":{},"sourceType":"module"}